{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/new.js","path":"js/new.js","modified":0,"renderable":1},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495870312000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1495870312000},{"_id":"source/.DS_Store","hash":"5ae3d439aaabbd1a2084e33f5bb5daa4235174c8","modified":1496368820000},{"_id":"themes/huxblog/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1495870767000},{"_id":"themes/huxblog/_config.yml","hash":"78c57a69155be39d8e91d3ad8cb8d0367760d7f6","modified":1495871349000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1495870312000},{"_id":"source/_posts_backup/2016-05-20-eslint.markdown","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495849829000},{"_id":"source/_posts/2015-12-20-partial-scroll.markdown","hash":"bf8f57fd1aa48ea70866c442afdf6b375890430f","modified":1495849829000},{"_id":"source/_posts/2015-12-06-reducer-react-app-size.markdown","hash":"4a06da2d9894d8443963d84b96a09f839f28299c","modified":1495849829000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496368642000},{"_id":"source/_posts/2015-12-07-react-server-render.markdown","hash":"2f895650dd0d02f0c4296413d4868ff0230dd3ee","modified":1495849829000},{"_id":"source/_posts/2016-05-19-wow-old-or-our-old.markdown","hash":"2731e7ddbda14d6801e0b87351579d4fefbc99bf","modified":1495849829000},{"_id":"source/_posts/2016-05-19-flex-layout.markdown","hash":"c281cba4b5bdfed71e771570572b3544bf179d29","modified":1495849829000},{"_id":"source/_posts/2016-05-20-frontend.markdown","hash":"b3486a81dc29e843af0e314deaf19a29fcc842fb","modified":1495849829000},{"_id":"source/_posts/2016-05-20-gulp.markdown","hash":"86b53c0f224716babb900755b342b49d56821325","modified":1495849829000},{"_id":"source/_posts/2016-06-28-redraw-and-rearrangement.markdown","hash":"de247e1b972ed33cc02cb67cf35b5bb7a98a1c76","modified":1495849829000},{"_id":"source/_posts/2016-07-08-frontend-module-definition.markdown","hash":"bf3bda0ada88096fc473007fd78d0a9db2ece1f9","modified":1495849829000},{"_id":"source/_posts/2016-09-05-javascript-source-code.markdown","hash":"a0a287f1af6606328c7e97e4379c41389f6d4e91","modified":1495849829000},{"_id":"source/_posts/2016-08-17-webpack.markdown","hash":"cbd0f1d47d6248da00ce5baec5403a2f708e0e84","modified":1495849829000},{"_id":"source/_posts/2016-12-06-jekyll-github-page-travis-ci.markdown","hash":"0780507a320023bf44c8bebd368db2c256896e5b","modified":1495849829000},{"_id":"source/_posts/2016-08-29-vue-demo.markdown","hash":"2c45adc9bf495df872b27738c324b979ef160d19","modified":1495849829000},{"_id":"source/_posts/2016-12-28-understore-analysis.markdown","hash":"ae3b4a98e37229668a781c3ffc103b31e7994803","modified":1495849829000},{"_id":"source/_posts/2016-08-18-underscore.markdown","hash":"55e7b33b07ac7b35073e85054f7136486178887e","modified":1495849829000},{"_id":"source/_posts/2017-01-06-nodejs.markdown","hash":"cb32fbdc1067a4fbf4079b70f05ec49ffa7500b9","modified":1495849829000},{"_id":"source/_posts/2017-01-19-javascript-note.markdown","hash":"98156d2fee03c6e7fd825d9ec9bc460f5c380b02","modified":1495849829000},{"_id":"source/_posts/2017-01-19-frontend-summary.markdown","hash":"a8c950deba595ecbfe1eae3bf2070b38370fc675","modified":1495867323000},{"_id":"source/_posts/2017-01-06-freshman-guide.markdown","hash":"5d67537564d3c563e061c9ec7a337cd8561eec2b","modified":1495849829000},{"_id":"source/_posts/2017-01-19-javascript-summary.markdown","hash":"7f19bc20a0992e43e2e138d4275e06873153ff86","modified":1495849829000},{"_id":"source/_posts/2017-03-06-we-have-a-problem-with-promise.markdown","hash":"2c2480130361b2d552342e11f01751dc02930b3d","modified":1495849829000},{"_id":"source/_posts/2017-02-09-nextgen-web-pwa.markdown","hash":"5b43a5a6cca0875bc604519691d89fb16ded49ed","modified":1495849829000},{"_id":"source/_posts/2017-03-09-functional-program.markdown","hash":"0368e946578e5980a83240bed2eb2c6f144c6a70","modified":1495849829000},{"_id":"source/_posts/2017-03-17-mobx.markdown","hash":"321599a6fcb370ca29e076b7118c47efc1e5dc4a","modified":1495849829000},{"_id":"source/_posts/2017-03-22-frontend-interview-question.markdown","hash":"241dfcfd73e06d277c6b28169f5ea7d8ffd5364d","modified":1495849829000},{"_id":"source/_posts/2017-04-28-gulp-and-webpack.markdown","hash":"3e9a3746bdd0fd176153fede7f3fb942ae97ded8","modified":1495849829000},{"_id":"source/_posts/2017-05-06-redux-async.markdown","hash":"3aedd4dc945b8f4810a0cc6ba2f7c52ee65fe0c1","modified":1495849829000},{"_id":"source/_posts/2017-05-10-throttle-debounce.markdown","hash":"0c2c50290d2509b82cb0d3048d1a442eecbfd73a","modified":1495849829000},{"_id":"source/_posts2/2014-01-29-hello-2015.markdown","hash":"9717e74daf37a5c26df489e75303dfe28d5d648d","modified":1495849829000},{"_id":"source/_posts2/2014-08-16-miui6.markdown","hash":"6d0932af947708513d51a9698b6e68bc94bc7ed2","modified":1495849829000},{"_id":"source/_posts2/2014-09-04-is-pure-android-better.markdown","hash":"0e2e069fda14c32ceec99efa0f61cec25a3ea93e","modified":1495849829000},{"_id":"source/_posts2/2014-10-01-why-alibaba-ux-sucks.markdown","hash":"f31816da1f1d57b6bcbf5cdb3a2bb94329764141","modified":1495849829000},{"_id":"source/_posts2/2014-12-13-wechat-block-kuaidi.markdown","hash":"c0d749aff22f875de046b9ef25b8620c1b3c4695","modified":1495849829000},{"_id":"source/_posts2/2014-11-20-responsive-web-design.markdown","hash":"d7c749ee719560c4d7411613406b8e737a5bcda7","modified":1495849829000},{"_id":"source/_posts2/2015-03-10-apple-event-2015.markdown","hash":"a196bd813fd34df2e83832a8b286a32ff14a0ed8","modified":1495849829000},{"_id":"source/_posts2/2015-04-15-os-metro.markdown","hash":"dbd409f866121c994eb0691aaad19154e9b60eba","modified":1495849829000},{"_id":"source/_posts2/2015-03-25-digital-native.markdown","hash":"0fd09aeccbbaf597d6de47f758963ecdd4e21a9f","modified":1495849829000},{"_id":"source/_posts2/2015-03-31-e2e_user_scenarios.markdown","hash":"2f5c8706278aa571b5cee75cc1c4b5d5df398a27","modified":1495849829000},{"_id":"source/_posts2/2015-04-14-unix-linux-note.markdown","hash":"33f0355b51c4e0669e9d3130054b6a294f3a91f6","modified":1495849829000},{"_id":"source/_posts2/2015-05-25-js-module-loader.markdown","hash":"caffbffb0fbfbaa8b239422946e4819dddbb1255","modified":1495849829000},{"_id":"source/_posts2/2015-05-11-see-u-ali.markdown","hash":"162152f921d2e51473a89151d4bd8dab766419ab","modified":1495849829000},{"_id":"source/_posts2/2015-06-15-alitrip-strategy.markdown","hash":"f8ece64556bf77341d0e7e6bb5508db0cb6a5a66","modified":1495849829000},{"_id":"source/_posts2/2015-09-22-js-version.markdown","hash":"2a27616f57cb7f7d73dbd0b8ca168181f4f13896","modified":1495849829000},{"_id":"source/_posts2/2015-07-09-js-module-7day.markdown","hash":"bab02ca5dadc9b073bf3f9f904dbf876411f4caf","modified":1495849829000},{"_id":"source/_posts2/2015-10-28-how-designer-learn-fe.markdown","hash":"29b093cd0647f3f188f2ebf062d64c148f82b32c","modified":1495849829000},{"_id":"source/_posts2/2015-12-15-ios9-safari-web.markdown","hash":"c81c0c545acd667d53365d6d28eb05c77df89eee","modified":1495849829000},{"_id":"source/_posts2/2015-12-28-css-sucks-2015.markdown","hash":"6c09c5aeb190b72c4211a0ad8710ff908bd874e5","modified":1495849829000},{"_id":"source/_posts2/2016-10-20-pwa-qcon2016.markdown","hash":"1e509464054ac4b640ad13095772dc3c318adafc","modified":1495849829000},{"_id":"source/_posts2/2016-02-01-React-vs-Angular2.markdown","hash":"01d71e721a4e718b3b1852a75be1252891d4bc05","modified":1495849829000},{"_id":"source/_posts2/2016-06-05-pwa-in-my-pov.markdown","hash":"2f4e3b75aaf3579e05a45b8dbdc77d160d63b284","modified":1495849829000},{"_id":"source/_posts2/2016-11-20-sw-101-gdgdf.markdown","hash":"1e934f06925ce476a21a74901594531bb911514f","modified":1495849829000},{"_id":"source/_posts_backup/2016-06-06-html-tab.markdown","hash":"9457ee219288b92b05112ddaead83c781a615b6a","modified":1495849829000},{"_id":"source/about/index.md","hash":"900b72df10ceb5337e4be7bbb51d077a2b901ba4","modified":1495870312000},{"_id":"source/_posts_backup/2016-06-12-performance-optimization.markdown","hash":"e5df8c10ed874648f3c689aebd18718f3c8f55f4","modified":1495849829000},{"_id":"source/_posts_backup/2016-05-19-css3.markdown","hash":"a8385e9cbdb60f1a74f94905dd17d4e645dc7285","modified":1495849829000},{"_id":"source/_posts_backup/2016-06-22-React.markdown","hash":"e3effeee4c9dc610e85b34bff5d53c65c29b7e68","modified":1495849829000},{"_id":"source/_posts_backup/2016-06-29-html-DOM.markdown","hash":"5e31b1bb76af770bec4fa9057baa3629f7e1b311","modified":1495849829000},{"_id":"source/_posts_backup/2016-07-18-React-Native.markdown","hash":"5fa3acdde7ee969070b6805bfecfd2c523df3f81","modified":1495849829000},{"_id":"source/_posts_backup/2016-07-04-redux.markdown","hash":"d06619ffe2f89af2f0d41aaa01a11b2ecfd54819","modified":1495849829000},{"_id":"source/_posts_backup/2016-07-18-javascript-this.markdown","hash":"59d120f588684b87b104b8faeb4da57dc0422493","modified":1495849829000},{"_id":"source/_posts_backup/2017-03-10-functional-lib-ramada.markdown","hash":"f7bac88f79e1263717915df0252c42bdd347eb01","modified":1495849829000},{"_id":"source/_posts_backup/2017-03-10-got-git-notes.markdown","hash":"de8f82a56e7d68a6cae977ee57c98d934dfea589","modified":1495849829000},{"_id":"source/_posts_backup/2017-03-24-babel-plugin.markdown","hash":"806ae1df286c084b37b1f20aff10516d0e8234d7","modified":1495849829000},{"_id":"source/_posts_backup/2017-03-24-require-modules.markdown","hash":"4632eaabd244daafba8a6bfd02d894b71b65430c","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-06-CSS-BEM.markdown","hash":"11025fcb6002c9bd87ba7486ddbc5991d337eb3d","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-10-gray.markdown","hash":"34f101ec538b80af8ae2e6aca7c211f21f64b032","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-11-react-top-10-2017.markdown","hash":"b655ed7008476b5d7a1646f48fe4754467648e5d","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-21-Nginx.markdown","hash":"d49debd3b878a0a698aa86c82ea68b17566121c0","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-21-PWA.markdown","hash":"57d73df8bffd6a6bbb86036a3b45095b03e828c3","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-11-CommonJS-AMD-CMD-UMD.markdown","hash":"63d3a6be6df8a37cf3f4ca2ad907f90662e3457e","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-11-webpack-and-rollup-the-same-but-different.markdown","hash":"7eaffe074fbeefe58e80d686d24c51306f0d8532","modified":1495849829000},{"_id":"source/_posts_backup/2017-04-21-RxJs.markdown","hash":"f4b76fb549c307a1b8ef3b09c7487e193f6521d4","modified":1495849829000},{"_id":"source/_posts_backup/2017-05-02-Cross-Domain.markdown","hash":"cd202158e7c289fe03b74c590963d91d56f595b9","modified":1495870871000},{"_id":"source/_posts_backup/2017-05-02-React-js-post.markdown","hash":"8fd90ec5836d00644e927c52cf9c7e6eece469aa","modified":1495849829000},{"_id":"source/_posts_backup/2017-05-24-trip-xi-zang.markdown","hash":"d0d06c70c2d53174420cae23693c438dfdd6a1cf","modified":1495849829000},{"_id":"source/_posts_backup/lazyMan.js","hash":"6b66730009b5bd719a23e52b461454b85bc538e4","modified":1495849829000},{"_id":"source/_posts_backup/2017-05-22-type-script.markdown","hash":"93dc10054bc00d8a9f70855fbce5d6068c2c4adb","modified":1495849829000},{"_id":"source/_posts_backup/2017-05-15-redux-sage-vs-redux-observable.markdown","hash":"1d195f75b82e875e558dc0db2ef0f7fc4d47fe43","modified":1495849829000},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1495870312000},{"_id":"source/img/avatar.jpg","hash":"3aef487dc3076381998e8be91abd565b3ee553b2","modified":1495875657000},{"_id":"source/img/favicon.ico","hash":"a854832cbfc336f43489c599bc2278a51055e730","modified":1490702284000},{"_id":"source/news/index.md","hash":"7d6cb7f4c29d7b3594033ac1a310a4bcb9f7d1b8","modified":1495871165000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1495870312000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1495870312000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1495870312000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1495870312000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70a45ed7f50d0f61ad3c89b00a7c2eff39f2ea57","modified":1496369194000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1495870312000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1495870312000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1495870312000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1495870312000},{"_id":"themes/huxblog/layout/news.ejs","hash":"16883106d00ba38827fa7444dc41c3980c07ca6c","modified":1496369198000},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1495870312000},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1495870312000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1495870312000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1495870312000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1495870312000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1495870312000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1495870312000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1495870312000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1495870312000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1495870312000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1495870312000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"9062ad56f0c71966fb9c9a4730780e3a904c4e32","modified":1495877110000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1495870312000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1495870312000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1495870312000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1495870312000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"64c450f6fb583be4815ccc3899df94c0c6973090","modified":1495877098000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"69c34d4d7f46e62e933104c9bb3f8b34e318d952","modified":1495879003000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"f53ca932468d695f612117c915a735b7ed8d1af3","modified":1495879051000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1495870312000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1495870312000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1495870312000},{"_id":"themes/huxblog/source/js/new.js","hash":"80c352351c45157b69d268d967295a06a305925f","modified":1495992552000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1495870312000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1495870312000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1495870312000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1495870312000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1495870312000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1495870312000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1495870312000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1495870312000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1495870312000},{"_id":"public/404.html","hash":"57abfa0aa1273ff86bc0226b04fcaf81cecf099c","modified":1496368832614},{"_id":"public/news/index.html","hash":"14caedccecc8db52b435c4e8877c6f41d2ad554e","modified":1496368832614},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"138c84259ffe63bf080a09d3270eabfdebd8e214","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/page/2/index.html","hash":"551dac199961e0053d8f59b1934e46fd99c1f459","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/page/3/index.html","hash":"4f608497e0c80430341fede5b14441db423f03e3","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"4bb8e90fbe2850b299f4c86d33a64c806fb53291","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/page/2/index.html","hash":"7ee7557268c254ed18ccde634868c27535e7ecde","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/05/index.html","hash":"c7397b5dc93801bb3cb2dc1576b07ae3eb6006cd","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/05/page/2/index.html","hash":"b423b3dcd291a342630c3a33f53f8202379f7028","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/07/index.html","hash":"aba9afda8c13a7da4cf48ddb3d2365866c0f0ff6","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2016/12/index.html","hash":"869220c8d59e1ea7c82fd3e2d72e294d1ac2418f","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2017/index.html","hash":"0088c3911a9ad67603a35c5232995078010bb91a","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2017/01/index.html","hash":"207fec9c46b21515a1ffe3b67fa10a80dafa86b1","modified":1496368832615},{"_id":"public/i_dont_wanna_use_default_archives/2017/02/index.html","hash":"83984f4131c3e88d131293e9f6b6f956aba44dc3","modified":1496368832616},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/index.html","hash":"b7158188e8af5549560c0616cea8eae14c4f835c","modified":1496368832616},{"_id":"public/tags/HTML/index.html","hash":"d3dbe23db17d1ab9b4d1587e2e7aaf3d8c214bfe","modified":1496368832616},{"_id":"public/tags/WebPack/index.html","hash":"44cb418a2dc66ed76842e5612e93fe0213b5d97d","modified":1496368832616},{"_id":"public/tags/React/index.html","hash":"48cb1f8ec6994194f185e23ee8e3f5fc6003cd2e","modified":1496368832616},{"_id":"public/tags/回忆/index.html","hash":"87b12f191146c2ba5249f3a7b39b82cfb931c703","modified":1496368832616},{"_id":"public/tags/CSS/index.html","hash":"49c9da7e1b9392ca46a55161591d7c9b0c1bbaee","modified":1496368832616},{"_id":"public/tags/Github/index.html","hash":"e036fd3894cb563345f6db6ddf8281544ae8880d","modified":1496368832616},{"_id":"public/tags/前端工具/index.html","hash":"21e1d4def1f517a310e75b0b1c347836758fa360","modified":1496368832616},{"_id":"public/tags/Frontend/index.html","hash":"1505662d6672c16696d7c377145cbc4ab1240e59","modified":1496368832616},{"_id":"public/tags/javascript/index.html","hash":"f18c73bab206ccd3c233b5dab2094857047caf80","modified":1496368832616},{"_id":"public/tags/Jekyll/index.html","hash":"e591b7d0dbd8ab77ce9f40cc3f7d1a954a2e772a","modified":1496368832616},{"_id":"public/tags/Vue/index.html","hash":"d3d1593ba750c7bb323eb93f972423ed6c434643","modified":1496368832616},{"_id":"public/tags/understore/index.html","hash":"674c16b1d3aa801c55aa341dbb8871caaded2a87","modified":1496368832616},{"_id":"public/tags/NodeJS/index.html","hash":"aa392a516f5a23ca5e1a8307adcd7d1bb43ababa","modified":1496368832616},{"_id":"public/tags/Javascript/index.html","hash":"a79c8da4332825f7030eb57bdc68c283aa15cf2c","modified":1496368832616},{"_id":"public/tags/Guide/index.html","hash":"e704cdb2b03d90d618ce55abd046f51b0a6800bc","modified":1496368832616},{"_id":"public/tags/Promise/index.html","hash":"33308a535443892a325d7799869c6a6126d029d3","modified":1496368832616},{"_id":"public/tags/Functional/index.html","hash":"c43c25396e73aeea293c9daa8daf2139817459a2","modified":1496368832616},{"_id":"public/tags/前端开发/index.html","hash":"c27730e6393f2f24f486d60a9894a88fbd17b549","modified":1496368832616},{"_id":"public/tags/JavaScript/index.html","hash":"573f26b65aed6d14a7585125a4429693d734f030","modified":1496368832616},{"_id":"public/tags/PWA/index.html","hash":"414b99050cdffbd88014e128d8983597e391ae76","modified":1496368832616},{"_id":"public/tags/Mobx/index.html","hash":"a5e90aa963acff210486d0892c149e6471fcac13","modified":1496368832616},{"_id":"public/tags/Gulp-and-Markdown/index.html","hash":"7d06df2ac6cb9599d463a54291dbe8685ada87cc","modified":1496368832617},{"_id":"public/tags/Redux/index.html","hash":"1e9291066a239dbae0b2b11b302eb13d5866c9d4","modified":1496368832617},{"_id":"public/archives/index.html","hash":"599b90fe4759fb2cbe0781e3a9039d96ada1da41","modified":1496368832617},{"_id":"public/tags/index.html","hash":"546a40c5f2c0df92678982216e225c4a7d85d564","modified":1496368832617},{"_id":"public/2017/03/22/2017-05-10-throttle-debounce/index.html","hash":"585cbf4e4bbc311347690ef1ae87a05371d91959","modified":1496368832617},{"_id":"public/2017/03/22/2017-05-06-redux-async/index.html","hash":"a8531d6cdb45be823224d9d0512fe78b7552e1a6","modified":1496368832617},{"_id":"public/2017/03/22/2017-04-28-gulp-and-webpack/index.html","hash":"ce7c1ad8622ecd362ffc920da695141e0608c111","modified":1496368832617},{"_id":"public/2017/03/22/2017-03-22-frontend-interview-question/index.html","hash":"1692d41ea494d4117cd2a921197a5cdd1d87a836","modified":1496368832617},{"_id":"public/2017/03/17/2017-03-17-mobx/index.html","hash":"d50e1d3fb16bc41082712b078da11da73487b327","modified":1496368832617},{"_id":"public/2017/03/09/2017-03-09-functional-program/index.html","hash":"1ae1e1f89ca182bffb155dd0c29515d9cc853615","modified":1496368832617},{"_id":"public/2017/02/09/2017-02-09-nextgen-web-pwa/index.html","hash":"20827c9c6bbbf72c7363587c4f7e00f206cc3bfa","modified":1496368832617},{"_id":"public/2017/01/06/2017-01-06-nodejs/index.html","hash":"7690c57ce5e9c739cf4d0824ffb08a701b0c42f9","modified":1496368832617},{"_id":"public/2017/01/06/2017-01-06-freshman-guide/index.html","hash":"6af905e466205b87909beab74bf2dce7dea1610f","modified":1496368832618},{"_id":"public/2016/12/06/2016-12-06-jekyll-github-page-travis-ci/index.html","hash":"fb85208555af1afd204a351e329282c3da36d5eb","modified":1496368832618},{"_id":"public/2016/07/04/2016-07-08-frontend-module-definition/index.html","hash":"2836d26eb2cb5c3e7c7ca51f690163ae0ce0edd3","modified":1496368832618},{"_id":"public/2016/07/04/2017-03-06-we-have-a-problem-with-promise/index.html","hash":"ac96b82f4bd276b6c280914a74b0f49ad495a17f","modified":1496368832618},{"_id":"public/2016/05/23/2017-01-19-javascript-note/index.html","hash":"e70b95db27fc779353d28ce38b7b5bbece253e8a","modified":1496368832618},{"_id":"public/2016/05/23/2016-06-28-redraw-and-rearrangement/index.html","hash":"90e986a208ab4e789630e6afd3f8ff3170e2d63e","modified":1496368832618},{"_id":"public/2016/05/20/2016-05-20-gulp/index.html","hash":"3dcf1920e8b95dc2876d3a122256f6538cb033e6","modified":1496368832618},{"_id":"public/2016/05/19/2016-09-05-javascript-source-code/index.html","hash":"bc09fbd5a0cf2042101d18903156679ec0f592ea","modified":1496368832618},{"_id":"public/2016/05/19/2016-08-18-underscore/index.html","hash":"26c74e8e188e9a20ddcd7ce32643e367bfe1a160","modified":1496368832618},{"_id":"public/2016/05/19/2017-01-19-frontend-summary/index.html","hash":"406304045ecc0322e724346608e2a91357792e1d","modified":1496368832618},{"_id":"public/2016/05/19/2016-08-17-webpack/index.html","hash":"7dd751575266a9990c075fc84ef90d9ae8862a11","modified":1496368832618},{"_id":"public/2016/05/19/2017-01-19-javascript-summary/index.html","hash":"341d5e6e3ec19c23a87fdb5ed88ebb8e42ae51c1","modified":1496368832618},{"_id":"public/2016/05/19/2016-08-29-vue-demo/index.html","hash":"c42c0bc41e184db7920a54d10652c71f7a53ec97","modified":1496368832618},{"_id":"public/2016/05/19/2016-12-28-understore-analysis/index.html","hash":"4e271f350ff87c63bcf78d78a0d45d4e72bc1fa1","modified":1496368832618},{"_id":"public/2016/05/19/2015-12-06-reducer-react-app-size/index.html","hash":"67635b1e6e79530de687b7eb65d7208466153752","modified":1496368832618},{"_id":"public/2016/05/19/2016-05-20-frontend/index.html","hash":"c825ef74913212c37001da320fc2be98d3b84900","modified":1496368832618},{"_id":"public/2016/05/19/2016-05-19-flex-layout/index.html","hash":"10e84f8d8586505cc235d958c5c83eb33ac8c18c","modified":1496368832618},{"_id":"public/2016/05/19/2016-05-19-wow-old-or-our-old/index.html","hash":"4cce7adc9839aa1b8c86e9b59191212c3a8b95ed","modified":1496368832619},{"_id":"public/2016/05/19/2015-12-07-react-server-render/index.html","hash":"38f934e4f83da411761b1ff868ee766039d82816","modified":1496368832619},{"_id":"public/2016/05/19/2015-12-20-partial-scroll/index.html","hash":"d5cb57d91d838834fddc3cfc7239b3fe5116d1e4","modified":1496368832619},{"_id":"public/about/index.html","hash":"a57d656ba8b3a6046860e26fb5e353cb67810042","modified":1496368832619},{"_id":"public/index.html","hash":"1164557d1f3fbdab58243c2b004e7624787e279a","modified":1496368832619},{"_id":"public/page/2/index.html","hash":"b3251f5d22c63f20e91152c6de14df6ff5c82bb7","modified":1496368832619},{"_id":"public/page/3/index.html","hash":"70e420a6355ca676a872ad7f387279d808873b72","modified":1496368832619},{"_id":"public/img/avatar.jpg","hash":"3aef487dc3076381998e8be91abd565b3ee553b2","modified":1496368832652},{"_id":"public/img/favicon.ico","hash":"a854832cbfc336f43489c599bc2278a51055e730","modified":1496368832652},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1496368832652},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1496368832652},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1496368832652},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/Epsilon2.1.model.json","hash":"4226e07102ddcfcb5f503ef57f0699b1d110a0dd","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/Epsilon2.1.physics.json","hash":"bf3c028943c77c57b5f232728e9f2be87c0b298d","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f01.exp.json","hash":"8b1e18b83ed8c6a61e6a8d4482c143b5d74fb67d","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f03.exp.json","hash":"a19f1a5c6ea1284375ca14b0528d05305f27a8e2","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f02.exp.json","hash":"c2b3c9fb44e826de413e70cae794cd270d5b40ba","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f04.exp.json","hash":"d0cb0f7cb1ffb7df5b5d7f67d37b61db8dc88b95","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f05.exp.json","hash":"d36310a904cdce7ed83f610c946a4db7b6225cb7","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f06.exp.json","hash":"01ae00dfe6bf03af7d222651c2842bd26c2e4445","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f07.exp.json","hash":"b11ff0cc1e66240a34167a552c50cd5c857c3636","modified":1496368832652},{"_id":"public/live2d/assets/Epsilon2.1/expressions/f08.exp.json","hash":"d692c3617d7c7c46b64c0b9bbea273065f10c1f0","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1496368832653},{"_id":"public/live2d/assets/Epsilon2.1/motions/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.json","hash":"bccb9f36a360387d42384c9f493e71bdd8e62280","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/model.json","hash":"bccb9f36a360387d42384c9f493e71bdd8e62280","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_00_idle.mtn","hash":"d383fc08986b4d1f746d71abbea6f7b5f54dcc95","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_01.mtn","hash":"91d2def2e00393fcedaaca36cd80340fa95a2d1b","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_02.mtn","hash":"9283c809509daf3f580dcb92bab14960b5a89283","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_03.mtn","hash":"afec07ed22acdf28a5c49b78c560e29c3c2cfaa0","modified":1496368832653},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_04.mtn","hash":"50360a6572518b447af3315236659a576aa1b248","modified":1496368832653},{"_id":"public/live2d/assets/Unitychan/motions/m_01.mtn","hash":"97d08b57c3b07a854f69cdef3ce6d13a2b2ece1c","modified":1496368832653},{"_id":"public/live2d/assets/Unitychan/motions/idle_01.mtn","hash":"e38a7dcfcad059b695f935b2071a1270c1ddf905","modified":1496368832653},{"_id":"public/live2d/assets/Unitychan/motions/idle_02.mtn","hash":"8c3929962a4991c94bf7aeaf33169d61ccaccb2c","modified":1496368832654},{"_id":"public/live2d/assets/Gantzert_Felixander/mtn/A_05.mtn","hash":"40ad1e684108035c6478b76c9e4e1953104725da","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_03.mtn","hash":"dd140c6c4702f3fbd785a85a4d5d8cfa32b9bc32","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_02.mtn","hash":"a4dd9580452854f6adc7b30e9e85702a7641179c","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_04.mtn","hash":"32f8515854a89878c5becbabf56dabd4c675d437","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_05.mtn","hash":"ca1f068a2c9c56519e4306115b95d1f497f31124","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_07.mtn","hash":"35caceb556d9bb4fc2a5ed4f8c51d766a6e70405","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_06.mtn","hash":"cb16f119956346e4b15a1c432491423893cf2389","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_08.mtn","hash":"fbd6ae1967446a421d8505a8d29d5f7f64b5c0d7","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_09.mtn","hash":"4b942bfbde2a82f19bb4aab7e54e3caae9691da6","modified":1496368832654},{"_id":"public/live2d/assets/Unitychan/motions/m_10.mtn","hash":"837f0cda82543d87c12108957a16e482964f3796","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/motions/m_11.mtn","hash":"2c5ec476b9e3246d8c7a5ae4611401d3420cfa1e","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/motions/m_12.mtn","hash":"90e96587969b78785c16cdffbdbe0b220cac39b7","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/motions/m_13.mtn","hash":"f08d7f660fda4029fec2acb1f1389f855b5d1b96","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/motions/m_14.mtn","hash":"4c5c7fdc05237a090341d4690bd7e07344728e9e","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/unitychan.physics.json","hash":"5eb780c10b6ca8e95c4fe21e39eb72c338bbd5bb","modified":1496368832655},{"_id":"public/live2d/assets/Unitychan/unitychan.model.json","hash":"b3ec4d7eb33ba23994508ca4abc34c81316cf4dc","modified":1496368832655},{"_id":"public/live2d/assets/haru/expressions/f01.exp.json","hash":"8b1e18b83ed8c6a61e6a8d4482c143b5d74fb67d","modified":1496368832655},{"_id":"public/live2d/assets/haru/expressions/f03.exp.json","hash":"17528f5455b98c44a4dace1c3d30d0062d8cda92","modified":1496368832655},{"_id":"public/live2d/assets/haru/expressions/f02.exp.json","hash":"6bcd807fa6bd9e428ff89100476f46771876bcc5","modified":1496368832655},{"_id":"public/live2d/assets/haru/expressions/f06.exp.json","hash":"624f277a2aa74ec08806b15a47c7a6b7d08d1cf9","modified":1496368832655},{"_id":"public/live2d/assets/haru/expressions/f07.exp.json","hash":"ab75b0e775c8ca2cdc1c9fb703c7653d990c84c7","modified":1496368832656},{"_id":"public/live2d/assets/haru/expressions/f04.exp.json","hash":"ec5be4003ef0477cb01ab9232e597bb0ebc015fd","modified":1496368832656},{"_id":"public/live2d/assets/haru/expressions/f05.exp.json","hash":"2fe0cb167f9816565ecb606bcf02bd6c21e4f95f","modified":1496368832656},{"_id":"public/live2d/assets/haru/expressions/f08.exp.json","hash":"681eb1def87318bbbbf2d0795a4233f50d2c3012","modified":1496368832656},{"_id":"public/live2d/assets/haru/haru.model.json","hash":"be8047c14753fd122b62a93270e1c0a1a513040f","modified":1496368832656},{"_id":"public/live2d/assets/haru/haru.physics.json","hash":"333fb889714d6f1d3f009d2340419d372e5e5220","modified":1496368832656},{"_id":"public/live2d/assets/haru/haru.pose.json","hash":"2a9eb4638fb941f27389327fe3339e0fb9a00ba1","modified":1496368832656},{"_id":"public/live2d/assets/haru/haru_01.model.json","hash":"56f3e3998c38e745210cc230e98105b9a6d1c913","modified":1496368832656},{"_id":"public/live2d/assets/haru/haru_02.model.json","hash":"2b25711e4056b542134eef6a8742acfff38eadfa","modified":1496368832656},{"_id":"public/live2d/assets/haru/motions/flickHead_00.mtn","hash":"66577f6dde2bec905930fba0dd5f06de939c8f1e","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/idle_00.mtn","hash":"bbaaafe4de159dd4fb73d137d283c640d3fede53","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/pinchIn_00.mtn","hash":"ed792ed8226aa5a3e5bf059285b2c95855c11303","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/idle_02.mtn","hash":"82291b3b78339d52f559a65d02b78e0b30180503","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/idle_01.mtn","hash":"035c196f276ed177239ea05eeaece68b0fda2935","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/pinchOut_00.mtn","hash":"db831991287e3a4724578f068a68e48168081d5a","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_00.mtn","hash":"4041b2f1f2f4a84454180f9dab14e46d99e135c0","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/shake_00.mtn","hash":"7e938c4abe83273766c4562a571301811dea1de6","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_01.mtn","hash":"91fbfe1870f7a0a5f5fdb87c213c41b2a8cb5648","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_03.mtn","hash":"fcd573576112ad5f4e4b7dc0b750de79f150f971","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_02.mtn","hash":"e93a2163cbb85525338e11a520e317329b11fb65","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_04.mtn","hash":"557811c5f4ddbd393542366ef95794b19fc60387","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_05.mtn","hash":"5f48e50e938f98636519c370745a39b921907719","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_07.mtn","hash":"d299747aaf27377d552ef1f8b4fce9871a65c37d","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_06.mtn","hash":"3d06ac66c04eb12c64d36551dd85389f0b0ee51f","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_08.mtn","hash":"64a03a904d701039bf81e1296ee79537c2e8800e","modified":1496368832657},{"_id":"public/live2d/assets/haru/motions/tapBody_09.mtn","hash":"4f50c17dcf352995e51a4d462b9ca7a9e9197d5c","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/flickHead_00.mp3","hash":"0b447e7e38eb20f3f7e8ba2a5ea5f521f6e37a26","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/pinchIn_00.mp3","hash":"d143662d2c8cfb1150f719d3d55c75d454535690","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/pinchOut_00.mp3","hash":"6872da79e1b515b2c996eecee4ca150e22aa48c0","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/shake_00.mp3","hash":"28b245865f200b61cb009dfbd3811d9e9b0748fb","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/tapBody_00.mp3","hash":"23c998ca4549b7908aef029d28b6ae22cbfcdc82","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/tapBody_02.mp3","hash":"be111df9ecd006e992f94cb4280c2b66d9cd23ed","modified":1496368832657},{"_id":"public/live2d/assets/haru/sounds/tapBody_01.mp3","hash":"d3d5607dbe394225e2ee858531b7767f567c4e10","modified":1496368832657},{"_id":"public/live2d/assets/haruto/haruto.physics.json","hash":"eb670a63e525187d9fbfdddbdf2e6526a9d5e8ed","modified":1496368832657},{"_id":"public/live2d/assets/haruto/haruto.model.json","hash":"4573b7de0caf8422464d0ffd9f5b10086883c532","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1496368832657},{"_id":"public/live2d/assets/haruto/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1496368832658},{"_id":"public/live2d/assets/haruto/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1496368832658},{"_id":"public/live2d/assets/haruto/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1496368832658},{"_id":"public/live2d/assets/haruto/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1496368832658},{"_id":"public/live2d/assets/haruto/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f01.exp.json","hash":"04dc56f3eea170a3194ac91b10db4761160d8045","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f02.exp.json","hash":"3ddd18c604712ab0bc8120bcb8f853e6846d9c63","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f03.exp.json","hash":"5ed7e40e26a3e05b8133b5d416b082e8514ecfb9","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f04.exp.json","hash":"21b5a0d8eb0967f09b32c51a1402a478561d6bcd","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f05.exp.json","hash":"422719783ac1753f0a4c5bd3c47fee8fe8814018","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/expressions/f06.exp.json","hash":"2707d6179e4e51ff29e870185cfe0f05a47dabdb","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/hibiki.model.json","hash":"1ea1aa06f8a82b8bc45a538ba1b3794ea3f84651","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/hibiki.physics.json","hash":"50d760b13df663b7ef481c2f45793f5388a8272d","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/sounds/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1496368832658},{"_id":"public/live2d/assets/hibiki/motions/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1496368832659},{"_id":"public/live2d/assets/hibiki/sounds/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1496368832659},{"_id":"public/live2d/assets/hibiki/sounds/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1496368832659},{"_id":"public/live2d/assets/hibiki/sounds/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1496368832659},{"_id":"public/live2d/assets/hibiki/sounds/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/hijiki.model.json","hash":"b54cd201b10ea1e12eb0b6aadceaf4739a2d05b5","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/hijiki.pose.json","hash":"1482164cf99fb58c3256d1872b421c593b0f7eb6","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1496368832659},{"_id":"public/live2d/assets/hijiki/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1496368832659},{"_id":"public/live2d/assets/koharu/koharu.model.json","hash":"eed561dd6c4a7bb6c9bdaa2e851b2a0cbe36bbc1","modified":1496368832659},{"_id":"public/live2d/assets/koharu/koharu.physics.json","hash":"eb670a63e525187d9fbfdddbdf2e6526a9d5e8ed","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1496368832659},{"_id":"public/live2d/assets/koharu/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1496368832660},{"_id":"public/live2d/assets/koharu/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1496368832660},{"_id":"public/live2d/assets/koharu/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1496368832660},{"_id":"public/live2d/assets/koharu/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1496368832660},{"_id":"public/live2d/assets/koharu/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1496368832660},{"_id":"public/live2d/assets/miku/miku.model.json","hash":"f779327fafb8e2b8ce27b152b87d5f20cb607461","modified":1496368832660},{"_id":"public/live2d/assets/miku/miku.physics.json","hash":"a9d237b0ceddca175f25f559bc8b772d79922380","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_idle_01.mtn","hash":"5633f73601cf8b0a318e7a7265f71cc782683251","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_01.mtn","hash":"bd0ea5f2f0528b21c4e5632838b69e478b652e88","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_03.mtn","hash":"94ef9d31a78f7f90d3fb213c4353afbdb3462cff","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_04.mtn","hash":"5c440e8f4cd45e73a7c8044ea0e2ea11234f9fd9","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_02.mtn","hash":"2eda9602d626d89285e0c0c5f564383964516cc8","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_06.mtn","hash":"0bfd6ad29e5e171a1ce03a7acb8ffcca9f463902","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_m_05.mtn","hash":"73b9b162c1dbf9a6747364ae47b12cba9da0bbec","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/00_idle.mtn","hash":"3686b7bfdb43f85f4fe1d94ed59379d2c4bee41d","modified":1496368832660},{"_id":"public/live2d/assets/miku/motions/miku_shake_01.mtn","hash":"190875ab6cdeee7ae87c4c296429b848c942dd8a","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/01_happy.mtn","hash":"2020573671b39c81fbd784a8b873ebee019ca501","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/02_angry.mtn","hash":"f75e1f580c64695fbbf8ba3c5f49eafc7208411d","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/03_fear.mtn","hash":"b6cdb8fa48960b2a6e66d78ea992221e8108437b","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/04_surprise.mtn","hash":"4b911af06de9bc6f386aecd623851e5799edaa96","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/05_fun.mtn","hash":"4b956c9c028dce753fafa1859404a136975786d4","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/06_love.mtn","hash":"c9f90cc2e2be55ac9c19cf6a962330dad3833fc1","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/07_bye.mtn","hash":"6a3e90e8efb64cd5b187196625a3d8915efb21c8","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/08_sad.mtn","hash":"63647d9320bf3928d658e1275adbfaeba88748b7","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/10_yeah.mtn","hash":"58c4bda1339f41fa8a7e554509a7a871bad392b8","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/12_stagger.mtn","hash":"3f1a0b25cb1b9fb150f7a9ef37e8c9ba8d4e6ba1","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/11_muscle.mtn","hash":"7d0e3466a996f8704e86913c723ac4b82f14ff47","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/09_yawn.mtn","hash":"e0e29a712b01be59ae8bba2e1a0d850e06260d20","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/13_cry.mtn","hash":"27709b59d2e6cba73d69a67cadb8bf50413206a9","modified":1496368832660},{"_id":"public/live2d/assets/nito/mtn/14_ sigh.mtn","hash":"80c4e4f539253d86a7aa5faae2c5e5a3a7b1adcc","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/15_joy.mtn","hash":"b76a24efc57e4c2cc4abf70c293b2e800029a20d","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/16_menace.mtn","hash":"6edb6b114d53d7f93cff164992db475b0b6f09c3","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/17_yes.mtn","hash":"a023cc93e55b3940f1a8690dcfa7ad1cfa534fad","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/19_walk.mtn","hash":"035516e8cdaa5b3c6e7524daca72294284a81126","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/18_no.mtn","hash":"9a18a2537bf6634da2bafd3a57d236de30c73b4e","modified":1496368832661},{"_id":"public/live2d/assets/nito/mtn/20_sleep.mtn","hash":"914e4670825467e5e8d2f6983bd21c7190e57310","modified":1496368832661},{"_id":"public/live2d/assets/nito/ni-j/ni-j.physics.json","hash":"1182e318d63e986108aab973e30b8993aec89f4e","modified":1496368832661},{"_id":"public/live2d/assets/nito/ni-j.model.json","hash":"e504770ebeaaf65d0922532b0088cb28c69a144a","modified":1496368832661},{"_id":"public/live2d/assets/nito/nico/nico.physics.json","hash":"1254a71c546d04ce74e9ae9d2c7aea828d358ad5","modified":1496368832661},{"_id":"public/live2d/assets/nito/nico.model.json","hash":"79a31b64dfbda8bc0987a2283cbc92b2d3ac53c3","modified":1496368832661},{"_id":"public/live2d/assets/nito/nietzche.model.json","hash":"e5bf3d60602b86e809b089bea280ee02e4332900","modified":1496368832661},{"_id":"public/live2d/assets/nito/nietzsche/nietzsche.physics.json","hash":"d439ccf10ca08d4cf7c46d24505c90d4e83256b3","modified":1496368832661},{"_id":"public/live2d/assets/nito/nipsilon.model.json","hash":"2cdaeaa4478c757da97f94462bba12abae157913","modified":1496368832661},{"_id":"public/live2d/assets/nito/nipsilon/nipsilon.physics.json","hash":"d439ccf10ca08d4cf7c46d24505c90d4e83256b3","modified":1496368832661},{"_id":"public/live2d/assets/nito/nito/nito.physics.json","hash":"01cc407e1a7f985224f8b95fbb256b42838e9d1b","modified":1496368832661},{"_id":"public/live2d/assets/nito/nito.model.json","hash":"05f391e062cc4a730db3713d6bb0f6d4f789f86b","modified":1496368832661},{"_id":"public/live2d/assets/nito/pose.json","hash":"39a147c2dd8176408d8948a4640f1b53c6352658","modified":1496368832661},{"_id":"public/live2d/assets/shizuku/expressions/f02.exp.json","hash":"1fb66641ac47c913c71dc43c486d0a5ed3037ec3","modified":1496368832661},{"_id":"public/live2d/assets/shizuku/expressions/f03.exp.json","hash":"2dd8335fc25a5cc4d8d23dcfebaa516161f17564","modified":1496368832661},{"_id":"public/live2d/assets/shizuku/expressions/f01.exp.json","hash":"0f5aa29a3ba775139cfcff13f156ba098a18f042","modified":1496368832661},{"_id":"public/live2d/assets/shizuku/expressions/f04.exp.json","hash":"1caa37c0cab4cb1ddb9cad32dbd1c0d9e1656dae","modified":1496368832661},{"_id":"public/live2d/assets/shizuku/motions/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1496368832662},{"_id":"public/live2d/assets/shizuku/motions/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/motions/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/shizuku.physics.json","hash":"38f81e175e1c723e46eeafe2560a0ab274f39315","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/shizuku.model.json","hash":"ae3a6075ddb026e8a3fc91b6a1b263b8dfedcbd2","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/shizuku.pose.json","hash":"5824f50fcafe61e004eb083e9ac7f04ce5c72e24","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1496368832663},{"_id":"public/live2d/assets/shizuku/sounds/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1496368832664},{"_id":"public/live2d/assets/shizuku/sounds/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1496368832664},{"_id":"public/live2d/assets/shizuku/sounds/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1496368832664},{"_id":"public/live2d/assets/shizuku/sounds/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1496368832664},{"_id":"public/live2d/assets/shizuku/sounds/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1496368832664},{"_id":"public/live2d/assets/tororo/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1496368832664},{"_id":"public/live2d/assets/tororo/tororo.model.json","hash":"93218050c0d0ac227b9ce9f55df8bc42931c2be1","modified":1496368832664},{"_id":"public/live2d/assets/tororo/tororo.pose.json","hash":"1482164cf99fb58c3256d1872b421c593b0f7eb6","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F01.exp.json","hash":"2e316ed61fa7f4bcf0003c3a4f09d1c19e7146ae","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F04.exp.json","hash":"86815ff2f94ae88f668f50279777b49952cf45bf","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F02.exp.json","hash":"0631d4bb3a8c698dfcebfac9bd3ea79c2614cb7d","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F05.exp.json","hash":"2987c2592a9522088fb5d77ed8308087d35e618e","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F03.exp.json","hash":"e6bf2d7bca228c005d7eba4fde11d42f4bf2d307","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F06.exp.json","hash":"6ba452b5c1b46b0206eaed320ac1c79ccece9e84","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F07.exp.json","hash":"82d8a051d58e6754394f90127eb6986818a859a2","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F08.exp.json","hash":"013a279f6a1f0bbe03459350a5d9247955463612","modified":1496368832664},{"_id":"public/live2d/assets/tsumiki/exp/F09.exp.json","hash":"ac721454787cc89a7e8eea43fff1ae3bc9fb3460","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/exp/F10.exp.json","hash":"217a50580676ae840b9dee9b415242e6f87f57b4","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/P01.mtn","hash":"4b6d266d9fe31e01c4e13ac2049435b5d70b5589","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_01.mtn","hash":"b1b0e2237926a52970703bcfdd5cf6bb6fc39248","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_01_df.mtn","hash":"4b008605c2f61f37fd295d929df8b51e9f1f447e","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_idle_01.mtn","hash":"dd178b1cb3817bd2d7e6f56f25daf3ffacd4afdd","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_02.mtn","hash":"43f73acf0ec68e5ddda2fb212b3bd62b4ec63829","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_04.mtn","hash":"b6395b5acb2136c8265f37483cfe60b4a1bfb66d","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_03.mtn","hash":"bbd6a2cbe87dea113024d9d953bb42864cad31a5","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_05.mtn","hash":"c118b3bcbf03d0cc07c9f6a2a8e8c495f07f4091","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_06.mtn","hash":"2641628ced0c982f214242744da73f1ab048c078","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_07.mtn","hash":"ec5da8fb40ff26dc3e9f306cade5f4bfc2f15642","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_08.mtn","hash":"98768aafeb239e75f788969eb995adbe7a89bc3f","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_09.mtn","hash":"c4f3635225ba606873a7c14cc91bf5a28a2afa95","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_10.mtn","hash":"8e6d0609ae64f8dd4db0e5e85addbc677fac3a79","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_13.mtn","hash":"d20d09dfbdf42d13240c45f9d2fa4474a4541dd8","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_14.mtn","hash":"2480493fffb4fd8135ef1e88c5f717952b7d6542","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_15.mtn","hash":"4fa8d8667c41cd5b3c49cf4bdd8b36cf0a9158b9","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_16.mtn","hash":"03843599008ab2ee23d9d03174924609ad042ce6","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_17.mtn","hash":"6346ebcf76b0780987f552b16c4c62c39732597f","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_18.mtn","hash":"34fbff31238e9b6a541f5f03a00bec5cbcec6649","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_19.mtn","hash":"685fc0130899e903d9c9433ec1c1a987323d6c8c","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_20.mtn","hash":"076ca7be2c81e776794245a3865478b20428e416","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_21.mtn","hash":"bd917f60537e4e9037c85bf356d4c25e75e2807c","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_22.mtn","hash":"0fb02e4734ab8c455e1405dfed9546af583595ae","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_23.mtn","hash":"d5a156e295e575c615b673350c025e3270afee8e","modified":1496368832665},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_24.mtn","hash":"696502793e9917abc495645be784262e3b997bde","modified":1496368832666},{"_id":"public/live2d/assets/tsumiki/tsumiki.model.json","hash":"655791e3a1147813321c8d84a565924fbee1c54a","modified":1496368832666},{"_id":"public/live2d/assets/tsumiki/tsumiki.physics.json","hash":"2ad81c21067b40bbf2f5719a7938f730d97ab82c","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1496368832666},{"_id":"public/live2d/assets/wanko/motions/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1496368832666},{"_id":"public/live2d/assets/wanko/wanko.model.json","hash":"91d239365f42eeebeb058c7ca3b88abe6ae8a273","modified":1496368832666},{"_id":"public/live2d/assets/z16/expressions/F00.exp.json","hash":"8b1e18b83ed8c6a61e6a8d4482c143b5d74fb67d","modified":1496368832666},{"_id":"public/live2d/assets/z16/motions/idle/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1496368832666},{"_id":"public/live2d/assets/z16/z16.256/texture_00.png","hash":"5fb841ef565746943379af64a1f0f2412a003f54","modified":1496368832666},{"_id":"public/live2d/assets/z16/z16.model.json","hash":"263bdedc4040234cdd649171bb86d78529ab1c61","modified":1496368832666},{"_id":"public/live2d/assets/z16/z16.physics.json","hash":"fb952b96ccc67e1d31b9a70b0fe37e6fb06de886","modified":1496368832666},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1496368832977},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1496368832977},{"_id":"public/live2d/assets/Epsilon2.1/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1496368832978},{"_id":"public/live2d/assets/shizuku/sounds/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1496368832979},{"_id":"public/live2d/assets/shizuku/sounds/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1496368832979},{"_id":"public/live2d/assets/shizuku/sounds/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1496368832979},{"_id":"public/live2d/assets/shizuku/sounds/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1496368832979},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_11.mtn","hash":"63b0adf0414ebad9a3bec91417629d983c546975","modified":1496368832979},{"_id":"public/live2d/assets/tsumiki/mtn/tsumiki_m_12.mtn","hash":"b68b20df9b695e0d7ac93a5865097b27c3123f21","modified":1496368832979},{"_id":"public/live2d/assets/wanko/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1496368832979},{"_id":"public/live2d/assets/z16/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1496368832979},{"_id":"public/css/highlight.css","hash":"a3e7a068adcae6ee723e7e26fc2fddeba73f590b","modified":1496368833007},{"_id":"public/js/hux-blog.js","hash":"69c34d4d7f46e62e933104c9bb3f8b34e318d952","modified":1496368833007},{"_id":"public/js/hux-blog.min.js","hash":"f53ca932468d695f612117c915a735b7ed8d1af3","modified":1496368833007},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1496368833007},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1496368833007},{"_id":"public/js/new.js","hash":"80c352351c45157b69d268d967295a06a305925f","modified":1496368833007},{"_id":"public/css/hux-blog.min.css","hash":"9062ad56f0c71966fb9c9a4730780e3a904c4e32","modified":1496368833007},{"_id":"public/css/hux-blog.css","hash":"64c450f6fb583be4815ccc3899df94c0c6973090","modified":1496368833007},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1496368833007},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1496368833007},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1496368833007},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1496368833007},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496368833007},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1496368833007},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1496368833007},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1496368833008},{"_id":"public/live2d/assets/Unitychan/unitychan.moc","hash":"94047b7bb9a99f43ab4dbe5b013a8fb9de854086","modified":1496368833008},{"_id":"public/live2d/assets/hibiki/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1496368833008},{"_id":"public/live2d/assets/hijiki/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1496368833008},{"_id":"public/live2d/assets/miku/miku.moc","hash":"a57e92e12f1fcb21d4d3a9ac34f01badbeff3671","modified":1496368833008},{"_id":"public/live2d/assets/tororo/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1496368833008},{"_id":"public/live2d/assets/z16/z16.512/texture_00.png","hash":"9191806806d73a17227c6101e92d5b0cfa53c42d","modified":1496368833008},{"_id":"public/live2d/script.js","hash":"076d0c289e49b6bb084bbf89808675fac185f237","modified":1496368833008},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1496368833031},{"_id":"public/live2d/assets/haru/haru_01.moc","hash":"d2223b555b3bdbbd955301c4c5bcbe7ebe19bec1","modified":1496368833031},{"_id":"public/live2d/assets/haru/haru_02.moc","hash":"748cf01b45bebb3b217d6363f9d5ff81ab942787","modified":1496368833031},{"_id":"public/live2d/assets/haruto/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1496368833032},{"_id":"public/live2d/assets/koharu/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1496368833032},{"_id":"public/live2d/assets/nito/ni-j/ni-j.moc","hash":"d846e2c4a4db0f003f2eda466f64cf2165e39ad8","modified":1496368833032},{"_id":"public/live2d/assets/nito/nietzsche/nietzsche.moc","hash":"63e70620e9eee593dbb77b26209ad64afa82f571","modified":1496368833032},{"_id":"public/live2d/assets/nito/nipsilon/nipsilon.moc","hash":"77ea4fba30cd6f056d1175654a8c950523cdf37e","modified":1496368833033},{"_id":"public/live2d/assets/nito/nito/nito.moc","hash":"aae6ab7a4687b166b30fb3bbfb1de5e91a5641e4","modified":1496368833033},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1496368833068},{"_id":"public/live2d/assets/tsumiki/moc/tsumiki.moc","hash":"cc023058ae61f70acf7580c4e2352b84eaf1a7b9","modified":1496368833068},{"_id":"public/live2d/assets/nito/nico/nico.moc","hash":"371b0d972aca62a2b67d32398be091d792f0b3cb","modified":1496368833101},{"_id":"public/live2d/assets/haru/haru_01.1024/texture_01.png","hash":"27d6fd073cb100300a81687034acd81c72789083","modified":1496368833126},{"_id":"public/live2d/assets/haru/haru_01.1024/texture_00.png","hash":"c3f64dc7710e5d99cf9209c92fb683821c4923c5","modified":1496368833126},{"_id":"public/live2d/assets/haru/haru_02.1024/texture_00.png","hash":"c3f64dc7710e5d99cf9209c92fb683821c4923c5","modified":1496368833126},{"_id":"public/live2d/assets/haru/haru_02.1024/texture_01.png","hash":"27d6fd073cb100300a81687034acd81c72789083","modified":1496368833127},{"_id":"public/live2d/assets/nito/nico/nico.2048/texture_02.png","hash":"9edc3c446267e9d715159ce75ee7cf944b7e9325","modified":1496368833128},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1496368833166},{"_id":"public/live2d/assets/nito/ni-j/ni-j.2048/texture_00.png","hash":"ab3759dc8bc6560bf590ba0897226381cd312292","modified":1496368833166},{"_id":"public/live2d/assets/nito/nietzsche/nietzsche.2048/texture_00.png","hash":"ccaeccd62d75e7381e155750c8a84ccd96ba1c0b","modified":1496368833167},{"_id":"public/live2d/assets/nito/nipsilon/nipsilon.2048/texture_01.png","hash":"ccaeccd62d75e7381e155750c8a84ccd96ba1c0b","modified":1496368833168},{"_id":"public/live2d/assets/nito/nito/nito.2048/texture_01.png","hash":"ccaeccd62d75e7381e155750c8a84ccd96ba1c0b","modified":1496368833168},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_03.png","hash":"156b0e6f5388f55272f43e694b211a483751a3a3","modified":1496368833169},{"_id":"public/live2d/assets/nito/nico/nico.2048/texture_00.png","hash":"ccaeccd62d75e7381e155750c8a84ccd96ba1c0b","modified":1496368833169},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_00.png","hash":"cb537096969ac242a35e981fc43027eae105b3ae","modified":1496368833192},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_05.png","hash":"14d6bfbe295716621e79734faf0d472413b09e86","modified":1496368833192},{"_id":"public/live2d/assets/z16/z16.1024/texture_00.png","hash":"bb40aa6e52406105b83ee1f944067eefdb86c848","modified":1496368833192},{"_id":"public/live2d/assets/nito/nietzsche/nietzsche.2048/texture_01.png","hash":"3e64fc8b540bdda0beaefe3779db589df33d0433","modified":1496368833226},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_04.png","hash":"bdf894c3999eaf269e6b96dc2e0c00d9e1175807","modified":1496368833265},{"_id":"public/live2d/assets/haru/haru_01.1024/texture_02.png","hash":"2fdf7052a1e3633f584878fbedbf2f10a24f73e0","modified":1496368833265},{"_id":"public/live2d/assets/shizuku/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1496368833266},{"_id":"public/live2d/assets/wanko/wanko.1024/texture_00.png","hash":"6f9d8aa90f23012429457f4b62abfb6e47b1edbb","modified":1496368833267},{"_id":"public/live2d/assets/nito/ni-j/ni-j.2048/texture_01.png","hash":"269b8e3cee69bb57229c0b57284a5ec5cd65bf97","modified":1496368833318},{"_id":"public/live2d/assets/Unitychan/unitychan.2048/texture_00.png","hash":"74fb2a5df49455535cac15009e827427ae5f9106","modified":1496368833355},{"_id":"public/live2d/assets/haru/haru_02.1024/texture_02.png","hash":"7f4998d271571d82c2ed136a8b64c57e0404b386","modified":1496368833355},{"_id":"public/live2d/assets/tororo/tororo.2048/texture_00.png","hash":"130fb20de0580594981e4f8bfeb4cd043647ca05","modified":1496368833357},{"_id":"public/live2d/assets/nito/nico/nico.2048/texture_01.png","hash":"69dac580d376899679e4b999888e9578bc81325e","modified":1496368833369},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_01.png","hash":"459b0f053b3918c336a17d64a7d1190bf712293a","modified":1496368833370},{"_id":"public/live2d/assets/hijiki/hijiki.2048/texture_00.png","hash":"3aa3e88b65afb6b5f3d189ef32065ff5ec432eea","modified":1496368833371},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_04.png","hash":"2aaab44811fd65631a9bc842df34be6a04c0ada8","modified":1496368833376},{"_id":"public/live2d/assets/nito/nito/nito.2048/texture_00.png","hash":"522810a94681a0f9dbd03aab3bbca952918948ae","modified":1496368833377},{"_id":"public/live2d/assets/nito/nipsilon/nipsilon.2048/texture_00.png","hash":"3d0f4bccd738d092a182006af3785b0d8ab0c505","modified":1496368833379},{"_id":"public/live2d/assets/nito/nietzsche/nietzsche.2048/texture_02.png","hash":"9f74d2086ab852f80ad6910eeb65a13c9246945f","modified":1496368833382},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_06.png","hash":"c485f2baf56907547f8451e78f1675e97cd75a94","modified":1496368833389},{"_id":"public/live2d/assets/haruto/haruto.2048/texture_00.png","hash":"c3753c4811490fa40abc9a8c12279040ec1bdcda","modified":1496368833389},{"_id":"public/live2d/assets/shizuku/shizuku.1024/texture_02.png","hash":"971a86c622beb56e562c16d0b5123fcd1177b19a","modified":1496368833402},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.moc","hash":"67d418af2db593b0b6f318e95f49d4370515c8f0","modified":1496368833406},{"_id":"public/live2d/assets/hibiki/hibiki.2048/texture_00.png","hash":"d95312fcb38252705a94c671cfa8f44d13c98efe","modified":1496368833420},{"_id":"public/live2d/assets/koharu/koharu.2048/texture_00.png","hash":"8ab705b3e4d436b01d28b9ba498ca375a5221afc","modified":1496368833420},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_03.png","hash":"aed4d5c46147d4e1904d39d3959de2eb52b47136","modified":1496368833421},{"_id":"public/live2d/assets/tsumiki/moc/tsumiki.2048/texture_01.png","hash":"b75ff5f5932b4dec1c988dc3464516e7fb93e3cf","modified":1496368833422},{"_id":"public/live2d/assets/nito/nipsilon/nipsilon.2048/texture_02.png","hash":"10c8bcb78c7e7200da98791ae004df98891143ba","modified":1496368833437},{"_id":"public/live2d/assets/tsumiki/moc/tsumiki.2048/texture_00.png","hash":"404a74572b2b39017872178a70d8206c89838307","modified":1496368833443},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_05.png","hash":"0ba3033e3efbdb27af5e9640d65709ac9a83e274","modified":1496368833457},{"_id":"public/live2d/assets/Epsilon2.1/Epsilon2.1.2048/texture_00.png","hash":"ac09236abe858981010bcea642e186550869ee3a","modified":1496368833476},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_02.png","hash":"dcaac489104ea85bc617be9a06c9b9c93f7ad470","modified":1496368833481},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_01.png","hash":"8dd72e8db516c485a995535fb63b0397356c1e6a","modified":1496368833485},{"_id":"public/live2d/assets/Gantzert_Felixander/moc/model.2048/texture_00.png","hash":"33adc6993c7b004b6223951be5d2c19722d05050","modified":1496368833502},{"_id":"public/live2d/assets/miku/miku.2048/texture_00.png","hash":"a954112c63ec04779514ac149273e35da66cf3e1","modified":1496368833522}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-05-27T07:31:52.000Z","updated":"2017-05-27T07:31:52.000Z","path":"404.html","title":"","comments":1,"_id":"cj3f7d71i0000s7t77hy2crc7","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，多玩玩看看。\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br>\n<br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2017-05-27T07:31:52.000Z","path":"about/index.html","_id":"cj3f7d73w0002s7t7z1ms6usz","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，多玩玩看看。</p>\n</blockquote>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"external\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-05-27T07:31:52.000Z","updated":"2017-05-27T07:31:52.000Z","path":"archives/index.html","comments":1,"_id":"cj3f7d7400004s7t7w8o815ns","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"news","title":"News","description":"Hey, this is Kaijun.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n# News","source":"news/index.md","raw":"---\nlayout: \"news\"\ntitle: \"News\"\ndescription: \"Hey, this is Kaijun.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n# News","date":"2017-05-27T07:46:05.000Z","updated":"2017-05-27T07:46:05.000Z","path":"news/index.html","_id":"cj3f7d74d0007s7t7vy57vkkp","content":"<h1 id=\"News\"><a href=\"#News\" class=\"headerlink\" title=\"News\"></a>News</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"News\"><a href=\"#News\" class=\"headerlink\" title=\"News\"></a>News</h1>"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-05-27T07:31:52.000Z","updated":"2017-05-27T07:31:52.000Z","path":"tags/index.html","comments":1,"_id":"cj3f7d74k0009s7t7676s2jvt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Partial Scroll","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"webpack-bg.png","header-mask":0.3,"catalog":true,"_content":"\n### 局部滚到\n\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<style type=\"text/css\">\n\t.page {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\n\t\tbackground: #F0F8FF;\n\t}\n\n\t.header {\n\t    position: absolute;\n\t    top: 0;\n\t    right: 0;\n\t    left: 0;\n\t    background: #2A3BC6;\n\t    height: 140px;\n\t    z-index: 2;\n\t}\n\n\t.side {\n\t\tposition: absolute;\n\t\twidth: 200px;\n\t\ttop: 140px;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\toverflow: auto;\n\n\t\tbackground: #54E5AB;\n\t}\n\n\t.content {\n\t\tposition: absolute;\n\t\toverflow: auto;\n\t\ttop: 140px;\n\t\tleft: 200px;\n\t\tright: 0;\n\t\tbottom: 0;\n\t}\n\n</style>\n<body>\n\t<div class='page'>\n\t\t<div class='header'></div>\n\t\t<div class='side'></div>\n\t\t<div class='content'></div>\n\t</div>\n</body>\n</html>\n```\n","source":"_posts/2015-12-20-partial-scroll.markdown","raw":"---\nlayout:     post\ntitle:      \"Partial Scroll\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"webpack-bg.png\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - HTML\n---\n\n### 局部滚到\n\n```html\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html lang=\"en\">\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n\t<title>Document</title>\n</head>\n<style type=\"text/css\">\n\t.page {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\n\t\tbackground: #F0F8FF;\n\t}\n\n\t.header {\n\t    position: absolute;\n\t    top: 0;\n\t    right: 0;\n\t    left: 0;\n\t    background: #2A3BC6;\n\t    height: 140px;\n\t    z-index: 2;\n\t}\n\n\t.side {\n\t\tposition: absolute;\n\t\twidth: 200px;\n\t\ttop: 140px;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\toverflow: auto;\n\n\t\tbackground: #54E5AB;\n\t}\n\n\t.content {\n\t\tposition: absolute;\n\t\toverflow: auto;\n\t\ttop: 140px;\n\t\tleft: 200px;\n\t\tright: 0;\n\t\tbottom: 0;\n\t}\n\n</style>\n<body>\n\t<div class='page'>\n\t\t<div class='header'></div>\n\t\t<div class='side'></div>\n\t\t<div class='content'></div>\n\t</div>\n</body>\n</html>\n```\n","slug":"2015-12-20-partial-scroll","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d73q0001s7t7r7san6zh","content":"<h3 id=\"局部滚到\"><a href=\"#局部滚到\" class=\"headerlink\" title=\"局部滚到\"></a>局部滚到</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t.page &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\ttop: 0;</div><div class=\"line\">\t\tright: 0;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t\tleft: 0;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground: #F0F8FF;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.header &#123;</div><div class=\"line\">\t    position: absolute;</div><div class=\"line\">\t    top: 0;</div><div class=\"line\">\t    right: 0;</div><div class=\"line\">\t    left: 0;</div><div class=\"line\">\t    background: #2A3BC6;</div><div class=\"line\">\t    height: 140px;</div><div class=\"line\">\t    z-index: 2;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.side &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\twidth: 200px;</div><div class=\"line\">\t\ttop: 140px;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t\tleft: 0;</div><div class=\"line\">\t\toverflow: auto;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground: #54E5AB;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.content &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\toverflow: auto;</div><div class=\"line\">\t\ttop: 140px;</div><div class=\"line\">\t\tleft: 200px;</div><div class=\"line\">\t\tright: 0;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'page'</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'header'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'side'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'content'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"局部滚到\"><a href=\"#局部滚到\" class=\"headerlink\" title=\"局部滚到\"></a>局部滚到</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\t.page &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\ttop: 0;</div><div class=\"line\">\t\tright: 0;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t\tleft: 0;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground: #F0F8FF;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.header &#123;</div><div class=\"line\">\t    position: absolute;</div><div class=\"line\">\t    top: 0;</div><div class=\"line\">\t    right: 0;</div><div class=\"line\">\t    left: 0;</div><div class=\"line\">\t    background: #2A3BC6;</div><div class=\"line\">\t    height: 140px;</div><div class=\"line\">\t    z-index: 2;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.side &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\twidth: 200px;</div><div class=\"line\">\t\ttop: 140px;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t\tleft: 0;</div><div class=\"line\">\t\toverflow: auto;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground: #54E5AB;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.content &#123;</div><div class=\"line\">\t\tposition: absolute;</div><div class=\"line\">\t\toverflow: auto;</div><div class=\"line\">\t\ttop: 140px;</div><div class=\"line\">\t\tleft: 200px;</div><div class=\"line\">\t\tright: 0;</div><div class=\"line\">\t\tbottom: 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'page'</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'header'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'side'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'content'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Reducer React App's Size In Production","subtitle":"webpack","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"webpack-bg.png","header-mask":0.3,"catalog":true,"_content":"\n[App](https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a#.qaey3854r){:target=\"_block\"}\n\nIf you are building a React + Redux App that has Webpack, then you might have noticed that the size of the final bundle.js (the dev version) for a simple app itself could be 1MB- 2MB!\nFor example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!\n\n\nFor example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!\n![](http://o7d3ayvg2.bkt.clouddn.com/react-redux-webpack-node_modules.png)\n\nIt could be scary😱 but Webpack and Node.js has all the tools you need to reduce the size.\nI could reduce the size from 1.5MB to just 90KB by simply doing the following two things:\n\n1: Add the following Webpack plugins (source code)\n\n```javascript\nplugins: [\n    new webpack.DefinePlugin({ // <-- key to reducing React's size\n        // This can reduce react lib size and disable some dev feactures like props validation\n        'process.env': {\n            'NODE_ENV': JSON.stringify('production')\n        }\n    }),\n    new webpack.optimize.DedupePlugin(), //dedupe similar code\n    new webpack.optimize.UglifyJsPlugin(), //minify everything\n    new webpack.optimize.AggressiveMergingPlugin()//Merge chunks\n  ],\n```\n\n> DefinePlugin\nThe DefinePlugin allows you to create global constants which can be configured at compile time. This can be very useful for allowing different behaviour between development builds and release builds. For example, you might use a global constant to determine whether logging takes place; perhaps you perform logging in your development build but not in the release build. That’s the sort of scenario the DefinePlugin facilitates.\n\n> DedupePlugin\nSearch for equal or similar files and deduplicate them in the output. This comes with some overhead for the entry chunk, but can reduce file size effectively.\n\nThis doesn’t change the module semantics at all. Don’t expect to solve problems with multiple module instance. They won’t be one instance after deduplication.\n\n`Note: Don’t use it in watch mode. Only for production builds.`\n\n> UglifyJsPlugin\nMinimize all JavaScript output of chunks. Loaders are switched into minimizing mode.\nYou can pass an object containing [UglifyJS options](https://github.com/mishoo/UglifyJS2#usage){:target=\"_block\"}.\n\n> AggressiveMergingPlugin\nA plugin for a more aggressive chunk merging strategy. Even similar chunks are merged if the total size is reduced enough. As an option modules that are not common in these chunks can be moved up the chunk tree to the parents.\n","source":"_posts/2015-12-06-reducer-react-app-size.markdown","raw":"---\nlayout:     post\ntitle:      \"Reducer React App's Size In Production\"\nsubtitle:   \"webpack\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"webpack-bg.png\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - WebPack\n---\n\n[App](https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a#.qaey3854r){:target=\"_block\"}\n\nIf you are building a React + Redux App that has Webpack, then you might have noticed that the size of the final bundle.js (the dev version) for a simple app itself could be 1MB- 2MB!\nFor example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!\n\n\nFor example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!\n![](http://o7d3ayvg2.bkt.clouddn.com/react-redux-webpack-node_modules.png)\n\nIt could be scary😱 but Webpack and Node.js has all the tools you need to reduce the size.\nI could reduce the size from 1.5MB to just 90KB by simply doing the following two things:\n\n1: Add the following Webpack plugins (source code)\n\n```javascript\nplugins: [\n    new webpack.DefinePlugin({ // <-- key to reducing React's size\n        // This can reduce react lib size and disable some dev feactures like props validation\n        'process.env': {\n            'NODE_ENV': JSON.stringify('production')\n        }\n    }),\n    new webpack.optimize.DedupePlugin(), //dedupe similar code\n    new webpack.optimize.UglifyJsPlugin(), //minify everything\n    new webpack.optimize.AggressiveMergingPlugin()//Merge chunks\n  ],\n```\n\n> DefinePlugin\nThe DefinePlugin allows you to create global constants which can be configured at compile time. This can be very useful for allowing different behaviour between development builds and release builds. For example, you might use a global constant to determine whether logging takes place; perhaps you perform logging in your development build but not in the release build. That’s the sort of scenario the DefinePlugin facilitates.\n\n> DedupePlugin\nSearch for equal or similar files and deduplicate them in the output. This comes with some overhead for the entry chunk, but can reduce file size effectively.\n\nThis doesn’t change the module semantics at all. Don’t expect to solve problems with multiple module instance. They won’t be one instance after deduplication.\n\n`Note: Don’t use it in watch mode. Only for production builds.`\n\n> UglifyJsPlugin\nMinimize all JavaScript output of chunks. Loaders are switched into minimizing mode.\nYou can pass an object containing [UglifyJS options](https://github.com/mishoo/UglifyJS2#usage){:target=\"_block\"}.\n\n> AggressiveMergingPlugin\nA plugin for a more aggressive chunk merging strategy. Even similar chunks are merged if the total size is reduced enough. As an option modules that are not common in these chunks can be moved up the chunk tree to the parents.\n","slug":"2015-12-06-reducer-react-app-size","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d73x0003s7t7nukfpf5e","content":"<p><a href=\"https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a#.qaey3854r\" target=\"_blank\" rel=\"external\">App</a>{:target=”_block”}</p>\n<p>If you are building a React + Redux App that has Webpack, then you might have noticed that the size of the final bundle.js (the dev version) for a simple app itself could be 1MB- 2MB!<br>For example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!</p>\n<p>For example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!<br><img src=\"http://o7d3ayvg2.bkt.clouddn.com/react-redux-webpack-node_modules.png\" alt=\"\"></p>\n<p>It could be scary😱 but Webpack and Node.js has all the tools you need to reduce the size.<br>I could reduce the size from 1.5MB to just 90KB by simply doing the following two things:</p>\n<p>1: Add the following Webpack plugins (source code)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123; <span class=\"comment\">// &lt;-- key to reducing React's size</span></div><div class=\"line\">        <span class=\"comment\">// This can reduce react lib size and disable some dev feactures like props validation</span></div><div class=\"line\">        <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.DedupePlugin(), <span class=\"comment\">//dedupe similar code</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(), <span class=\"comment\">//minify everything</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()<span class=\"comment\">//Merge chunks</span></div><div class=\"line\">  ],</div></pre></td></tr></table></figure>\n<blockquote>\n<p>DefinePlugin<br>The DefinePlugin allows you to create global constants which can be configured at compile time. This can be very useful for allowing different behaviour between development builds and release builds. For example, you might use a global constant to determine whether logging takes place; perhaps you perform logging in your development build but not in the release build. That’s the sort of scenario the DefinePlugin facilitates.</p>\n<p>DedupePlugin<br>Search for equal or similar files and deduplicate them in the output. This comes with some overhead for the entry chunk, but can reduce file size effectively.</p>\n</blockquote>\n<p>This doesn’t change the module semantics at all. Don’t expect to solve problems with multiple module instance. They won’t be one instance after deduplication.</p>\n<p><code>Note: Don’t use it in watch mode. Only for production builds.</code></p>\n<blockquote>\n<p>UglifyJsPlugin<br>Minimize all JavaScript output of chunks. Loaders are switched into minimizing mode.<br>You can pass an object containing <a href=\"https://github.com/mishoo/UglifyJS2#usage\" target=\"_blank\" rel=\"external\">UglifyJS options</a>{:target=”_block”}.</p>\n<p>AggressiveMergingPlugin<br>A plugin for a more aggressive chunk merging strategy. Even similar chunks are merged if the total size is reduced enough. As an option modules that are not common in these chunks can be moved up the chunk tree to the parents.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://medium.com/@rajaraodv/two-quick-ways-to-reduce-react-apps-size-in-production-82226605771a#.qaey3854r\" target=\"_blank\" rel=\"external\">App</a>{:target=”_block”}</p>\n<p>If you are building a React + Redux App that has Webpack, then you might have noticed that the size of the final bundle.js (the dev version) for a simple app itself could be 1MB- 2MB!<br>For example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!</p>\n<p>For example: Below is a picture from Webpack stats analyzer for the simple react-redux-blog (live). It shows that total size is 1.5MB and 90% (1.2MB) is just libraries in node_modules!<br><img src=\"http://o7d3ayvg2.bkt.clouddn.com/react-redux-webpack-node_modules.png\" alt=\"\"></p>\n<p>It could be scary😱 but Webpack and Node.js has all the tools you need to reduce the size.<br>I could reduce the size from 1.5MB to just 90KB by simply doing the following two things:</p>\n<p>1: Add the following Webpack plugins (source code)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123; <span class=\"comment\">// &lt;-- key to reducing React's size</span></div><div class=\"line\">        <span class=\"comment\">// This can reduce react lib size and disable some dev feactures like props validation</span></div><div class=\"line\">        <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.DedupePlugin(), <span class=\"comment\">//dedupe similar code</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(), <span class=\"comment\">//minify everything</span></div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.AggressiveMergingPlugin()<span class=\"comment\">//Merge chunks</span></div><div class=\"line\">  ],</div></pre></td></tr></table></figure>\n<blockquote>\n<p>DefinePlugin<br>The DefinePlugin allows you to create global constants which can be configured at compile time. This can be very useful for allowing different behaviour between development builds and release builds. For example, you might use a global constant to determine whether logging takes place; perhaps you perform logging in your development build but not in the release build. That’s the sort of scenario the DefinePlugin facilitates.</p>\n<p>DedupePlugin<br>Search for equal or similar files and deduplicate them in the output. This comes with some overhead for the entry chunk, but can reduce file size effectively.</p>\n</blockquote>\n<p>This doesn’t change the module semantics at all. Don’t expect to solve problems with multiple module instance. They won’t be one instance after deduplication.</p>\n<p><code>Note: Don’t use it in watch mode. Only for production builds.</code></p>\n<blockquote>\n<p>UglifyJsPlugin<br>Minimize all JavaScript output of chunks. Loaders are switched into minimizing mode.<br>You can pass an object containing <a href=\"https://github.com/mishoo/UglifyJS2#usage\" target=\"_blank\" rel=\"external\">UglifyJS options</a>{:target=”_block”}.</p>\n<p>AggressiveMergingPlugin<br>A plugin for a more aggressive chunk merging strategy. Even similar chunks are merged if the total size is reduced enough. As an option modules that are not common in these chunks can be moved up the chunk tree to the parents.</p>\n</blockquote>\n"},{"layout":"post","title":"React Server-Site Render","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"webpack-bg.png","header-mask":0.3,"catalog":true,"_content":"\n### react-router\n\n`react-router` 通过声明式的方式匹配不同的路由决定在页面上展示不同的组件。\n","source":"_posts/2015-12-07-react-server-render.markdown","raw":"---\nlayout:     post\ntitle:      \"React Server-Site Render\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"webpack-bg.png\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - React\n---\n\n### react-router\n\n`react-router` 通过声明式的方式匹配不同的路由决定在页面上展示不同的组件。\n","slug":"2015-12-07-react-server-render","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74a0006s7t7trmwnnhy","content":"<h3 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h3><p><code>react-router</code> 通过声明式的方式匹配不同的路由决定在页面上展示不同的组件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h3><p><code>react-router</code> 通过声明式的方式匹配不同的路由决定在页面上展示不同的组件。</p>\n"},{"layout":"post","title":"魔兽老了还是我们长大了","subtitle":"感动一代人的记忆","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"post-bg-wow.jpg","header-mask":0.3,"catalog":true,"_content":"\n### 首先是一段MV，　让我们重温一下那个年代。\n\n[![魔兽老了还是我们已经长大了](http://o7d3ayvg2.bkt.clouddn.com/post-wow-old-or-our-old-video.jpg)](http://o7d3ayvg2.bkt.clouddn.com/2626347-1.mp4 \"魔兽老了还是我们已经长大了\"){:target=\"_blank\"}\n\n##　我的魔兽\n\n> 6月8号我们电影院见。\n","source":"_posts/2016-05-19-wow-old-or-our-old.markdown","raw":"---\nlayout:     post\ntitle:      \"魔兽老了还是我们长大了\"\nsubtitle:   \"感动一代人的记忆\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"post-bg-wow.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - 回忆\n---\n\n### 首先是一段MV，　让我们重温一下那个年代。\n\n[![魔兽老了还是我们已经长大了](http://o7d3ayvg2.bkt.clouddn.com/post-wow-old-or-our-old-video.jpg)](http://o7d3ayvg2.bkt.clouddn.com/2626347-1.mp4 \"魔兽老了还是我们已经长大了\"){:target=\"_blank\"}\n\n##　我的魔兽\n\n> 6月8号我们电影院见。\n","slug":"2016-05-19-wow-old-or-our-old","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74i0008s7t7zm9lpccm","content":"<h3 id=\"首先是一段MV，-让我们重温一下那个年代。\"><a href=\"#首先是一段MV，-让我们重温一下那个年代。\" class=\"headerlink\" title=\"首先是一段MV，　让我们重温一下那个年代。\"></a>首先是一段MV，　让我们重温一下那个年代。</h3><p><a href=\"http://o7d3ayvg2.bkt.clouddn.com/2626347-1.mp4\" title=\"魔兽老了还是我们已经长大了\" target=\"_blank\" rel=\"external\"><img src=\"http://o7d3ayvg2.bkt.clouddn.com/post-wow-old-or-our-old-video.jpg\" alt=\"魔兽老了还是我们已经长大了\"></a>{:target=”_blank”}</p>\n<p>##　我的魔兽</p>\n<blockquote>\n<p>6月8号我们电影院见。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"首先是一段MV，-让我们重温一下那个年代。\"><a href=\"#首先是一段MV，-让我们重温一下那个年代。\" class=\"headerlink\" title=\"首先是一段MV，　让我们重温一下那个年代。\"></a>首先是一段MV，　让我们重温一下那个年代。</h3><p><a href=\"http://o7d3ayvg2.bkt.clouddn.com/2626347-1.mp4\" title=\"魔兽老了还是我们已经长大了\" target=\"_blank\" rel=\"external\"><img src=\"http://o7d3ayvg2.bkt.clouddn.com/post-wow-old-or-our-old-video.jpg\" alt=\"魔兽老了还是我们已经长大了\"></a>{:target=”_blank”}</p>\n<p>##　我的魔兽</p>\n<blockquote>\n<p>6月8号我们电影院见。</p>\n</blockquote>\n"},{"layout":"post","title":"Flex 布局","subtitle":"弹性布局","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"post-bg-e2e-ux.jpg","header-mask":0.3,"catalog":true,"_content":"\n# Flex 布局\n\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为Flex布局.\n\n``` css\n.box {\n    display: flex;\n    display: -webkit-flex;\n}\n\n.box {\n    display: inline-flex;\n    display: -webkit-inline-flex;\n}\n```\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png)\n\n> 容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。\n> 主轴的开始位置（`与边框的交叉点`）叫做`main start`，结束位置叫做m`ain end`；\n> 交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n> 项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n# 容器\n\n## flex-direction\n\n项目的排列方向\n\n``` css\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n\n* row 垂直向上 (`default`)\n* row-reverse 垂直向下\n* column 水平向右\n* column-reverse 水平向左\n\n\n## flex-warp\n如果一条轴线排不下，如何换行。\n\n```css\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png)\n\n* nowrap 不换行 (`default`)\n* wrap 换行 第一行在上\n* wrap-reverse 换行 第一行在下\n\n\n## flex-flow\n\nflex-direction + flex-wrap\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n\n## justify-content\n\n项目在主轴上的对齐方式。\n\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around\n}\n```\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n* felx-start 左对齐\n* flex-end 右对齐\n* center 居中\n* space-between 两端对齐，项目之间的间隔都相等\n* space-around 项目两侧的间隔相等\n\n## align-items\n\n项目在交叉轴上如何对齐\n\n```css\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\nflex-start 交叉轴的起点对齐\nflex-end 交叉轴的终点对齐\ncenter 交叉轴的中点对齐\nbaseline 项目的第一行文字的基线对齐\nstretch 如果项目未设置高度或设为auto，将占满整个容器的高度 (`default`)\n\n## align-content\n\n当有多跟轴线的时候项目的对齐方式\n\n```css\n.box {\n    align-content: flex-start | flex-end | center | space-around | space-between | stretch\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n\n* flex-start 与交叉轴的起点对齐\n* flex-end 与交叉轴的终点对齐\n* center 与交叉轴的中点对齐\n* space-between 与交叉轴两端对齐，轴线之间的间隔平均分布\n* space-around 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍\n* stretch 轴线占满整个交叉轴(`defalut`)\n\n\n# 项目的属性\n\n## order\n\n定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n\n## flex-grow\n\n定义项目的放大比例，默认为0，即存在剩余空间也不放大。\n\n```css\n.item {\n    flex-grow: <number>  // default 0\n}\n```\n\n\n## flex-shrink\n\n定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n    flex-shrink: <number> // default 1\n}\n```\n\n> 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其\n> 项目都为1，则空间不足时，前者不缩小。\n> 负值对该属性无效。\n\n\n## flex-basis\n\n定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n## flex\n\nflex: flex-grow flex-shrik fles-basis\nflex: auto (1 1 auto)\nflex: none (0 0 auto)\n\n## align-self\n\n允许单个项目有与其他项目不同的对齐方式。 可覆盖align-item。\n\n来个栗子:\n\n``` css\n    .container1 {\n        display: flex;\n        background-color: yellow;\n        width: 500px;\n        height: 500px;\n        flex-flow: row wrap;\n        justify-content: flex-start;\n        align-content: center;\n    }\n\n    .sub1 {\n        background-color: red;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n        align-self: flex-end;\n    }\n\n    .sub2 {\n        background-color: green;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n    }\n\n    .sub3 {\n        background-color: black;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n    }\n```\n\n```html\n    <div class='container1'>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n    </div>\n```\n","source":"_posts/2016-05-19-flex-layout.markdown","raw":"---\nlayout:     post\ntitle:      \"Flex 布局\"\nsubtitle:   \"弹性布局\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"post-bg-e2e-ux.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - CSS\n---\n\n# Flex 布局\n\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为Flex布局.\n\n``` css\n.box {\n    display: flex;\n    display: -webkit-flex;\n}\n\n.box {\n    display: inline-flex;\n    display: -webkit-inline-flex;\n}\n```\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png)\n\n> 容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。\n> 主轴的开始位置（`与边框的交叉点`）叫做`main start`，结束位置叫做m`ain end`；\n> 交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n> 项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n# 容器\n\n## flex-direction\n\n项目的排列方向\n\n``` css\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n\n* row 垂直向上 (`default`)\n* row-reverse 垂直向下\n* column 水平向右\n* column-reverse 水平向左\n\n\n## flex-warp\n如果一条轴线排不下，如何换行。\n\n```css\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png)\n\n* nowrap 不换行 (`default`)\n* wrap 换行 第一行在上\n* wrap-reverse 换行 第一行在下\n\n\n## flex-flow\n\nflex-direction + flex-wrap\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n\n## justify-content\n\n项目在主轴上的对齐方式。\n\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around\n}\n```\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n* felx-start 左对齐\n* flex-end 右对齐\n* center 居中\n* space-between 两端对齐，项目之间的间隔都相等\n* space-around 项目两侧的间隔相等\n\n## align-items\n\n项目在交叉轴上如何对齐\n\n```css\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\nflex-start 交叉轴的起点对齐\nflex-end 交叉轴的终点对齐\ncenter 交叉轴的中点对齐\nbaseline 项目的第一行文字的基线对齐\nstretch 如果项目未设置高度或设为auto，将占满整个容器的高度 (`default`)\n\n## align-content\n\n当有多跟轴线的时候项目的对齐方式\n\n```css\n.box {\n    align-content: flex-start | flex-end | center | space-around | space-between | stretch\n}\n```\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n\n* flex-start 与交叉轴的起点对齐\n* flex-end 与交叉轴的终点对齐\n* center 与交叉轴的中点对齐\n* space-between 与交叉轴两端对齐，轴线之间的间隔平均分布\n* space-around 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍\n* stretch 轴线占满整个交叉轴(`defalut`)\n\n\n# 项目的属性\n\n## order\n\n定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n\n## flex-grow\n\n定义项目的放大比例，默认为0，即存在剩余空间也不放大。\n\n```css\n.item {\n    flex-grow: <number>  // default 0\n}\n```\n\n\n## flex-shrink\n\n定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n```css\n.item {\n    flex-shrink: <number> // default 1\n}\n```\n\n> 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其\n> 项目都为1，则空间不足时，前者不缩小。\n> 负值对该属性无效。\n\n\n## flex-basis\n\n定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n```css\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n## flex\n\nflex: flex-grow flex-shrik fles-basis\nflex: auto (1 1 auto)\nflex: none (0 0 auto)\n\n## align-self\n\n允许单个项目有与其他项目不同的对齐方式。 可覆盖align-item。\n\n来个栗子:\n\n``` css\n    .container1 {\n        display: flex;\n        background-color: yellow;\n        width: 500px;\n        height: 500px;\n        flex-flow: row wrap;\n        justify-content: flex-start;\n        align-content: center;\n    }\n\n    .sub1 {\n        background-color: red;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n        align-self: flex-end;\n    }\n\n    .sub2 {\n        background-color: green;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n    }\n\n    .sub3 {\n        background-color: black;\n        margin: 10px;\n        width: 40px;\n        height: 40px;\n        flex-shrink: 0;\n    }\n```\n\n```html\n    <div class='container1'>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n        <div class='sub2'></div>\n        <div class='sub3'></div>\n        <div class='sub1'></div>\n    </div>\n```\n","slug":"2016-05-19-flex-layout","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74l000as7t7b2y12z2s","content":"<h1 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h1><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-flex;</div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-inline-flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"\"></p>\n<blockquote>\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。<br>主轴的开始位置（<code>与边框的交叉点</code>）叫做<code>main start</code>，结束位置叫做m<code>ain end</code>；<br>交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n</blockquote>\n<h1 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h1><h2 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h2><p>项目的排列方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"\"></p>\n<ul>\n<li>row 垂直向上 (<code>default</code>)</li>\n<li>row-reverse 垂直向下</li>\n<li>column 水平向右</li>\n<li>column-reverse 水平向左</li>\n</ul>\n<h2 id=\"flex-warp\"><a href=\"#flex-warp\" class=\"headerlink\" title=\"flex-warp\"></a>flex-warp</h2><p>如果一条轴线排不下，如何换行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"\"></p>\n<ul>\n<li>nowrap 不换行 (<code>default</code>)</li>\n<li>wrap 换行 第一行在上</li>\n<li>wrap-reverse 换行 第一行在下</li>\n</ul>\n<h2 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h2><p>flex-direction + flex-wrap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h2><p>项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<ul>\n<li>felx-start 左对齐</li>\n<li>flex-end 右对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，项目之间的间隔都相等</li>\n<li>space-around 项目两侧的间隔相等</li>\n</ul>\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><p>项目在交叉轴上如何对齐</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<p>flex-start 交叉轴的起点对齐<br>flex-end 交叉轴的终点对齐<br>center 交叉轴的中点对齐<br>baseline 项目的第一行文字的基线对齐<br>stretch 如果项目未设置高度或设为auto，将占满整个容器的高度 (<code>default</code>)</p>\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><p>当有多跟轴线的时候项目的对齐方式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-around | space-between | stretch</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"\"></p>\n<ul>\n<li>flex-start 与交叉轴的起点对齐</li>\n<li>flex-end 与交叉轴的终点对齐</li>\n<li>center 与交叉轴的中点对齐</li>\n<li>space-between 与交叉轴两端对齐，轴线之间的间隔平均分布</li>\n<li>space-around 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>\n<li>stretch 轴线占满整个交叉轴(<code>defalut</code>)</li>\n</ul>\n<h1 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h1><h2 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h2><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h2><p>定义项目的放大比例，默认为0，即存在剩余空间也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">flex-grow</span>: &lt;number&gt;  // default <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h2><p>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: &lt;number&gt; // default <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其<br>项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n</blockquote>\n<h2 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h2><p>定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex: flex-grow flex-shrik fles-basis<br>flex: auto (1 1 auto)<br>flex: none (0 0 auto)</p>\n<h2 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h2><p>允许单个项目有与其他项目不同的对齐方式。 可覆盖align-item。</p>\n<p>来个栗子:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-flow</span>: row wrap;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</div><div class=\"line\">    <span class=\"attribute\">align-content</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">align-self</span>: flex-end;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: black;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'container1'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h1><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-flex;</div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-inline-flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"\"></p>\n<blockquote>\n<p>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。<br>主轴的开始位置（<code>与边框的交叉点</code>）叫做<code>main start</code>，结束位置叫做m<code>ain end</code>；<br>交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n</blockquote>\n<h1 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h1><h2 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h2><p>项目的排列方向</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"\"></p>\n<ul>\n<li>row 垂直向上 (<code>default</code>)</li>\n<li>row-reverse 垂直向下</li>\n<li>column 水平向右</li>\n<li>column-reverse 水平向左</li>\n</ul>\n<h2 id=\"flex-warp\"><a href=\"#flex-warp\" class=\"headerlink\" title=\"flex-warp\"></a>flex-warp</h2><p>如果一条轴线排不下，如何换行。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"\"></p>\n<ul>\n<li>nowrap 不换行 (<code>default</code>)</li>\n<li>wrap 换行 第一行在上</li>\n<li>wrap-reverse 换行 第一行在下</li>\n</ul>\n<h2 id=\"flex-flow\"><a href=\"#flex-flow\" class=\"headerlink\" title=\"flex-flow\"></a>flex-flow</h2><p>flex-direction + flex-wrap</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"justify-content\"><a href=\"#justify-content\" class=\"headerlink\" title=\"justify-content\"></a>justify-content</h2><p>项目在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<ul>\n<li>felx-start 左对齐</li>\n<li>flex-end 右对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，项目之间的间隔都相等</li>\n<li>space-around 项目两侧的间隔相等</li>\n</ul>\n<h2 id=\"align-items\"><a href=\"#align-items\" class=\"headerlink\" title=\"align-items\"></a>align-items</h2><p>项目在交叉轴上如何对齐</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<p>flex-start 交叉轴的起点对齐<br>flex-end 交叉轴的终点对齐<br>center 交叉轴的中点对齐<br>baseline 项目的第一行文字的基线对齐<br>stretch 如果项目未设置高度或设为auto，将占满整个容器的高度 (<code>default</code>)</p>\n<h2 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h2><p>当有多跟轴线的时候项目的对齐方式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-around | space-between | stretch</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"\"></p>\n<ul>\n<li>flex-start 与交叉轴的起点对齐</li>\n<li>flex-end 与交叉轴的终点对齐</li>\n<li>center 与交叉轴的中点对齐</li>\n<li>space-between 与交叉轴两端对齐，轴线之间的间隔平均分布</li>\n<li>space-around 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>\n<li>stretch 轴线占满整个交叉轴(<code>defalut</code>)</li>\n</ul>\n<h1 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h1><h2 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h2><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h2><p>定义项目的放大比例，默认为0，即存在剩余空间也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">flex-grow</span>: &lt;number&gt;  // default <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h2><p>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: &lt;number&gt; // default <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其<br>项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n</blockquote>\n<h2 id=\"flex-basis\"><a href=\"#flex-basis\" class=\"headerlink\" title=\"flex-basis\"></a>flex-basis</h2><p>定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex: flex-grow flex-shrik fles-basis<br>flex: auto (1 1 auto)<br>flex: none (0 0 auto)</p>\n<h2 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h2><p>允许单个项目有与其他项目不同的对齐方式。 可覆盖align-item。</p>\n<p>来个栗子:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-flow</span>: row wrap;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start;</div><div class=\"line\">    <span class=\"attribute\">align-content</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">align-self</span>: flex-end;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.sub3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: black;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'container1'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub2'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub3'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'sub1'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"前端Github收集","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"http://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously\n\n[慢慢整理](https://segmentfault.com/a/1190000003510001?utm_source=Weibo&utm_medium=shareLink&utm_campaign=socialShare)\n\n# HTML/CSS\n\n* [html5-boilerplate](https://github.com/h5bp/html5-boilerplate){:target=\"_blank\"}\n* [html5demos](https://github.com/remy/html5demos){:target=\"_blank\"}\n* [web项目启航包](https://github.com/google/web-starter-kit){:target=\"_blank\"}\n* [CSS术语表](https://github.com/yisibl/css-vocabulary){:target=\"_blank\"}\n* [Respond（Media Query polyfill）](https://github.com/scottjehl/Respond){:target=\"_blank\"}\n* [Modernizr](https://github.com/Modernizr/Modernizr){:target=\"_blank\"}\n* [normalize.css](https://github.com/necolas/normalize.css){:target=\"_blank\"}\n* [bootstrap](https://github.com/twbs/bootstrap){:target=\"_blank\"}\n* [Semantic-UI](https://github.com/Semantic-Org/Semantic-UI){:target=\"_blank\"}\n* [amazeui](https://github.com/amazeui/amazeui){:target=\"_blank\"}\n* [masonry 栅格布局库](https://github.com/desandro/masonry){:target=\"_blank\"}\n* [lost 栅格布局库](https://github.com/peterramsing/lost){:target=\"_blank\"}\n* [bootmetro](https://github.com/aozora/bootmetro){:target=\"_blank\"}\n* [CSS模拟各种设备](https://github.com/marvelapp/devices.css){:target=\"_blank\"}\n* [CSS spinners](https://github.com/jlong/css-spinners){:target=\"_blank\"}\n* [css-loaders](https://github.com/lukehaas/css-loaders){:target=\"_blank\"}\n* [animate.css](https://github.com/daneden/animate.css){:target=\"_blank\"}\n* [velocity](https://github.com/julianshapiro/velocity){:target=\"_blank\"}\n* [dashboard（Bootstrap模板）](https://github.com/keen/dashboards){:target=\"_blank\"}\n* [雪碧图生成工具](https://github.com/sprity/sprity){:target=\"_blank\"}\n* [svg-sprite-polyfill](https://github.com/frexy/svg-sprite-polyfill){:target=\"_blank\"}\n* [Snap.svg](https://github.com/adobe-webplatform/Snap.svg){:target=\"_blank\"}\n* [SVG图标集](https://github.com/frexy/glyph-iconset){:target=\"_blank\"}\n* [纯css图标](https://github.com/saeedalipoor/icono){:target=\"_blank\"}\n* [Font-Awesome](https://github.com/FortAwesome/Font-Awesome){:target=\"_blank\"}\n* [material-design-icons](https://github.com/google/material-design-icons){:target=\"_blank\"}\n* [Material Design Lite](https://github.com/google/material-design-lite){:target=\"_blank\"}\n* [Material风格css框架](https://github.com/Dogfalo/materialize){:target=\"_blank\"}\n* [fullPage.js](https://github.com/alvarotrigo/fullPage.js){:target=\"_blank\"}\n* [Fullpage原生实现](https://github.com/powy1993/fullpage){:target=\"_blank\"}\n* [bootstrap-daterangepicker](https://github.com/dangrossman/bootstrap-daterangepicker){:target=\"_blank\"}\n* [bootstrap-additions](https://github.com/mgcrea/bootstrap-additions){:target=\"_blank\"}\n* [pjax](https://github.com/welefen/pjax){:target=\"_blank\"}\n* [Ace（Cloud9的文本编辑器）](https://github.com/ajaxorg/ace){:target=\"_blank\"}\n* [quill 文本编辑器](https://github.com/quilljs/quill){:target=\"_blank\"}\n* [plupload](https://github.com/moxiecode/plupload){:target=\"_blank\"}\n* [postcss](https://github.com/postcss/postcss){:target=\"_blank\"}\n* [three.js](https://github.com/mrdoob/three.js){:target=\"_blank\"}\n* [stage.js](https://github.com/shakiba/stage.js){:target=\"_blank\"}\n* [html2canvas](https://github.com/niklasvh/html2canvas){:target=\"_blank\"}\n* [nprogress](http://ricostacruz.com/nprogress/){:target=\"_blank\"}\n\n# Shim/Polyfill\n\n* [ES5 shim](https://github.com/es-shims/es5-shim){:target=\"_blank\"}\n* [es6-shim](https://github.com/paulmillr/es6-shim){:target=\"_blank\"}\n* [html5shiv](https://github.com/aFarkas/html5shiv){:target=\"_blank\"}\n* [core-js](https://github.com/zloirock/core-js){:target=\"_blank\"}\n\n\n# 可能是常用的工具库\n\n* [moment](https://github.com/moment/moment){:target=\"_blank\"}\n* [lodash](https://github.com/lodash/lodash){:target=\"_blank\"}\n* [highland 流式风格工具库](https://github.com/caolan/highland){:target=\"_blank\"}\n* [handlebars.js](https://github.com/wycats/handlebars.js){:target=\"_blank\"}\n* [FileAPI](https://github.com/mailru/FileAPI){:target=\"_blank\"}\n* [CryptoJS加密库](https://github.com/sytelus/CryptoJS){:target=\"_blank\"}\n* [Esprima（ECMAScript语法解析）](https://github.com/jquery/esprima){:target=\"_blank\"}\n* [jison 语法解析器生成器](https://github.com/zaach/jison){:target=\"_blank\"}\n* [bowser 判断浏览器](https://github.com/ded/bowser){:target=\"_blank\"}\n* [reqwest（Ajax实现）](https://github.com/ded/reqwest){:target=\"_blank\"}\n* [superagent](https://github.com/visionmedia/superagent){:target=\"_blank\"}\n* [es6-promise](https://github.com/stefanpenner/es6-promise){:target=\"_blank\"}\n* [core-js（各种js pollyfill集合）](https://github.com/zloirock/core-js){:target=\"_blank\"}\n* [svgo SVG优化工具](https://github.com/svg/svgo){:target=\"_blank\"}\n* [stateman 前端路由](https://github.com/leeluolee/stateman){:target=\"_blank\"}\n* [dragdealer](https://github.com/skidding/dragdealer){:target=\"_blank\"}\n* [pdf.js](https://github.com/mozilla/pdf.js){:target=\"_blank\"}\n* [filesize.js](https://github.com/avoidwork/filesize.js){:target=\"_blank\"}\n* [berserkJS](https://github.com/tapir-dream/berserkJS){:target=\"_blank\"}\n* [umd](https://github.com/umdjs/umd){:target=\"_blank\"}\n* [requirejs](https://github.com/requirejs/requirejs){:target=\"_blank\"}\n\n\n# 代码处理工具\n\n* [babel](https://github.com/babel/babel){:target=\"_blank\"}\n* [traceur-compiler](https://github.com/google/traceur-compiler){:target=\"_blank\"}\n* [webpack](https://github.com/webpack/webpack){:target=\"_blank\"}\n* [node-browserify](https://github.com/substack/node-browserify){:target=\"_blank\"}\n* [amdclean](https://github.com/gfranko/amdclean){:target=\"_blank\"}\n* [gulp](https://github.com/gulpjs/gulp){:target=\"_blank\"}\n* [grunt](https://github.com/gruntjs/grunt){:target=\"_blank\"}\n* [jspm](http://jspm.io/){:target=\"_blank\"}\n* [rollup.js](http://rollupjs.org/){:target=\"_blank\"}\n\n\n# 移动端\n\n* [Swipe](https://github.com/thebird/Swipe){:target=\"_blank\"}\n* [mobileTech 移动端资源收集](https://github.com/jtyjty99999/mobileTech){:target=\"_blank\"}\n\n\n# 测试框架和断言库\n\n* [chai](https://github.com/chaijs/chai){:target=\"_blank\"}\n* [jasmine](https://github.com/jasmine/jasmine){:target=\"_blank\"}\n\n\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n\n","source":"_posts/2016-05-20-frontend.markdown","raw":"---\nlayout:     post\ntitle:      \"前端Github收集\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Github\n---\nhttp://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously\n\n[慢慢整理](https://segmentfault.com/a/1190000003510001?utm_source=Weibo&utm_medium=shareLink&utm_campaign=socialShare)\n\n# HTML/CSS\n\n* [html5-boilerplate](https://github.com/h5bp/html5-boilerplate){:target=\"_blank\"}\n* [html5demos](https://github.com/remy/html5demos){:target=\"_blank\"}\n* [web项目启航包](https://github.com/google/web-starter-kit){:target=\"_blank\"}\n* [CSS术语表](https://github.com/yisibl/css-vocabulary){:target=\"_blank\"}\n* [Respond（Media Query polyfill）](https://github.com/scottjehl/Respond){:target=\"_blank\"}\n* [Modernizr](https://github.com/Modernizr/Modernizr){:target=\"_blank\"}\n* [normalize.css](https://github.com/necolas/normalize.css){:target=\"_blank\"}\n* [bootstrap](https://github.com/twbs/bootstrap){:target=\"_blank\"}\n* [Semantic-UI](https://github.com/Semantic-Org/Semantic-UI){:target=\"_blank\"}\n* [amazeui](https://github.com/amazeui/amazeui){:target=\"_blank\"}\n* [masonry 栅格布局库](https://github.com/desandro/masonry){:target=\"_blank\"}\n* [lost 栅格布局库](https://github.com/peterramsing/lost){:target=\"_blank\"}\n* [bootmetro](https://github.com/aozora/bootmetro){:target=\"_blank\"}\n* [CSS模拟各种设备](https://github.com/marvelapp/devices.css){:target=\"_blank\"}\n* [CSS spinners](https://github.com/jlong/css-spinners){:target=\"_blank\"}\n* [css-loaders](https://github.com/lukehaas/css-loaders){:target=\"_blank\"}\n* [animate.css](https://github.com/daneden/animate.css){:target=\"_blank\"}\n* [velocity](https://github.com/julianshapiro/velocity){:target=\"_blank\"}\n* [dashboard（Bootstrap模板）](https://github.com/keen/dashboards){:target=\"_blank\"}\n* [雪碧图生成工具](https://github.com/sprity/sprity){:target=\"_blank\"}\n* [svg-sprite-polyfill](https://github.com/frexy/svg-sprite-polyfill){:target=\"_blank\"}\n* [Snap.svg](https://github.com/adobe-webplatform/Snap.svg){:target=\"_blank\"}\n* [SVG图标集](https://github.com/frexy/glyph-iconset){:target=\"_blank\"}\n* [纯css图标](https://github.com/saeedalipoor/icono){:target=\"_blank\"}\n* [Font-Awesome](https://github.com/FortAwesome/Font-Awesome){:target=\"_blank\"}\n* [material-design-icons](https://github.com/google/material-design-icons){:target=\"_blank\"}\n* [Material Design Lite](https://github.com/google/material-design-lite){:target=\"_blank\"}\n* [Material风格css框架](https://github.com/Dogfalo/materialize){:target=\"_blank\"}\n* [fullPage.js](https://github.com/alvarotrigo/fullPage.js){:target=\"_blank\"}\n* [Fullpage原生实现](https://github.com/powy1993/fullpage){:target=\"_blank\"}\n* [bootstrap-daterangepicker](https://github.com/dangrossman/bootstrap-daterangepicker){:target=\"_blank\"}\n* [bootstrap-additions](https://github.com/mgcrea/bootstrap-additions){:target=\"_blank\"}\n* [pjax](https://github.com/welefen/pjax){:target=\"_blank\"}\n* [Ace（Cloud9的文本编辑器）](https://github.com/ajaxorg/ace){:target=\"_blank\"}\n* [quill 文本编辑器](https://github.com/quilljs/quill){:target=\"_blank\"}\n* [plupload](https://github.com/moxiecode/plupload){:target=\"_blank\"}\n* [postcss](https://github.com/postcss/postcss){:target=\"_blank\"}\n* [three.js](https://github.com/mrdoob/three.js){:target=\"_blank\"}\n* [stage.js](https://github.com/shakiba/stage.js){:target=\"_blank\"}\n* [html2canvas](https://github.com/niklasvh/html2canvas){:target=\"_blank\"}\n* [nprogress](http://ricostacruz.com/nprogress/){:target=\"_blank\"}\n\n# Shim/Polyfill\n\n* [ES5 shim](https://github.com/es-shims/es5-shim){:target=\"_blank\"}\n* [es6-shim](https://github.com/paulmillr/es6-shim){:target=\"_blank\"}\n* [html5shiv](https://github.com/aFarkas/html5shiv){:target=\"_blank\"}\n* [core-js](https://github.com/zloirock/core-js){:target=\"_blank\"}\n\n\n# 可能是常用的工具库\n\n* [moment](https://github.com/moment/moment){:target=\"_blank\"}\n* [lodash](https://github.com/lodash/lodash){:target=\"_blank\"}\n* [highland 流式风格工具库](https://github.com/caolan/highland){:target=\"_blank\"}\n* [handlebars.js](https://github.com/wycats/handlebars.js){:target=\"_blank\"}\n* [FileAPI](https://github.com/mailru/FileAPI){:target=\"_blank\"}\n* [CryptoJS加密库](https://github.com/sytelus/CryptoJS){:target=\"_blank\"}\n* [Esprima（ECMAScript语法解析）](https://github.com/jquery/esprima){:target=\"_blank\"}\n* [jison 语法解析器生成器](https://github.com/zaach/jison){:target=\"_blank\"}\n* [bowser 判断浏览器](https://github.com/ded/bowser){:target=\"_blank\"}\n* [reqwest（Ajax实现）](https://github.com/ded/reqwest){:target=\"_blank\"}\n* [superagent](https://github.com/visionmedia/superagent){:target=\"_blank\"}\n* [es6-promise](https://github.com/stefanpenner/es6-promise){:target=\"_blank\"}\n* [core-js（各种js pollyfill集合）](https://github.com/zloirock/core-js){:target=\"_blank\"}\n* [svgo SVG优化工具](https://github.com/svg/svgo){:target=\"_blank\"}\n* [stateman 前端路由](https://github.com/leeluolee/stateman){:target=\"_blank\"}\n* [dragdealer](https://github.com/skidding/dragdealer){:target=\"_blank\"}\n* [pdf.js](https://github.com/mozilla/pdf.js){:target=\"_blank\"}\n* [filesize.js](https://github.com/avoidwork/filesize.js){:target=\"_blank\"}\n* [berserkJS](https://github.com/tapir-dream/berserkJS){:target=\"_blank\"}\n* [umd](https://github.com/umdjs/umd){:target=\"_blank\"}\n* [requirejs](https://github.com/requirejs/requirejs){:target=\"_blank\"}\n\n\n# 代码处理工具\n\n* [babel](https://github.com/babel/babel){:target=\"_blank\"}\n* [traceur-compiler](https://github.com/google/traceur-compiler){:target=\"_blank\"}\n* [webpack](https://github.com/webpack/webpack){:target=\"_blank\"}\n* [node-browserify](https://github.com/substack/node-browserify){:target=\"_blank\"}\n* [amdclean](https://github.com/gfranko/amdclean){:target=\"_blank\"}\n* [gulp](https://github.com/gulpjs/gulp){:target=\"_blank\"}\n* [grunt](https://github.com/gruntjs/grunt){:target=\"_blank\"}\n* [jspm](http://jspm.io/){:target=\"_blank\"}\n* [rollup.js](http://rollupjs.org/){:target=\"_blank\"}\n\n\n# 移动端\n\n* [Swipe](https://github.com/thebird/Swipe){:target=\"_blank\"}\n* [mobileTech 移动端资源收集](https://github.com/jtyjty99999/mobileTech){:target=\"_blank\"}\n\n\n# 测试框架和断言库\n\n* [chai](https://github.com/chaijs/chai){:target=\"_blank\"}\n* [jasmine](https://github.com/jasmine/jasmine){:target=\"_blank\"}\n\n\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n* []()\n\n","slug":"2016-05-20-frontend","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74o000ds7t7ejtuoucd","content":"<p><a href=\"http://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously\" target=\"_blank\" rel=\"external\">http://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000003510001?utm_source=Weibo&amp;utm_medium=shareLink&amp;utm_campaign=socialShare\" target=\"_blank\" rel=\"external\">慢慢整理</a></p>\n<h1 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML/CSS\"></a>HTML/CSS</h1><ul>\n<li><a href=\"https://github.com/h5bp/html5-boilerplate\" target=\"_blank\" rel=\"external\">html5-boilerplate</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/remy/html5demos\" target=\"_blank\" rel=\"external\">html5demos</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/web-starter-kit\" target=\"_blank\" rel=\"external\">web项目启航包</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/yisibl/css-vocabulary\" target=\"_blank\" rel=\"external\">CSS术语表</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/scottjehl/Respond\" target=\"_blank\" rel=\"external\">Respond（Media Query polyfill）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Modernizr/Modernizr\" target=\"_blank\" rel=\"external\">Modernizr</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"external\">normalize.css</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Semantic-Org/Semantic-UI\" target=\"_blank\" rel=\"external\">Semantic-UI</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/amazeui/amazeui\" target=\"_blank\" rel=\"external\">amazeui</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/desandro/masonry\" target=\"_blank\" rel=\"external\">masonry 栅格布局库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/peterramsing/lost\" target=\"_blank\" rel=\"external\">lost 栅格布局库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/aozora/bootmetro\" target=\"_blank\" rel=\"external\">bootmetro</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/marvelapp/devices.css\" target=\"_blank\" rel=\"external\">CSS模拟各种设备</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jlong/css-spinners\" target=\"_blank\" rel=\"external\">CSS spinners</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/lukehaas/css-loaders\" target=\"_blank\" rel=\"external\">css-loaders</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"external\">animate.css</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/julianshapiro/velocity\" target=\"_blank\" rel=\"external\">velocity</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/keen/dashboards\" target=\"_blank\" rel=\"external\">dashboard（Bootstrap模板）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/sprity/sprity\" target=\"_blank\" rel=\"external\">雪碧图生成工具</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/frexy/svg-sprite-polyfill\" target=\"_blank\" rel=\"external\">svg-sprite-polyfill</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/adobe-webplatform/Snap.svg\" target=\"_blank\" rel=\"external\">Snap.svg</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/frexy/glyph-iconset\" target=\"_blank\" rel=\"external\">SVG图标集</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/saeedalipoor/icono\" target=\"_blank\" rel=\"external\">纯css图标</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"external\">Font-Awesome</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"external\">material-design-icons</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/material-design-lite\" target=\"_blank\" rel=\"external\">Material Design Lite</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Dogfalo/materialize\" target=\"_blank\" rel=\"external\">Material风格css框架</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/alvarotrigo/fullPage.js\" target=\"_blank\" rel=\"external\">fullPage.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/powy1993/fullpage\" target=\"_blank\" rel=\"external\">Fullpage原生实现</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/dangrossman/bootstrap-daterangepicker\" target=\"_blank\" rel=\"external\">bootstrap-daterangepicker</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mgcrea/bootstrap-additions\" target=\"_blank\" rel=\"external\">bootstrap-additions</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/welefen/pjax\" target=\"_blank\" rel=\"external\">pjax</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ajaxorg/ace\" target=\"_blank\" rel=\"external\">Ace（Cloud9的文本编辑器）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/quilljs/quill\" target=\"_blank\" rel=\"external\">quill 文本编辑器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/moxiecode/plupload\" target=\"_blank\" rel=\"external\">plupload</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">postcss</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mrdoob/three.js\" target=\"_blank\" rel=\"external\">three.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/shakiba/stage.js\" target=\"_blank\" rel=\"external\">stage.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/niklasvh/html2canvas\" target=\"_blank\" rel=\"external\">html2canvas</a>{:target=”_blank”}</li>\n<li><a href=\"http://ricostacruz.com/nprogress/\" target=\"_blank\" rel=\"external\">nprogress</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"Shim-Polyfill\"><a href=\"#Shim-Polyfill\" class=\"headerlink\" title=\"Shim/Polyfill\"></a>Shim/Polyfill</h1><ul>\n<li><a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"external\">ES5 shim</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/paulmillr/es6-shim\" target=\"_blank\" rel=\"external\">es6-shim</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/aFarkas/html5shiv\" target=\"_blank\" rel=\"external\">html5shiv</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"external\">core-js</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"可能是常用的工具库\"><a href=\"#可能是常用的工具库\" class=\"headerlink\" title=\"可能是常用的工具库\"></a>可能是常用的工具库</h1><ul>\n<li><a href=\"https://github.com/moment/moment\" target=\"_blank\" rel=\"external\">moment</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"external\">lodash</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/caolan/highland\" target=\"_blank\" rel=\"external\">highland 流式风格工具库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/wycats/handlebars.js\" target=\"_blank\" rel=\"external\">handlebars.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mailru/FileAPI\" target=\"_blank\" rel=\"external\">FileAPI</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/sytelus/CryptoJS\" target=\"_blank\" rel=\"external\">CryptoJS加密库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jquery/esprima\" target=\"_blank\" rel=\"external\">Esprima（ECMAScript语法解析）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zaach/jison\" target=\"_blank\" rel=\"external\">jison 语法解析器生成器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ded/bowser\" target=\"_blank\" rel=\"external\">bowser 判断浏览器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ded/reqwest\" target=\"_blank\" rel=\"external\">reqwest（Ajax实现）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\" rel=\"external\">superagent</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"external\">es6-promise</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"external\">core-js（各种js pollyfill集合）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/svg/svgo\" target=\"_blank\" rel=\"external\">svgo SVG优化工具</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/leeluolee/stateman\" target=\"_blank\" rel=\"external\">stateman 前端路由</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/skidding/dragdealer\" target=\"_blank\" rel=\"external\">dragdealer</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mozilla/pdf.js\" target=\"_blank\" rel=\"external\">pdf.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/avoidwork/filesize.js\" target=\"_blank\" rel=\"external\">filesize.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/tapir-dream/berserkJS\" target=\"_blank\" rel=\"external\">berserkJS</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"external\">umd</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"external\">requirejs</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"代码处理工具\"><a href=\"#代码处理工具\" class=\"headerlink\" title=\"代码处理工具\"></a>代码处理工具</h1><ul>\n<li><a href=\"https://github.com/babel/babel\" target=\"_blank\" rel=\"external\">babel</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"external\">traceur-compiler</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/webpack/webpack\" target=\"_blank\" rel=\"external\">webpack</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/substack/node-browserify\" target=\"_blank\" rel=\"external\">node-browserify</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gfranko/amdclean\" target=\"_blank\" rel=\"external\">amdclean</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gulpjs/gulp\" target=\"_blank\" rel=\"external\">gulp</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gruntjs/grunt\" target=\"_blank\" rel=\"external\">grunt</a>{:target=”_blank”}</li>\n<li><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">jspm</a>{:target=”_blank”}</li>\n<li><a href=\"http://rollupjs.org/\" target=\"_blank\" rel=\"external\">rollup.js</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h1><ul>\n<li><a href=\"https://github.com/thebird/Swipe\" target=\"_blank\" rel=\"external\">Swipe</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jtyjty99999/mobileTech\" target=\"_blank\" rel=\"external\">mobileTech 移动端资源收集</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"测试框架和断言库\"><a href=\"#测试框架和断言库\" class=\"headerlink\" title=\"测试框架和断言库\"></a>测试框架和断言库</h1><ul>\n<li><a href=\"https://github.com/chaijs/chai\" target=\"_blank\" rel=\"external\">chai</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"external\">jasmine</a>{:target=”_blank”}</li>\n</ul>\n<ul>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously\" target=\"_blank\" rel=\"external\">http://yaowenjie.github.io/%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/using-browser-sync-to-test-in-many-plantforms-synchronously</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000003510001?utm_source=Weibo&amp;utm_medium=shareLink&amp;utm_campaign=socialShare\" target=\"_blank\" rel=\"external\">慢慢整理</a></p>\n<h1 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML/CSS\"></a>HTML/CSS</h1><ul>\n<li><a href=\"https://github.com/h5bp/html5-boilerplate\" target=\"_blank\" rel=\"external\">html5-boilerplate</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/remy/html5demos\" target=\"_blank\" rel=\"external\">html5demos</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/web-starter-kit\" target=\"_blank\" rel=\"external\">web项目启航包</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/yisibl/css-vocabulary\" target=\"_blank\" rel=\"external\">CSS术语表</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/scottjehl/Respond\" target=\"_blank\" rel=\"external\">Respond（Media Query polyfill）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Modernizr/Modernizr\" target=\"_blank\" rel=\"external\">Modernizr</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"external\">normalize.css</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Semantic-Org/Semantic-UI\" target=\"_blank\" rel=\"external\">Semantic-UI</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/amazeui/amazeui\" target=\"_blank\" rel=\"external\">amazeui</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/desandro/masonry\" target=\"_blank\" rel=\"external\">masonry 栅格布局库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/peterramsing/lost\" target=\"_blank\" rel=\"external\">lost 栅格布局库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/aozora/bootmetro\" target=\"_blank\" rel=\"external\">bootmetro</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/marvelapp/devices.css\" target=\"_blank\" rel=\"external\">CSS模拟各种设备</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jlong/css-spinners\" target=\"_blank\" rel=\"external\">CSS spinners</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/lukehaas/css-loaders\" target=\"_blank\" rel=\"external\">css-loaders</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"external\">animate.css</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/julianshapiro/velocity\" target=\"_blank\" rel=\"external\">velocity</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/keen/dashboards\" target=\"_blank\" rel=\"external\">dashboard（Bootstrap模板）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/sprity/sprity\" target=\"_blank\" rel=\"external\">雪碧图生成工具</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/frexy/svg-sprite-polyfill\" target=\"_blank\" rel=\"external\">svg-sprite-polyfill</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/adobe-webplatform/Snap.svg\" target=\"_blank\" rel=\"external\">Snap.svg</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/frexy/glyph-iconset\" target=\"_blank\" rel=\"external\">SVG图标集</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/saeedalipoor/icono\" target=\"_blank\" rel=\"external\">纯css图标</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"external\">Font-Awesome</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"external\">material-design-icons</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/material-design-lite\" target=\"_blank\" rel=\"external\">Material Design Lite</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/Dogfalo/materialize\" target=\"_blank\" rel=\"external\">Material风格css框架</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/alvarotrigo/fullPage.js\" target=\"_blank\" rel=\"external\">fullPage.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/powy1993/fullpage\" target=\"_blank\" rel=\"external\">Fullpage原生实现</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/dangrossman/bootstrap-daterangepicker\" target=\"_blank\" rel=\"external\">bootstrap-daterangepicker</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mgcrea/bootstrap-additions\" target=\"_blank\" rel=\"external\">bootstrap-additions</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/welefen/pjax\" target=\"_blank\" rel=\"external\">pjax</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ajaxorg/ace\" target=\"_blank\" rel=\"external\">Ace（Cloud9的文本编辑器）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/quilljs/quill\" target=\"_blank\" rel=\"external\">quill 文本编辑器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/moxiecode/plupload\" target=\"_blank\" rel=\"external\">plupload</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">postcss</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mrdoob/three.js\" target=\"_blank\" rel=\"external\">three.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/shakiba/stage.js\" target=\"_blank\" rel=\"external\">stage.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/niklasvh/html2canvas\" target=\"_blank\" rel=\"external\">html2canvas</a>{:target=”_blank”}</li>\n<li><a href=\"http://ricostacruz.com/nprogress/\" target=\"_blank\" rel=\"external\">nprogress</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"Shim-Polyfill\"><a href=\"#Shim-Polyfill\" class=\"headerlink\" title=\"Shim/Polyfill\"></a>Shim/Polyfill</h1><ul>\n<li><a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"external\">ES5 shim</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/paulmillr/es6-shim\" target=\"_blank\" rel=\"external\">es6-shim</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/aFarkas/html5shiv\" target=\"_blank\" rel=\"external\">html5shiv</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"external\">core-js</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"可能是常用的工具库\"><a href=\"#可能是常用的工具库\" class=\"headerlink\" title=\"可能是常用的工具库\"></a>可能是常用的工具库</h1><ul>\n<li><a href=\"https://github.com/moment/moment\" target=\"_blank\" rel=\"external\">moment</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"external\">lodash</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/caolan/highland\" target=\"_blank\" rel=\"external\">highland 流式风格工具库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/wycats/handlebars.js\" target=\"_blank\" rel=\"external\">handlebars.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mailru/FileAPI\" target=\"_blank\" rel=\"external\">FileAPI</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/sytelus/CryptoJS\" target=\"_blank\" rel=\"external\">CryptoJS加密库</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jquery/esprima\" target=\"_blank\" rel=\"external\">Esprima（ECMAScript语法解析）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zaach/jison\" target=\"_blank\" rel=\"external\">jison 语法解析器生成器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ded/bowser\" target=\"_blank\" rel=\"external\">bowser 判断浏览器</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/ded/reqwest\" target=\"_blank\" rel=\"external\">reqwest（Ajax实现）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\" rel=\"external\">superagent</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"external\">es6-promise</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"external\">core-js（各种js pollyfill集合）</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/svg/svgo\" target=\"_blank\" rel=\"external\">svgo SVG优化工具</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/leeluolee/stateman\" target=\"_blank\" rel=\"external\">stateman 前端路由</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/skidding/dragdealer\" target=\"_blank\" rel=\"external\">dragdealer</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/mozilla/pdf.js\" target=\"_blank\" rel=\"external\">pdf.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/avoidwork/filesize.js\" target=\"_blank\" rel=\"external\">filesize.js</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/tapir-dream/berserkJS\" target=\"_blank\" rel=\"external\">berserkJS</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"external\">umd</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/requirejs/requirejs\" target=\"_blank\" rel=\"external\">requirejs</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"代码处理工具\"><a href=\"#代码处理工具\" class=\"headerlink\" title=\"代码处理工具\"></a>代码处理工具</h1><ul>\n<li><a href=\"https://github.com/babel/babel\" target=\"_blank\" rel=\"external\">babel</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"external\">traceur-compiler</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/webpack/webpack\" target=\"_blank\" rel=\"external\">webpack</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/substack/node-browserify\" target=\"_blank\" rel=\"external\">node-browserify</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gfranko/amdclean\" target=\"_blank\" rel=\"external\">amdclean</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gulpjs/gulp\" target=\"_blank\" rel=\"external\">gulp</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/gruntjs/grunt\" target=\"_blank\" rel=\"external\">grunt</a>{:target=”_blank”}</li>\n<li><a href=\"http://jspm.io/\" target=\"_blank\" rel=\"external\">jspm</a>{:target=”_blank”}</li>\n<li><a href=\"http://rollupjs.org/\" target=\"_blank\" rel=\"external\">rollup.js</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h1><ul>\n<li><a href=\"https://github.com/thebird/Swipe\" target=\"_blank\" rel=\"external\">Swipe</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jtyjty99999/mobileTech\" target=\"_blank\" rel=\"external\">mobileTech 移动端资源收集</a>{:target=”_blank”}</li>\n</ul>\n<h1 id=\"测试框架和断言库\"><a href=\"#测试框架和断言库\" class=\"headerlink\" title=\"测试框架和断言库\"></a>测试框架和断言库</h1><ul>\n<li><a href=\"https://github.com/chaijs/chai\" target=\"_blank\" rel=\"external\">chai</a>{:target=”_blank”}</li>\n<li><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"external\">jasmine</a>{:target=”_blank”}</li>\n</ul>\n<ul>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ul>\n"},{"layout":"post","title":"Gulp","subtitle":"Github","date":"2016-05-20T09:57:00.000Z","author":"Asher","header-img":"post-bg-gulp.jpg","header-mask":0.3,"catalog":true,"_content":"\n# Gulp\n\n> gulp 是基于 Nodejs 的自动任务运行器，能自动化地完成javascript/coffee/sass/less/html/image/css\n> 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些\n> 步骤。在实现上， gulp\n> 借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单.\n\n![](http://o7d3ayvg2.bkt.clouddn.com/gulp-detail.jpg)\n\n# 推荐使用nvm\n\n[NVM](https://github.com/creationix/nvm){:target=\"_block\"}\n\n```javascript\nnpm install gulp --global --save-dev\n```\n\n# Gulpfile.js\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default', () => {\n    gulp.src()\n        .pipe()\n        .pipe()\n        ...\n})\n\n```\n\n## gulp.src(globs[, options])\n\n> Emits files matching provided glob or an array of globs.\n> Returns a [stream](http://nodejs.org/api/stream.html){:target=\"_block\"} of\n> [Vinyl](https://github.com/gulpjs/vinyl-fs){:target=\"_block\"} files that can be\n> [piped](https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options){:target=\"_block\"} to plugins.\n\n> 读取单个或一组文件，　返回一个可以被接入其他插件的文件流。\n\n### options {}\n\n* options.buffer boolean/true\nfalse的时候　返回不带缓冲的文件流\n\n* options.read boolean/true\n\n返回null　不读取文件\n\n* options.base string everyting before glob starts [gulp2base](https://github.com/contra/glob2base)\n\n\n## gulp.dest(path[, options])\n\n可扩展，具有写入功能。　反向输出文件可多个，当文件不存在的时候可以自动创建。\n\n```javascript\ngulp.src('./client/templates/*.jade')\n  .pipe(jade())\n  .pipe(gulp.dest('./build/templates'))\n  .pipe(minify())\n  .pipe(gulp.dest('./build/minified_templates'));\n```\n\n\n* path 输出地址\n\n### options {}\n\n* options.cwd process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到\n* options.mode 0777 指定被创建文件夹的权限\n\n\n## gulp.task(name[, deps], fn)\n\n创建gulp任务\n\n* name string 任务名\n* deps stringArray 任务依赖，被依赖的任务会返回当前任务的事件流所以会先执行。\n* fn fun 当前任务的内容\n\n\n## gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])\n\n监听文件变化，当文件变化时执行tasks\n\n* glob 需要处理的文件\n* opts [gaze](https://github.com/shama/gaze)\n* tasks array 文件变化时要跑的任务\n* cb　callback function\n\n```javascript\ngulp.watch('js/**/*.js', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n```\n\n* event.type added, changed, deleted or renamed.\n* event.path 触发时间的文件的路径(The path to the file that triggered the event.)\n\n# Gulp plugin\n\n[慢慢整理](http://www.open-open.com/lib/view/open1426232157888.html)\n\n## HTML&CSS\n\n* [autoprefixer](https://github.com/postcss/autoprefixer) - parse CSS and add vendor prefixes to rules by Can I Use.\n\n\n[H1](http://yaowenjie.github.io/front-end/using-gulp-with-babel)\n[H2](https://www.talkingcoder.com/article/6367591948982623481)\n","source":"_posts/2016-05-20-gulp.markdown","raw":"---\nlayout:     post\ntitle:      \"Gulp\"\nsubtitle:   \"Github\"\ndate:       2016-05-20 17:57:00\nauthor:     \"Asher\"\nheader-img: \"post-bg-gulp.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - 前端工具\n---\n\n# Gulp\n\n> gulp 是基于 Nodejs 的自动任务运行器，能自动化地完成javascript/coffee/sass/less/html/image/css\n> 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些\n> 步骤。在实现上， gulp\n> 借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单.\n\n![](http://o7d3ayvg2.bkt.clouddn.com/gulp-detail.jpg)\n\n# 推荐使用nvm\n\n[NVM](https://github.com/creationix/nvm){:target=\"_block\"}\n\n```javascript\nnpm install gulp --global --save-dev\n```\n\n# Gulpfile.js\n\n```javascript\nvar gulp = require('gulp');\n\ngulp.task('default', () => {\n    gulp.src()\n        .pipe()\n        .pipe()\n        ...\n})\n\n```\n\n## gulp.src(globs[, options])\n\n> Emits files matching provided glob or an array of globs.\n> Returns a [stream](http://nodejs.org/api/stream.html){:target=\"_block\"} of\n> [Vinyl](https://github.com/gulpjs/vinyl-fs){:target=\"_block\"} files that can be\n> [piped](https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options){:target=\"_block\"} to plugins.\n\n> 读取单个或一组文件，　返回一个可以被接入其他插件的文件流。\n\n### options {}\n\n* options.buffer boolean/true\nfalse的时候　返回不带缓冲的文件流\n\n* options.read boolean/true\n\n返回null　不读取文件\n\n* options.base string everyting before glob starts [gulp2base](https://github.com/contra/glob2base)\n\n\n## gulp.dest(path[, options])\n\n可扩展，具有写入功能。　反向输出文件可多个，当文件不存在的时候可以自动创建。\n\n```javascript\ngulp.src('./client/templates/*.jade')\n  .pipe(jade())\n  .pipe(gulp.dest('./build/templates'))\n  .pipe(minify())\n  .pipe(gulp.dest('./build/minified_templates'));\n```\n\n\n* path 输出地址\n\n### options {}\n\n* options.cwd process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到\n* options.mode 0777 指定被创建文件夹的权限\n\n\n## gulp.task(name[, deps], fn)\n\n创建gulp任务\n\n* name string 任务名\n* deps stringArray 任务依赖，被依赖的任务会返回当前任务的事件流所以会先执行。\n* fn fun 当前任务的内容\n\n\n## gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])\n\n监听文件变化，当文件变化时执行tasks\n\n* glob 需要处理的文件\n* opts [gaze](https://github.com/shama/gaze)\n* tasks array 文件变化时要跑的任务\n* cb　callback function\n\n```javascript\ngulp.watch('js/**/*.js', function(event) {\n  console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');\n});\n```\n\n* event.type added, changed, deleted or renamed.\n* event.path 触发时间的文件的路径(The path to the file that triggered the event.)\n\n# Gulp plugin\n\n[慢慢整理](http://www.open-open.com/lib/view/open1426232157888.html)\n\n## HTML&CSS\n\n* [autoprefixer](https://github.com/postcss/autoprefixer) - parse CSS and add vendor prefixes to rules by Can I Use.\n\n\n[H1](http://yaowenjie.github.io/front-end/using-gulp-with-babel)\n[H2](https://www.talkingcoder.com/article/6367591948982623481)\n","slug":"2016-05-20-gulp","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74q000es7t7to4hs9j8","content":"<h1 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h1><blockquote>\n<p>gulp 是基于 Nodejs 的自动任务运行器，能自动化地完成javascript/coffee/sass/less/html/image/css<br>等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些<br>步骤。在实现上， gulp<br>借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单.</p>\n</blockquote>\n<p><img src=\"http://o7d3ayvg2.bkt.clouddn.com/gulp-detail.jpg\" alt=\"\"></p>\n<h1 id=\"推荐使用nvm\"><a href=\"#推荐使用nvm\" class=\"headerlink\" title=\"推荐使用nvm\"></a>推荐使用nvm</h1><p><a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">NVM</a>{:target=”_block”}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp --global --save-dev</div></pre></td></tr></table></figure>\n<h1 id=\"Gulpfile-js\"><a href=\"#Gulpfile-js\" class=\"headerlink\" title=\"Gulpfile.js\"></a>Gulpfile.js</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, () =&gt; &#123;</div><div class=\"line\">    gulp.src()</div><div class=\"line\">        .pipe()</div><div class=\"line\">        .pipe()</div><div class=\"line\">        ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"gulp-src-globs-options\"><a href=\"#gulp-src-globs-options\" class=\"headerlink\" title=\"gulp.src(globs[, options])\"></a>gulp.src(globs[, options])</h2><blockquote>\n<p>Emits files matching provided glob or an array of globs.<br>Returns a <a href=\"http://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"external\">stream</a>{:target=”_block”} of<br><a href=\"https://github.com/gulpjs/vinyl-fs\" target=\"_blank\" rel=\"external\">Vinyl</a>{:target=”_block”} files that can be<br><a href=\"https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\" target=\"_blank\" rel=\"external\">piped</a>{:target=”_block”} to plugins.</p>\n<p>读取单个或一组文件，　返回一个可以被接入其他插件的文件流。</p>\n</blockquote>\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options {}\"></a>options {}</h3><ul>\n<li><p>options.buffer boolean/true<br>false的时候　返回不带缓冲的文件流</p>\n</li>\n<li><p>options.read boolean/true</p>\n</li>\n</ul>\n<p>返回null　不读取文件</p>\n<ul>\n<li>options.base string everyting before glob starts <a href=\"https://github.com/contra/glob2base\" target=\"_blank\" rel=\"external\">gulp2base</a></li>\n</ul>\n<h2 id=\"gulp-dest-path-options\"><a href=\"#gulp-dest-path-options\" class=\"headerlink\" title=\"gulp.dest(path[, options])\"></a>gulp.dest(path[, options])</h2><p>可扩展，具有写入功能。　反向输出文件可多个，当文件不存在的时候可以自动创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(<span class=\"string\">'./client/templates/*.jade'</span>)</div><div class=\"line\">  .pipe(jade())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./build/templates'</span>))</div><div class=\"line\">  .pipe(minify())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./build/minified_templates'</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>path 输出地址</li>\n</ul>\n<h3 id=\"options-1\"><a href=\"#options-1\" class=\"headerlink\" title=\"options {}\"></a>options {}</h3><ul>\n<li>options.cwd process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到</li>\n<li>options.mode 0777 指定被创建文件夹的权限</li>\n</ul>\n<h2 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h2><p>创建gulp任务</p>\n<ul>\n<li>name string 任务名</li>\n<li>deps stringArray 任务依赖，被依赖的任务会返回当前任务的事件流所以会先执行。</li>\n<li>fn fun 当前任务的内容</li>\n</ul>\n<h2 id=\"gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb\"><a href=\"#gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb\" class=\"headerlink\" title=\"gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])\"></a>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</h2><p>监听文件变化，当文件变化时执行tasks</p>\n<ul>\n<li>glob 需要处理的文件</li>\n<li>opts <a href=\"https://github.com/shama/gaze\" target=\"_blank\" rel=\"external\">gaze</a></li>\n<li>tasks array 文件变化时要跑的任务</li>\n<li>cb　callback function</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.watch(<span class=\"string\">'js/**/*.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>event.type added, changed, deleted or renamed.</li>\n<li>event.path 触发时间的文件的路径(The path to the file that triggered the event.)</li>\n</ul>\n<h1 id=\"Gulp-plugin\"><a href=\"#Gulp-plugin\" class=\"headerlink\" title=\"Gulp plugin\"></a>Gulp plugin</h1><p><a href=\"http://www.open-open.com/lib/view/open1426232157888.html\" target=\"_blank\" rel=\"external\">慢慢整理</a></p>\n<h2 id=\"HTML-amp-CSS\"><a href=\"#HTML-amp-CSS\" class=\"headerlink\" title=\"HTML&amp;CSS\"></a>HTML&amp;CSS</h2><ul>\n<li><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"external\">autoprefixer</a> - parse CSS and add vendor prefixes to rules by Can I Use.</li>\n</ul>\n<p><a href=\"http://yaowenjie.github.io/front-end/using-gulp-with-babel\" target=\"_blank\" rel=\"external\">H1</a><br><a href=\"https://www.talkingcoder.com/article/6367591948982623481\" target=\"_blank\" rel=\"external\">H2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h1><blockquote>\n<p>gulp 是基于 Nodejs 的自动任务运行器，能自动化地完成javascript/coffee/sass/less/html/image/css<br>等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些<br>步骤。在实现上， gulp<br>借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单.</p>\n</blockquote>\n<p><img src=\"http://o7d3ayvg2.bkt.clouddn.com/gulp-detail.jpg\" alt=\"\"></p>\n<h1 id=\"推荐使用nvm\"><a href=\"#推荐使用nvm\" class=\"headerlink\" title=\"推荐使用nvm\"></a>推荐使用nvm</h1><p><a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">NVM</a>{:target=”_block”}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp --global --save-dev</div></pre></td></tr></table></figure>\n<h1 id=\"Gulpfile-js\"><a href=\"#Gulpfile-js\" class=\"headerlink\" title=\"Gulpfile.js\"></a>Gulpfile.js</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, () =&gt; &#123;</div><div class=\"line\">    gulp.src()</div><div class=\"line\">        .pipe()</div><div class=\"line\">        .pipe()</div><div class=\"line\">        ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"gulp-src-globs-options\"><a href=\"#gulp-src-globs-options\" class=\"headerlink\" title=\"gulp.src(globs[, options])\"></a>gulp.src(globs[, options])</h2><blockquote>\n<p>Emits files matching provided glob or an array of globs.<br>Returns a <a href=\"http://nodejs.org/api/stream.html\" target=\"_blank\" rel=\"external\">stream</a>{:target=”_block”} of<br><a href=\"https://github.com/gulpjs/vinyl-fs\" target=\"_blank\" rel=\"external\">Vinyl</a>{:target=”_block”} files that can be<br><a href=\"https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\" target=\"_blank\" rel=\"external\">piped</a>{:target=”_block”} to plugins.</p>\n<p>读取单个或一组文件，　返回一个可以被接入其他插件的文件流。</p>\n</blockquote>\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options {}\"></a>options {}</h3><ul>\n<li><p>options.buffer boolean/true<br>false的时候　返回不带缓冲的文件流</p>\n</li>\n<li><p>options.read boolean/true</p>\n</li>\n</ul>\n<p>返回null　不读取文件</p>\n<ul>\n<li>options.base string everyting before glob starts <a href=\"https://github.com/contra/glob2base\" target=\"_blank\" rel=\"external\">gulp2base</a></li>\n</ul>\n<h2 id=\"gulp-dest-path-options\"><a href=\"#gulp-dest-path-options\" class=\"headerlink\" title=\"gulp.dest(path[, options])\"></a>gulp.dest(path[, options])</h2><p>可扩展，具有写入功能。　反向输出文件可多个，当文件不存在的时候可以自动创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(<span class=\"string\">'./client/templates/*.jade'</span>)</div><div class=\"line\">  .pipe(jade())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./build/templates'</span>))</div><div class=\"line\">  .pipe(minify())</div><div class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'./build/minified_templates'</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>path 输出地址</li>\n</ul>\n<h3 id=\"options-1\"><a href=\"#options-1\" class=\"headerlink\" title=\"options {}\"></a>options {}</h3><ul>\n<li>options.cwd process.cwd()：前脚本的工作目录的路径 当文件输出路径为相对路径将会用到</li>\n<li>options.mode 0777 指定被创建文件夹的权限</li>\n</ul>\n<h2 id=\"gulp-task-name-deps-fn\"><a href=\"#gulp-task-name-deps-fn\" class=\"headerlink\" title=\"gulp.task(name[, deps], fn)\"></a>gulp.task(name[, deps], fn)</h2><p>创建gulp任务</p>\n<ul>\n<li>name string 任务名</li>\n<li>deps stringArray 任务依赖，被依赖的任务会返回当前任务的事件流所以会先执行。</li>\n<li>fn fun 当前任务的内容</li>\n</ul>\n<h2 id=\"gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb\"><a href=\"#gulp-watch-glob-opts-tasks-or-gulp-watch-glob-opts-cb\" class=\"headerlink\" title=\"gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])\"></a>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</h2><p>监听文件变化，当文件变化时执行tasks</p>\n<ul>\n<li>glob 需要处理的文件</li>\n<li>opts <a href=\"https://github.com/shama/gaze\" target=\"_blank\" rel=\"external\">gaze</a></li>\n<li>tasks array 文件变化时要跑的任务</li>\n<li>cb　callback function</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.watch(<span class=\"string\">'js/**/*.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'File '</span> + event.path + <span class=\"string\">' was '</span> + event.type + <span class=\"string\">', running tasks...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li>event.type added, changed, deleted or renamed.</li>\n<li>event.path 触发时间的文件的路径(The path to the file that triggered the event.)</li>\n</ul>\n<h1 id=\"Gulp-plugin\"><a href=\"#Gulp-plugin\" class=\"headerlink\" title=\"Gulp plugin\"></a>Gulp plugin</h1><p><a href=\"http://www.open-open.com/lib/view/open1426232157888.html\" target=\"_blank\" rel=\"external\">慢慢整理</a></p>\n<h2 id=\"HTML-amp-CSS\"><a href=\"#HTML-amp-CSS\" class=\"headerlink\" title=\"HTML&amp;CSS\"></a>HTML&amp;CSS</h2><ul>\n<li><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"external\">autoprefixer</a> - parse CSS and add vendor prefixes to rules by Can I Use.</li>\n</ul>\n<p><a href=\"http://yaowenjie.github.io/front-end/using-gulp-with-babel\" target=\"_blank\" rel=\"external\">H1</a><br><a href=\"https://www.talkingcoder.com/article/6367591948982623481\" target=\"_blank\" rel=\"external\">H2</a></p>\n"},{"layout":"post","title":"Redraw and Rearrangement","subtitle":"Redraw tab","date":"2016-05-23T07:08:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n### 重绘\n\n重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。\n\n\n### 重排\n\n重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作：\n\n- DOM元素的几何属性变化\n当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的.\n\n- DOM树的结构变化\n当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。\n\n- 获取某些属性\n浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。\n\n##　减少重排的方法\n\n- 将多次改变样式属性的操作合并成一次操作\n- 将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。\n- 在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。\n- 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n- 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。\n\n\n","source":"_posts/2016-06-28-redraw-and-rearrangement.markdown","raw":"---\nlayout:     post\ntitle:      \"Redraw and Rearrangement\"\nsubtitle:   \"Redraw tab\"\ndate:       2016-05-23 15:08\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - HTML\n---\n\n### 重绘\n\n重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。\n\n\n### 重排\n\n重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作：\n\n- DOM元素的几何属性变化\n当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的.\n\n- DOM树的结构变化\n当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。\n\n- 获取某些属性\n浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。\n\n##　减少重排的方法\n\n- 将多次改变样式属性的操作合并成一次操作\n- 将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。\n- 在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。\n- 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n- 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。\n\n\n","slug":"2016-06-28-redraw-and-rearrangement","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74t000gs7t731cwuhin","content":"<h3 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h3><p>重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。</p>\n<h3 id=\"重排\"><a href=\"#重排\" class=\"headerlink\" title=\"重排\"></a>重排</h3><p>重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作：</p>\n<ul>\n<li><p>DOM元素的几何属性变化<br>当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的.</p>\n</li>\n<li><p>DOM树的结构变化<br>当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。</p>\n</li>\n<li><p>获取某些属性<br>浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。</p>\n</li>\n</ul>\n<p>##　减少重排的方法</p>\n<ul>\n<li>将多次改变样式属性的操作合并成一次操作</li>\n<li>将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</li>\n<li>在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。</li>\n<li>由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。</li>\n<li>在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h3><p>重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。</p>\n<h3 id=\"重排\"><a href=\"#重排\" class=\"headerlink\" title=\"重排\"></a>重排</h3><p>重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作：</p>\n<ul>\n<li><p>DOM元素的几何属性变化<br>当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的.</p>\n</li>\n<li><p>DOM树的结构变化<br>当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。</p>\n</li>\n<li><p>获取某些属性<br>浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。</p>\n</li>\n</ul>\n<p>##　减少重排的方法</p>\n<ul>\n<li>将多次改变样式属性的操作合并成一次操作</li>\n<li>将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</li>\n<li>在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。</li>\n<li>由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。</li>\n<li>在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。</li>\n</ul>\n"},{"layout":"post","title":"AMD CDM COMMONJS","subtitle":"前端模块化","date":"2016-07-04T07:23:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n### CMD\nCMD推崇依赖就近，可以把依赖写进你的代码中的任意一行。\n```javascript\ndefine(function(require, exports, module) {\n    var a = require('./a');\n    a.doSomething();\n    var b = require('./b');\n    b.doSomething();\n})；\n```\n\n### AMD\nAMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。\n```javascript\ndefine(['./a','./b'],function(a,b) {\n     a.doSomething()\n     b.doSomething()\n});\n```\n\n### COMMONJS\nCommonJS是服务端模块的规范，Node.js采用了这个规范。\n根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。\n```javascript\nconsole.log(\"evaluating example.js\");\n\nvar invisible = function () {\n    console.log(\"invisible\");\n};\n\nexports.message = \"hi\";\n\nexports.say = function () {\n    console.log(message);\n};\n\nvar example = require('./example.js');\n\n{\n    message: \"hi\",\n    say: [Function]\n}\n\nvar example = require('./example');\n```\n\nCommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n- 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n- 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n- 都在向着 COMMON 的方向进化：兼容不同风格，兼容浏览器和服务器两种环境\n\n### AMD规范与CommonJS规范的兼容性\nCommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。\n\n由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。\n\n\n### UMD\n因为AMD，CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范。于是，UMD（Universal Module Definition，称之为通用模块规范）规范诞生了。\n\n客观来说，这个UMD规范看起来的确没有AMD和CommonJS规范简约。但是它支持AMD和CommonJS规范，同时还支持古老的全局模块模式。\n\n```javascript\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.jQuery);\n    }\n}(this, function ($) {\n    //    methods\n    function myFunc(){};\n\n    //    exposed public method\n    return myFunc;\n}));\n```\n\n> 人觉得UMD规范更像一个语法糖。应用UMD规范的js文件其实就是一个立即执行函数。函数有两个参数，第一个参数是当前\n> 运行时环境，第二个参数是模块的定义体。在执行UMD规范时，会优先判断是当前环境是否支持AMD环境，然后再检验是否支\n> 持CommonJS环境，否则认为当前环境为浏览器环境（window）。当然具体的判断顺序其实是可以调换的。\n\n```javascript\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.jQuery, root._);\n    }\n}(this, function ($, _) {\n    //    methods\n    function a(){};    //    private because it's not returned (see below)\n    function b(){};    //    public because it's returned\n    function c(){};    //    public because it's returned\n\n    //    exposed public methods\n    return {\n        b: b,\n        c: c\n    }\n}));\n```\n","source":"_posts/2016-07-08-frontend-module-definition.markdown","raw":"---\nlayout:     post\ntitle:      \"AMD CDM COMMONJS\"\nsubtitle:   \"前端模块化\"\ndate:       2016-07-04 15:23\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Frontend\n---\n\n### CMD\nCMD推崇依赖就近，可以把依赖写进你的代码中的任意一行。\n```javascript\ndefine(function(require, exports, module) {\n    var a = require('./a');\n    a.doSomething();\n    var b = require('./b');\n    b.doSomething();\n})；\n```\n\n### AMD\nAMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。\n```javascript\ndefine(['./a','./b'],function(a,b) {\n     a.doSomething()\n     b.doSomething()\n});\n```\n\n### COMMONJS\nCommonJS是服务端模块的规范，Node.js采用了这个规范。\n根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。\n```javascript\nconsole.log(\"evaluating example.js\");\n\nvar invisible = function () {\n    console.log(\"invisible\");\n};\n\nexports.message = \"hi\";\n\nexports.say = function () {\n    console.log(message);\n};\n\nvar example = require('./example.js');\n\n{\n    message: \"hi\",\n    say: [Function]\n}\n\nvar example = require('./example');\n```\n\nCommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。\n\n因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：\n- 采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）\n- 虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。\n- 都在向着 COMMON 的方向进化：兼容不同风格，兼容浏览器和服务器两种环境\n\n### AMD规范与CommonJS规范的兼容性\nCommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。\n\n由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。\n\n\n### UMD\n因为AMD，CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范。于是，UMD（Universal Module Definition，称之为通用模块规范）规范诞生了。\n\n客观来说，这个UMD规范看起来的确没有AMD和CommonJS规范简约。但是它支持AMD和CommonJS规范，同时还支持古老的全局模块模式。\n\n```javascript\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.jQuery);\n    }\n}(this, function ($) {\n    //    methods\n    function myFunc(){};\n\n    //    exposed public method\n    return myFunc;\n}));\n```\n\n> 人觉得UMD规范更像一个语法糖。应用UMD规范的js文件其实就是一个立即执行函数。函数有两个参数，第一个参数是当前\n> 运行时环境，第二个参数是模块的定义体。在执行UMD规范时，会优先判断是当前环境是否支持AMD环境，然后再检验是否支\n> 持CommonJS环境，否则认为当前环境为浏览器环境（window）。当然具体的判断顺序其实是可以调换的。\n\n```javascript\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery', 'underscore'], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(require('jquery'), require('underscore'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.jQuery, root._);\n    }\n}(this, function ($, _) {\n    //    methods\n    function a(){};    //    private because it's not returned (see below)\n    function b(){};    //    public because it's returned\n    function c(){};    //    public because it's returned\n\n    //    exposed public methods\n    return {\n        b: b,\n        c: c\n    }\n}));\n```\n","slug":"2016-07-08-frontend-module-definition","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d74x000is7t7eg4z752w","content":"<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD推崇依赖就近，可以把依赖写进你的代码中的任意一行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\">    a.doSomething();</div><div class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</div><div class=\"line\">    b.doSomething();</div><div class=\"line\">&#125;)；</div></pre></td></tr></table></figure></p>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>AMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'./a'</span>,<span class=\"string\">'./b'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">     a.doSomething()</div><div class=\"line\">     b.doSomething()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"COMMONJS\"><a href=\"#COMMONJS\" class=\"headerlink\" title=\"COMMONJS\"></a>COMMONJS</h3><p>CommonJS是服务端模块的规范，Node.js采用了这个规范。<br>根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluating example.js\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invisible = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"invisible\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">exports.message = <span class=\"string\">\"hi\"</span>;</div><div class=\"line\"></div><div class=\"line\">exports.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.js'</span>);</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">\"hi\"</span>,</div><div class=\"line\">    <span class=\"attr\">say</span>: [<span class=\"built_in\">Function</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example'</span>);</div></pre></td></tr></table></figure></p>\n<p>CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 COMMON 的方向进化：兼容不同风格，兼容浏览器和服务器两种环境</li>\n</ul>\n<h3 id=\"AMD规范与CommonJS规范的兼容性\"><a href=\"#AMD规范与CommonJS规范的兼容性\" class=\"headerlink\" title=\"AMD规范与CommonJS规范的兼容性\"></a>AMD规范与CommonJS规范的兼容性</h3><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。</p>\n<p>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p>因为AMD，CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范。于是，UMD（Universal Module Definition，称之为通用模块规范）规范诞生了。</p>\n<p>客观来说，这个UMD规范看起来的确没有AMD和CommonJS规范简约。但是它支持AMD和CommonJS规范，同时还支持古老的全局模块模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS-like</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Browser globals (root is window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    methods</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    exposed public method</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>人觉得UMD规范更像一个语法糖。应用UMD规范的js文件其实就是一个立即执行函数。函数有两个参数，第一个参数是当前<br>运行时环境，第二个参数是模块的定义体。在执行UMD规范时，会优先判断是当前环境是否支持AMD环境，然后再检验是否支<br>持CommonJS环境，否则认为当前环境为浏览器环境（window）。当然具体的判断顺序其实是可以调换的。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS-like</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>), <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Browser globals (root is window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery, root._);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    methods</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    private because it's not returned (see below)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    public because it's returned</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    public because it's returned</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    exposed public methods</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD推崇依赖就近，可以把依赖写进你的代码中的任意一行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>);</div><div class=\"line\">    a.doSomething();</div><div class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</div><div class=\"line\">    b.doSomething();</div><div class=\"line\">&#125;)；</div></pre></td></tr></table></figure></p>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>AMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'./a'</span>,<span class=\"string\">'./b'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">     a.doSomething()</div><div class=\"line\">     b.doSomething()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"COMMONJS\"><a href=\"#COMMONJS\" class=\"headerlink\" title=\"COMMONJS\"></a>COMMONJS</h3><p>CommonJS是服务端模块的规范，Node.js采用了这个规范。<br>根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"evaluating example.js\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invisible = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"invisible\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">exports.message = <span class=\"string\">\"hi\"</span>;</div><div class=\"line\"></div><div class=\"line\">exports.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example.js'</span>);</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">\"hi\"</span>,</div><div class=\"line\">    <span class=\"attr\">say</span>: [<span class=\"built_in\">Function</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">'./example'</span>);</div></pre></td></tr></table></figure></p>\n<p>CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>\n<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>\n<ul>\n<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>\n<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>\n<li>都在向着 COMMON 的方向进化：兼容不同风格，兼容浏览器和服务器两种环境</li>\n</ul>\n<h3 id=\"AMD规范与CommonJS规范的兼容性\"><a href=\"#AMD规范与CommonJS规范的兼容性\" class=\"headerlink\" title=\"AMD规范与CommonJS规范的兼容性\"></a>AMD规范与CommonJS规范的兼容性</h3><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。</p>\n<p>由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p>因为AMD，CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范。于是，UMD（Universal Module Definition，称之为通用模块规范）规范诞生了。</p>\n<p>客观来说，这个UMD规范看起来的确没有AMD和CommonJS规范简约。但是它支持AMD和CommonJS规范，同时还支持古老的全局模块模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS-like</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Browser globals (root is window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    methods</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    exposed public method</span></div><div class=\"line\">    <span class=\"keyword\">return</span> myFunc;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>人觉得UMD规范更像一个语法糖。应用UMD规范的js文件其实就是一个立即执行函数。函数有两个参数，第一个参数是当前<br>运行时环境，第二个参数是模块的定义体。在执行UMD规范时，会优先判断是当前环境是否支持AMD环境，然后再检验是否支<br>持CommonJS环境，否则认为当前环境为浏览器环境（window）。当然具体的判断顺序其实是可以调换的。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">        <span class=\"comment\">// AMD</span></div><div class=\"line\">        define([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>], factory);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Node, CommonJS-like</span></div><div class=\"line\">        <span class=\"built_in\">module</span>.exports = factory(<span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>), <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Browser globals (root is window)</span></div><div class=\"line\">        root.returnExports = factory(root.jQuery, root._);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;(<span class=\"keyword\">this</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//    methods</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    private because it's not returned (see below)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    public because it's returned</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;&#125;;    <span class=\"comment\">//    public because it's returned</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//    exposed public methods</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">b</span>: b,</div><div class=\"line\">        <span class=\"attr\">c</span>: c</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"javascript source code","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"### Object-assign\n> Object.assign({'a':1, 'b':2}, {'c':3})\n> Object.assign({}, {'a':1, 'b':2}, {'c':3})\n\n```javascript\n'use strict'\n// 返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable\n\nfunction ToObject(val) {\n    if (val == null) {\n        throw new TypeError('Object.assign cannot be called with null or undefined')\n    }\n\n    return Object(val)\n}\n\nfunction ownEnumerableKeys(obj) {\n    // 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n    var keys = Object.getOwnPropertyNames(obj)\n\n    // ES6 返回一个数组，该数组包含了指定对象自身的（非继承的）所有 symbol 属性键。\n    if (Object.getOwnPropertySymbols) {\n        keys = keys.concat(Object.getOwnPropertySymbols(obj))\n    }\n\n    return keys.filter(function (key) {\n        return propIsEnumerable.call(obj, key)\n    })\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from\n\tvar keys\n\tvar to = ToObject(target)\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s]\n\t\tkeys = ownEnumerableKeys(Object(from))\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]]\n\t\t}\n\t}\n\n\treturn to\n}\n```\n\n### function.bind()\n\n```javascript\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice(arguments, 1),\n  F = function(){},\n  self = this,\n  bound = function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply((this instanceof F ? this : context), finalArgs);\n  };\n\n  F.prototype = self.prototype;\n  bound.prototype = new F();\n  return bound;\n};\n\nFunction.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(\n              this instanceof fNOP && oThis ? this : oThis || window,\n              aArgs.concat(Array.prototype.slice.call(arguments))\n          );\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n\nfunction sub_curry(fn /*, variable number of args */) {\n    var args = [].slice.call(arguments, 1);\n    return function () {\n        return fn.apply(this, args.concat(toArray(arguments)));\n    };\n}\n\nfunction curry(fn, length) {\n    // capture fn's # of parameters\n    length = length || fn.length;\n    return function () {\n        if (arguments.length < length) {\n            // not all arguments have been specified. Curry once more.\n            var combined = [fn].concat(toArray(arguments));\n            return length - arguments.length > 0\n                ? curry(sub_curry.apply(this, combined), length - arguments.length)\n                : sub_curry.call(this, combined );\n        } else {\n            // all arguments have been specified, actually call function\n            return fn.apply(this, arguments);\n        }\n    };\n}\n```\n","source":"_posts/2016-09-05-javascript-source-code.markdown","raw":"---\nlayout:     post\ntitle:      \"javascript source code\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - javascript\n---\n### Object-assign\n> Object.assign({'a':1, 'b':2}, {'c':3})\n> Object.assign({}, {'a':1, 'b':2}, {'c':3})\n\n```javascript\n'use strict'\n// 返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable\n\nfunction ToObject(val) {\n    if (val == null) {\n        throw new TypeError('Object.assign cannot be called with null or undefined')\n    }\n\n    return Object(val)\n}\n\nfunction ownEnumerableKeys(obj) {\n    // 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n    var keys = Object.getOwnPropertyNames(obj)\n\n    // ES6 返回一个数组，该数组包含了指定对象自身的（非继承的）所有 symbol 属性键。\n    if (Object.getOwnPropertySymbols) {\n        keys = keys.concat(Object.getOwnPropertySymbols(obj))\n    }\n\n    return keys.filter(function (key) {\n        return propIsEnumerable.call(obj, key)\n    })\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from\n\tvar keys\n\tvar to = ToObject(target)\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s]\n\t\tkeys = ownEnumerableKeys(Object(from))\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]]\n\t\t}\n\t}\n\n\treturn to\n}\n```\n\n### function.bind()\n\n```javascript\nFunction.prototype.bind = function(context){\n  var args = Array.prototype.slice(arguments, 1),\n  F = function(){},\n  self = this,\n  bound = function(){\n      var innerArgs = Array.prototype.slice.call(arguments);\n      var finalArgs = args.concat(innerArgs);\n      return self.apply((this instanceof F ? this : context), finalArgs);\n  };\n\n  F.prototype = self.prototype;\n  bound.prototype = new F();\n  return bound;\n};\n\nFunction.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(\n              this instanceof fNOP && oThis ? this : oThis || window,\n              aArgs.concat(Array.prototype.slice.call(arguments))\n          );\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n\nfunction sub_curry(fn /*, variable number of args */) {\n    var args = [].slice.call(arguments, 1);\n    return function () {\n        return fn.apply(this, args.concat(toArray(arguments)));\n    };\n}\n\nfunction curry(fn, length) {\n    // capture fn's # of parameters\n    length = length || fn.length;\n    return function () {\n        if (arguments.length < length) {\n            // not all arguments have been specified. Curry once more.\n            var combined = [fn].concat(toArray(arguments));\n            return length - arguments.length > 0\n                ? curry(sub_curry.apply(this, combined), length - arguments.length)\n                : sub_curry.call(this, combined );\n        } else {\n            // all arguments have been specified, actually call function\n            return fn.apply(this, arguments);\n        }\n    };\n}\n```\n","slug":"2016-09-05-javascript-source-code","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d750000ls7t7ix6yg9wl","content":"<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object-assign\"></a>Object-assign</h3><blockquote>\n<p>Object.assign({‘a’:1, ‘b’:2}, {‘c’:3})<br>Object.assign({}, {‘a’:1, ‘b’:2}, {‘c’:3})</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> propIsEnumerable = <span class=\"built_in\">Object</span>.prototype.propertyIsEnumerable</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ToObject</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (val == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Object.assign cannot be called with null or undefined'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>(val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ownEnumerableKeys</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</span></div><div class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ES6 返回一个数组，该数组包含了指定对象自身的（非继承的）所有 symbol 属性键。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.getOwnPropertySymbols) &#123;</div><div class=\"line\">        keys = keys.concat(<span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> keys.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> propIsEnumerable.call(obj, key)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assign || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">from</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys</div><div class=\"line\">\t<span class=\"keyword\">var</span> to = ToObject(target)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> s = <span class=\"number\">1</span>; s &lt; <span class=\"built_in\">arguments</span>.length; s++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">from</span> = <span class=\"built_in\">arguments</span>[s]</div><div class=\"line\">\t\tkeys = ownEnumerableKeys(<span class=\"built_in\">Object</span>(<span class=\"keyword\">from</span>))</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">\t\t\tto[keys[i]] = <span class=\"keyword\">from</span>[keys[i]]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> to</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"function-bind\"><a href=\"#function-bind\" class=\"headerlink\" title=\"function.bind()\"></a>function.bind()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</div><div class=\"line\">  F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  self = <span class=\"keyword\">this</span>,</div><div class=\"line\">  bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</div><div class=\"line\">      <span class=\"keyword\">return</span> self.apply((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F ? <span class=\"keyword\">this</span> : context), finalArgs);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = self.prototype;</div><div class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">  <span class=\"keyword\">return</span> bound;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</div><div class=\"line\">        fToBind = <span class=\"keyword\">this</span>,</div><div class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(</div><div class=\"line\">              <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP &amp;&amp; oThis ? <span class=\"keyword\">this</span> : oThis || <span class=\"built_in\">window</span>,</div><div class=\"line\">              aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\">          );</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</div><div class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub_curry</span>(<span class=\"params\">fn <span class=\"regexp\">/*, variable number of args */</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args.concat(toArray(<span class=\"built_in\">arguments</span>)));</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn, length</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// capture fn's # of parameters</span></div><div class=\"line\">    length = length || fn.length;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; length) &#123;</div><div class=\"line\">            <span class=\"comment\">// not all arguments have been specified. Curry once more.</span></div><div class=\"line\">            <span class=\"keyword\">var</span> combined = [fn].concat(toArray(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">            <span class=\"keyword\">return</span> length - <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">0</span></div><div class=\"line\">                ? curry(sub_curry.apply(<span class=\"keyword\">this</span>, combined), length - <span class=\"built_in\">arguments</span>.length)</div><div class=\"line\">                : sub_curry.call(<span class=\"keyword\">this</span>, combined );</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// all arguments have been specified, actually call function</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object-assign\"></a>Object-assign</h3><blockquote>\n<p>Object.assign({‘a’:1, ‘b’:2}, {‘c’:3})<br>Object.assign({}, {‘a’:1, ‘b’:2}, {‘c’:3})</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"><span class=\"comment\">// 返回一个布尔值，表明指定的属性名是否是当前对象可枚举的自身属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> propIsEnumerable = <span class=\"built_in\">Object</span>.prototype.propertyIsEnumerable</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ToObject</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (val == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Object.assign cannot be called with null or undefined'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>(val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ownEnumerableKeys</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</span></div><div class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ES6 返回一个数组，该数组包含了指定对象自身的（非继承的）所有 symbol 属性键。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.getOwnPropertySymbols) &#123;</div><div class=\"line\">        keys = keys.concat(<span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> keys.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> propIsEnumerable.call(obj, key)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assign || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, source</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">from</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> keys</div><div class=\"line\">\t<span class=\"keyword\">var</span> to = ToObject(target)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> s = <span class=\"number\">1</span>; s &lt; <span class=\"built_in\">arguments</span>.length; s++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">from</span> = <span class=\"built_in\">arguments</span>[s]</div><div class=\"line\">\t\tkeys = ownEnumerableKeys(<span class=\"built_in\">Object</span>(<span class=\"keyword\">from</span>))</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">\t\t\tto[keys[i]] = <span class=\"keyword\">from</span>[keys[i]]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> to</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"function-bind\"><a href=\"#function-bind\" class=\"headerlink\" title=\"function.bind()\"></a>function.bind()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</div><div class=\"line\">  F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">  self = <span class=\"keyword\">this</span>,</div><div class=\"line\">  bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> innerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> finalArgs = args.concat(innerArgs);</div><div class=\"line\">      <span class=\"keyword\">return</span> self.apply((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F ? <span class=\"keyword\">this</span> : context), finalArgs);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  F.prototype = self.prototype;</div><div class=\"line\">  bound.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">  <span class=\"keyword\">return</span> bound;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</div><div class=\"line\">        fToBind = <span class=\"keyword\">this</span>,</div><div class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(</div><div class=\"line\">              <span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP &amp;&amp; oThis ? <span class=\"keyword\">this</span> : oThis || <span class=\"built_in\">window</span>,</div><div class=\"line\">              aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\">          );</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</div><div class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub_curry</span>(<span class=\"params\">fn <span class=\"regexp\">/*, variable number of args */</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, args.concat(toArray(<span class=\"built_in\">arguments</span>)));</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn, length</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// capture fn's # of parameters</span></div><div class=\"line\">    length = length || fn.length;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; length) &#123;</div><div class=\"line\">            <span class=\"comment\">// not all arguments have been specified. Curry once more.</span></div><div class=\"line\">            <span class=\"keyword\">var</span> combined = [fn].concat(toArray(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">            <span class=\"keyword\">return</span> length - <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">0</span></div><div class=\"line\">                ? curry(sub_curry.apply(<span class=\"keyword\">this</span>, combined), length - <span class=\"built_in\">arguments</span>.length)</div><div class=\"line\">                : sub_curry.call(<span class=\"keyword\">this</span>, combined );</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// all arguments have been specified, actually call function</span></div><div class=\"line\">            <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"webpack","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"webpack-bg.png","header-mask":0.3,"catalog":true,"_content":"\n### Webpack\nTwo core philosophies of Webpack are:\n* Everything is a module — Just like JS files can be “modules”, everything else (CSS, Images, HTML) can also be modules. That is, you can require(“myJSfile.js”) or require(“myCSSfile.css”). This mean we can split any artifact into smaller manageable pieces, reuse them and so on.\n* Load only “what” you need and “when” you need — Typically module bundlers take all the modules and generate a large single output “bundle.js” file. But in many real-world apps, this “bundle.js” could be 10MB-15MB and could take forever to load! So Webpack has various features to split your code and generate multiple “bundle” files, and also load parts of the app asynchronously so that you just load what you need and when you need it.\n\n### Install\n```javascript\n// golbal install\nnpm install -g webpack\n\n// install in your local workspace\nnpm install --save-dev webpack\n\n// install webpack dev server\nnpm install webpack-dev-server --save\n```\n\n### Devtool\n> source-map: 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度\n\n> cheap-module-source-map: 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便\n\n> eval-source-map: 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项\n\n> cheap-module-eval-source-map: 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点\n\n### Config\n\n```javascript\nvar webapck = require('webpack')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/index.js',\n\n    output: {\n        path: __dirname + '/public',\n        publicPath: '/',\n        filename: 'bundle.js'\n    },\n\n    module: {\n        loaders: [\n            { test: /\\.json$/, loader: 'json' },\n            { test: /\\.jsx?$/, include: '/public/src', loader: 'babel' },\n            { test: /\\.css$/, loader: 'style!css?redules!postcss' }, // 感叹号的作用在于使同一文件能够使用不同类型的loader\n            { test: /\\.png$/, loader: 'url-loader?limit=1024' },\n            { test: /\\.png$/, loader: 'url-loader', query: { limit: 1024 } },\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loader: 'babel',\n                query: {\n                    presets: ['react', 'es2015']\n                }\n            }\n        ]\n    },\n\n    //.bablerc\n    // {\n    //  \"presets\": [\"react\", \"es2015\"]\n    // },\n\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n\n    postcss: {\n        require('autoprefixer')\n    },\n\n    plugins: [\n        new HtmlWebpackPlugin{\n            template: './public/index.template.html',\n            inject: true\n        },\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n\n    devtool: 'source-map',\n    devServer: {\n        colors: true,\n        historyApoFailback: true,\n        inLine: true,\n        hot: true,\n        contentBase: './public'\n    }\n\n\n}\n```\n###### Loader\n> test: 匹配loaders所处理文件的拓展名的正则表达式\n> loader: loader名\n> include/exclude: 手动添加必须处理或者屏蔽不需要处理的文件\n> query: 为loaders提供额外的设置选项\n\n###### DevServer\n> contentBase: 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\n> port: 设置默认监听端口，如果省略，默认为”8080“\n> inline: 设置为true，当源文件改变时会自动刷新页面\n> colors: 设置为true，使终端输出的文件为彩色的\n> historyApiFallback: 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n\n### Plugin\n###### PostCSS + autoprefixer\n\n ```javascript\n    module: {\n        loaders: [{ test: /\\.css$/, loader: 'style!css?modules!postcss' }]\n    },\n    postcss: [\n        require('autoprefixer')//调用autoprefixer插件\n    ],\n ```\n\n###### webpack.BannerPlugin\n> 版权声明插件\n\n```javascript\n    new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n```\n\n###### HtmlWebpackPlugin\n```javascript\n    new HtmlWebpackPlugin({\n        template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n    })\n```\n\n###### Hot Module Replacement\n```javascript\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n    devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n    }\n```\n\n###### OccurenceOrderPlugin\n> 为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n\n```javascript\n    new webpack.optimize.OccurenceOrderPlugin()\n```\n\n###### UglifyJsPlugin\n> 压缩JS代码\n\n ```javascript\n    new webpack.optimize.UglifyJsPlugin()\n ```\n\n###### ExtractTextPlugin\n> 分离CSS和JS文件\n\n```javascript\n    new ExtractTextPlugin(\"style.css\")\n```\n\n### Caching\n> 缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\n```javascript\n    output: {\n       path: __dirname + \"/build\",\n       filename: \"[name]-[hash].js\"\n    },\n    plugins: [\n        new ExtractTextPlugin(\"[name]-[hash].css\")\n    ]\n```\n\n### Code Splitting\n> It’s an opt-in feature. You can define split points in your code base. Webpack takes care of the dependencies, output files and runtime stuff.\n\n###### CommonJS: require.ensure\n> The require.ensure method ensures that every dependency in dependencies can be synchronously required when calling the callback. callback has no parameter.\n```javascript\n    // require.ensure only loads the modules, it doesn’t evaluate them\n    require.ensure([\"module-a\", \"module-b\"], function() {\n      var a = require(\"module-a\");\n      // ...\n    });\n```\n\n###### AMD: require\n> The AMD spec defines an asynchronous require method with this definition\n```javascript\n    require([\"module-a\", \"module-b\"], function(a, b) {\n      // ...\n    });\n    // Note: AMD require loads and evaluate the modules. In webpack modules are evaluated left to right.\n    // Note: It’s allowed to omit the callback.\n```\n\n###### ES6 Modules\n> Webpack doesn’t support ES6 modules; use require.ensure or require directly depending on which module format your transpiler creates.\n> Luckily, there is a JavaScript API “loader” specification being written to handle the dynamic use case: System.load (or System.import). This API will be the native equivalent to the above require variations. However, most transpilers do not support converting System.load calls to require.ensure so you have to do that directly if you want to make use of dynamic code splitting.\n\n```javascript\n    //static imports\n    import _ from 'lodash'\n\n    // dynamic imports\n    require.ensure([], function() {\n        let contacts = require('./contacts')\n    })\n```\n\n###### Chunk content\n> All dependencies at a split point go into a new chunk. Dependencies are also recursively added.\n> If you pass a function expression (or bound function expression) as callback to the split point, webpack automatically puts all dependencies required in this function expression into the chunk too.\n\n###### Chunk optimization\n> If two chunks contain the same modules, they are merged into one. This can cause chunks to have multiple parents.\n> If a module is available in all parents of a chunk, it’s removed from that chunk.\n> If a chunk contains all modules of another chunk, this is stored. It fulfills multiple chunks.\n\n###### Chunk loading\n> Depending on the configuration option target a runtime logic for chunk loading is added to the bundle. I. e. for the web target chunks are loaded via jsonp. A chunk is only loaded once and parallel requests are merged into one. The runtime checks for loaded chunks whether they fulfill multiple chunks.\n\n\n###### Chunk types\n######### Entry chunk\n> An entry chunk contains the runtime plus a bunch of modules. If the chunk contains the module 0 the runtime executes it. If not, it waits for chunks that contains the module 0 and executes it (every time when there is a chunk with a module 0)\n\n######### Normal chunk\n> A normal chunk contains no runtime. It only contains a bunch of modules. The structure depends on the chunk loading algorithm. I. e. for jsonp the modules are wrapped in a jsonp callback function. The chunk also contains a list of chunk id that it fulfills.\n\n######### Initial chunk (non-entry)\n> An initial chunk is a normal chunk. The only difference is that optimization treats it as more important because it counts toward the initial loading time (like entry chunks). That chunk type can occur in combination with the CommonsChunkPlugin.\n\n```javascript\nvar webpack = require(\"webpack\");\n\nmodule.exports = {\n  entry: {\n    app: \"./app.js\",\n    vendor: [\"jquery\", \"underscore\", ...],\n  },\n  output: {\n    filename: \"bundle.js\"\n  },\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin(/* chunkName= */\"vendor\", /* filename= */\"vendor.bundle.js\")\n  ]\n};\n// This will remove all modules in the vendor chunk from the app chunk. The bundle.js will now contain just your app code, without any of its dependencies. These are in vendor.bundle.js.\n// In your HTML page load vendor.bundle.js before bundle.js.\n<script src=\"vendor.bundle.js\"></script>\n<script src=\"bundle.js\"></script>\n\n\nvar webpack = require(\"webpack\");\nmodule.exports = {\n  entry: { a: \"./a\", b: \"./b\" },\n  output: { filename: \"[name].js\" },\n  plugins: [ new webpack.optimize.CommonsChunkPlugin(\"init.js\") ]\n}\n\n<script src=\"init.js\"></script>\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n```\n###### Optimization\n    * LimitChunkCountPlugin\n    * MinChunkSizePlugin\n    * AggressiveMergingPlugin\n    [Config Plugin List](https://webpack.github.io/docs/list-of-plugins.html){:target=\"_blank\"}\n\n\nhttp://www.pro-react.com/materials/appendixA/\nhttps://github.com/eyasliu/blog/issues/8\nhttp://www.alloyteam.com/2016/02/code-split-by-routes/\nhttp://www.jianshu.com/p/42e11515c10f\n\nhttps://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2\nhttps://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux\nhttps://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo\nhttps://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd\nhttps://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n\n\n\nhttps://gold.xitu.io/post/5842ea76128fe10058a3b4f0\n\n\n\n\nhttps://github.com/gwuhaolin/blog/issues/2\n","source":"_posts/2016-08-17-webpack.markdown","raw":"---\nlayout:     post\ntitle:      \"webpack\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"webpack-bg.png\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - WebPack\n---\n\n### Webpack\nTwo core philosophies of Webpack are:\n* Everything is a module — Just like JS files can be “modules”, everything else (CSS, Images, HTML) can also be modules. That is, you can require(“myJSfile.js”) or require(“myCSSfile.css”). This mean we can split any artifact into smaller manageable pieces, reuse them and so on.\n* Load only “what” you need and “when” you need — Typically module bundlers take all the modules and generate a large single output “bundle.js” file. But in many real-world apps, this “bundle.js” could be 10MB-15MB and could take forever to load! So Webpack has various features to split your code and generate multiple “bundle” files, and also load parts of the app asynchronously so that you just load what you need and when you need it.\n\n### Install\n```javascript\n// golbal install\nnpm install -g webpack\n\n// install in your local workspace\nnpm install --save-dev webpack\n\n// install webpack dev server\nnpm install webpack-dev-server --save\n```\n\n### Devtool\n> source-map: 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度\n\n> cheap-module-source-map: 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便\n\n> eval-source-map: 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项\n\n> cheap-module-eval-source-map: 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点\n\n### Config\n\n```javascript\nvar webapck = require('webpack')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: './src/index.js',\n\n    output: {\n        path: __dirname + '/public',\n        publicPath: '/',\n        filename: 'bundle.js'\n    },\n\n    module: {\n        loaders: [\n            { test: /\\.json$/, loader: 'json' },\n            { test: /\\.jsx?$/, include: '/public/src', loader: 'babel' },\n            { test: /\\.css$/, loader: 'style!css?redules!postcss' }, // 感叹号的作用在于使同一文件能够使用不同类型的loader\n            { test: /\\.png$/, loader: 'url-loader?limit=1024' },\n            { test: /\\.png$/, loader: 'url-loader', query: { limit: 1024 } },\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loader: 'babel',\n                query: {\n                    presets: ['react', 'es2015']\n                }\n            }\n        ]\n    },\n\n    //.bablerc\n    // {\n    //  \"presets\": [\"react\", \"es2015\"]\n    // },\n\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n\n    postcss: {\n        require('autoprefixer')\n    },\n\n    plugins: [\n        new HtmlWebpackPlugin{\n            template: './public/index.template.html',\n            inject: true\n        },\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n\n    devtool: 'source-map',\n    devServer: {\n        colors: true,\n        historyApoFailback: true,\n        inLine: true,\n        hot: true,\n        contentBase: './public'\n    }\n\n\n}\n```\n###### Loader\n> test: 匹配loaders所处理文件的拓展名的正则表达式\n> loader: loader名\n> include/exclude: 手动添加必须处理或者屏蔽不需要处理的文件\n> query: 为loaders提供额外的设置选项\n\n###### DevServer\n> contentBase: 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\n> port: 设置默认监听端口，如果省略，默认为”8080“\n> inline: 设置为true，当源文件改变时会自动刷新页面\n> colors: 设置为true，使终端输出的文件为彩色的\n> historyApiFallback: 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n\n### Plugin\n###### PostCSS + autoprefixer\n\n ```javascript\n    module: {\n        loaders: [{ test: /\\.css$/, loader: 'style!css?modules!postcss' }]\n    },\n    postcss: [\n        require('autoprefixer')//调用autoprefixer插件\n    ],\n ```\n\n###### webpack.BannerPlugin\n> 版权声明插件\n\n```javascript\n    new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n```\n\n###### HtmlWebpackPlugin\n```javascript\n    new HtmlWebpackPlugin({\n        template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n    })\n```\n\n###### Hot Module Replacement\n```javascript\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n    devServer: {\n        colors: true,\n        historyApiFallback: true,\n        inline: true,\n        hot: true\n    }\n```\n\n###### OccurenceOrderPlugin\n> 为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n\n```javascript\n    new webpack.optimize.OccurenceOrderPlugin()\n```\n\n###### UglifyJsPlugin\n> 压缩JS代码\n\n ```javascript\n    new webpack.optimize.UglifyJsPlugin()\n ```\n\n###### ExtractTextPlugin\n> 分离CSS和JS文件\n\n```javascript\n    new ExtractTextPlugin(\"style.css\")\n```\n\n### Caching\n> 缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\n```javascript\n    output: {\n       path: __dirname + \"/build\",\n       filename: \"[name]-[hash].js\"\n    },\n    plugins: [\n        new ExtractTextPlugin(\"[name]-[hash].css\")\n    ]\n```\n\n### Code Splitting\n> It’s an opt-in feature. You can define split points in your code base. Webpack takes care of the dependencies, output files and runtime stuff.\n\n###### CommonJS: require.ensure\n> The require.ensure method ensures that every dependency in dependencies can be synchronously required when calling the callback. callback has no parameter.\n```javascript\n    // require.ensure only loads the modules, it doesn’t evaluate them\n    require.ensure([\"module-a\", \"module-b\"], function() {\n      var a = require(\"module-a\");\n      // ...\n    });\n```\n\n###### AMD: require\n> The AMD spec defines an asynchronous require method with this definition\n```javascript\n    require([\"module-a\", \"module-b\"], function(a, b) {\n      // ...\n    });\n    // Note: AMD require loads and evaluate the modules. In webpack modules are evaluated left to right.\n    // Note: It’s allowed to omit the callback.\n```\n\n###### ES6 Modules\n> Webpack doesn’t support ES6 modules; use require.ensure or require directly depending on which module format your transpiler creates.\n> Luckily, there is a JavaScript API “loader” specification being written to handle the dynamic use case: System.load (or System.import). This API will be the native equivalent to the above require variations. However, most transpilers do not support converting System.load calls to require.ensure so you have to do that directly if you want to make use of dynamic code splitting.\n\n```javascript\n    //static imports\n    import _ from 'lodash'\n\n    // dynamic imports\n    require.ensure([], function() {\n        let contacts = require('./contacts')\n    })\n```\n\n###### Chunk content\n> All dependencies at a split point go into a new chunk. Dependencies are also recursively added.\n> If you pass a function expression (or bound function expression) as callback to the split point, webpack automatically puts all dependencies required in this function expression into the chunk too.\n\n###### Chunk optimization\n> If two chunks contain the same modules, they are merged into one. This can cause chunks to have multiple parents.\n> If a module is available in all parents of a chunk, it’s removed from that chunk.\n> If a chunk contains all modules of another chunk, this is stored. It fulfills multiple chunks.\n\n###### Chunk loading\n> Depending on the configuration option target a runtime logic for chunk loading is added to the bundle. I. e. for the web target chunks are loaded via jsonp. A chunk is only loaded once and parallel requests are merged into one. The runtime checks for loaded chunks whether they fulfill multiple chunks.\n\n\n###### Chunk types\n######### Entry chunk\n> An entry chunk contains the runtime plus a bunch of modules. If the chunk contains the module 0 the runtime executes it. If not, it waits for chunks that contains the module 0 and executes it (every time when there is a chunk with a module 0)\n\n######### Normal chunk\n> A normal chunk contains no runtime. It only contains a bunch of modules. The structure depends on the chunk loading algorithm. I. e. for jsonp the modules are wrapped in a jsonp callback function. The chunk also contains a list of chunk id that it fulfills.\n\n######### Initial chunk (non-entry)\n> An initial chunk is a normal chunk. The only difference is that optimization treats it as more important because it counts toward the initial loading time (like entry chunks). That chunk type can occur in combination with the CommonsChunkPlugin.\n\n```javascript\nvar webpack = require(\"webpack\");\n\nmodule.exports = {\n  entry: {\n    app: \"./app.js\",\n    vendor: [\"jquery\", \"underscore\", ...],\n  },\n  output: {\n    filename: \"bundle.js\"\n  },\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin(/* chunkName= */\"vendor\", /* filename= */\"vendor.bundle.js\")\n  ]\n};\n// This will remove all modules in the vendor chunk from the app chunk. The bundle.js will now contain just your app code, without any of its dependencies. These are in vendor.bundle.js.\n// In your HTML page load vendor.bundle.js before bundle.js.\n<script src=\"vendor.bundle.js\"></script>\n<script src=\"bundle.js\"></script>\n\n\nvar webpack = require(\"webpack\");\nmodule.exports = {\n  entry: { a: \"./a\", b: \"./b\" },\n  output: { filename: \"[name].js\" },\n  plugins: [ new webpack.optimize.CommonsChunkPlugin(\"init.js\") ]\n}\n\n<script src=\"init.js\"></script>\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n```\n###### Optimization\n    * LimitChunkCountPlugin\n    * MinChunkSizePlugin\n    * AggressiveMergingPlugin\n    [Config Plugin List](https://webpack.github.io/docs/list-of-plugins.html){:target=\"_blank\"}\n\n\nhttp://www.pro-react.com/materials/appendixA/\nhttps://github.com/eyasliu/blog/issues/8\nhttp://www.alloyteam.com/2016/02/code-split-by-routes/\nhttp://www.jianshu.com/p/42e11515c10f\n\nhttps://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2\nhttps://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux\nhttps://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo\nhttps://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd\nhttps://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n\n\n\nhttps://gold.xitu.io/post/5842ea76128fe10058a3b4f0\n\n\n\n\nhttps://github.com/gwuhaolin/blog/issues/2\n","slug":"2016-08-17-webpack","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d753000ns7t7d7cpwwgi","content":"<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>Two core philosophies of Webpack are:</p>\n<ul>\n<li>Everything is a module — Just like JS files can be “modules”, everything else (CSS, Images, HTML) can also be modules. That is, you can require(“myJSfile.js”) or require(“myCSSfile.css”). This mean we can split any artifact into smaller manageable pieces, reuse them and so on.</li>\n<li>Load only “what” you need and “when” you need — Typically module bundlers take all the modules and generate a large single output “bundle.js” file. But in many real-world apps, this “bundle.js” could be 10MB-15MB and could take forever to load! So Webpack has various features to split your code and generate multiple “bundle” files, and also load parts of the app asynchronously so that you just load what you need and when you need it.</li>\n</ul>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// golbal install</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// install in your local workspace</span></div><div class=\"line\">npm install --save-dev webpack</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// install webpack dev server</span></div><div class=\"line\">npm install webpack-dev-server --save</div></pre></td></tr></table></figure>\n<h3 id=\"Devtool\"><a href=\"#Devtool\" class=\"headerlink\" title=\"Devtool\"></a>Devtool</h3><blockquote>\n<p>source-map: 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度</p>\n<p>cheap-module-source-map: 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便</p>\n<p>eval-source-map: 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项</p>\n<p>cheap-module-eval-source-map: 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点</p>\n</blockquote>\n<h3 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webapck = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">'/public'</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">'/'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'json'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>, <span class=\"attr\">include</span>: <span class=\"string\">'/public/src'</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css?redules!postcss'</span> &#125;, <span class=\"comment\">// 感叹号的作用在于使同一文件能够使用不同类型的loader</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.png$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=1024'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.png$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">limit</span>: <span class=\"number\">1024</span> &#125; &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">presets</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//.bablerc</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//  \"presets\": [\"react\", \"es2015\"]</span></div><div class=\"line\">    <span class=\"comment\">// &#125;,</span></div><div class=\"line\"></div><div class=\"line\">    resolve: &#123;</div><div class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">postcss</span>: &#123;</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin&#123;</div><div class=\"line\">            <span class=\"attr\">template</span>: <span class=\"string\">'./public/index.template.html'</span>,</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span>,</div><div class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">historyApoFailback</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">inLine</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">'./public'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h6><blockquote>\n<p>test: 匹配loaders所处理文件的拓展名的正则表达式<br>loader: loader名<br>include/exclude: 手动添加必须处理或者屏蔽不需要处理的文件<br>query: 为loaders提供额外的设置选项</p>\n</blockquote>\n<h6 id=\"DevServer\"><a href=\"#DevServer\" class=\"headerlink\" title=\"DevServer\"></a>DevServer</h6><blockquote>\n<p>contentBase: 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）<br>port: 设置默认监听端口，如果省略，默认为”8080“<br>inline: 设置为true，当源文件改变时会自动刷新页面<br>colors: 设置为true，使终端输出的文件为彩色的<br>historyApiFallback: 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</p>\n</blockquote>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><h6 id=\"PostCSS-autoprefixer\"><a href=\"#PostCSS-autoprefixer\" class=\"headerlink\" title=\"PostCSS + autoprefixer\"></a>PostCSS + autoprefixer</h6> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css?modules!postcss'</span> &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">postcss</span>: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)<span class=\"comment\">//调用autoprefixer插件</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<h6 id=\"webpack-BannerPlugin\"><a href=\"#webpack-BannerPlugin\" class=\"headerlink\" title=\"webpack.BannerPlugin\"></a>webpack.BannerPlugin</h6><blockquote>\n<p>版权声明插件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"Copyright Flying Unicorns inc.\"</span>)<span class=\"comment\">//在这个数组中new一个就可以了</span></div></pre></td></tr></table></figure>\n<h6 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span><span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></div><div class=\"line\">devServer: &#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">historyApiFallback</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">inline</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"OccurenceOrderPlugin\"><a href=\"#OccurenceOrderPlugin\" class=\"headerlink\" title=\"OccurenceOrderPlugin\"></a>OccurenceOrderPlugin</h6><blockquote>\n<p>为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin()</div></pre></td></tr></table></figure>\n<h6 id=\"UglifyJsPlugin\"><a href=\"#UglifyJsPlugin\" class=\"headerlink\" title=\"UglifyJsPlugin\"></a>UglifyJsPlugin</h6><blockquote>\n<p>压缩JS代码</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin()</div></pre></td></tr></table></figure>\n<h6 id=\"ExtractTextPlugin\"><a href=\"#ExtractTextPlugin\" class=\"headerlink\" title=\"ExtractTextPlugin\"></a>ExtractTextPlugin</h6><blockquote>\n<p>分离CSS和JS文件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"style.css\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><blockquote>\n<p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">output: &#123;</div><div class=\"line\">   <span class=\"attr\">path</span>: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">   <span class=\"attr\">filename</span>: <span class=\"string\">\"[name]-[hash].js\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name]-[hash].css\"</span>)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a>Code Splitting</h3><blockquote>\n<p>It’s an opt-in feature. You can define split points in your code base. Webpack takes care of the dependencies, output files and runtime stuff.</p>\n</blockquote>\n<h6 id=\"CommonJS-require-ensure\"><a href=\"#CommonJS-require-ensure\" class=\"headerlink\" title=\"CommonJS: require.ensure\"></a>CommonJS: require.ensure</h6><blockquote>\n<p>The require.ensure method ensures that every dependency in dependencies can be synchronously required when calling the callback. callback has no parameter.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// require.ensure only loads the modules, it doesn’t evaluate them</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"AMD-require\"><a href=\"#AMD-require\" class=\"headerlink\" title=\"AMD: require\"></a>AMD: require</h6><blockquote>\n<p>The AMD spec defines an asynchronous require method with this definition<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Note: AMD require loads and evaluate the modules. In webpack modules are evaluated left to right.</span></div><div class=\"line\"><span class=\"comment\">// Note: It’s allowed to omit the callback.</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"ES6-Modules\"><a href=\"#ES6-Modules\" class=\"headerlink\" title=\"ES6 Modules\"></a>ES6 Modules</h6><blockquote>\n<p>Webpack doesn’t support ES6 modules; use require.ensure or require directly depending on which module format your transpiler creates.<br>Luckily, there is a JavaScript API “loader” specification being written to handle the dynamic use case: System.load (or System.import). This API will be the native equivalent to the above require variations. However, most transpilers do not support converting System.load calls to require.ensure so you have to do that directly if you want to make use of dynamic code splitting.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//static imports</span></div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// dynamic imports</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> contacts = <span class=\"built_in\">require</span>(<span class=\"string\">'./contacts'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"Chunk-content\"><a href=\"#Chunk-content\" class=\"headerlink\" title=\"Chunk content\"></a>Chunk content</h6><blockquote>\n<p>All dependencies at a split point go into a new chunk. Dependencies are also recursively added.<br>If you pass a function expression (or bound function expression) as callback to the split point, webpack automatically puts all dependencies required in this function expression into the chunk too.</p>\n</blockquote>\n<h6 id=\"Chunk-optimization\"><a href=\"#Chunk-optimization\" class=\"headerlink\" title=\"Chunk optimization\"></a>Chunk optimization</h6><blockquote>\n<p>If two chunks contain the same modules, they are merged into one. This can cause chunks to have multiple parents.<br>If a module is available in all parents of a chunk, it’s removed from that chunk.<br>If a chunk contains all modules of another chunk, this is stored. It fulfills multiple chunks.</p>\n</blockquote>\n<h6 id=\"Chunk-loading\"><a href=\"#Chunk-loading\" class=\"headerlink\" title=\"Chunk loading\"></a>Chunk loading</h6><blockquote>\n<p>Depending on the configuration option target a runtime logic for chunk loading is added to the bundle. I. e. for the web target chunks are loaded via jsonp. A chunk is only loaded once and parallel requests are merged into one. The runtime checks for loaded chunks whether they fulfill multiple chunks.</p>\n</blockquote>\n<h6 id=\"Chunk-types\"><a href=\"#Chunk-types\" class=\"headerlink\" title=\"Chunk types\"></a>Chunk types</h6><p>######### Entry chunk</p>\n<blockquote>\n<p>An entry chunk contains the runtime plus a bunch of modules. If the chunk contains the module 0 the runtime executes it. If not, it waits for chunks that contains the module 0 and executes it (every time when there is a chunk with a module 0)</p>\n</blockquote>\n<p>######### Normal chunk</p>\n<blockquote>\n<p>A normal chunk contains no runtime. It only contains a bunch of modules. The structure depends on the chunk loading algorithm. I. e. for jsonp the modules are wrapped in a jsonp callback function. The chunk also contains a list of chunk id that it fulfills.</p>\n</blockquote>\n<p>######### Initial chunk (non-entry)</p>\n<blockquote>\n<p>An initial chunk is a normal chunk. The only difference is that optimization treats it as more important because it counts toward the initial loading time (like entry chunks). That chunk type can occur in combination with the CommonsChunkPlugin.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">app</span>: <span class=\"string\">\"./app.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">vendor</span>: [<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>, ...],</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"comment\">/* chunkName= */</span><span class=\"string\">\"vendor\"</span>, <span class=\"comment\">/* filename= */</span><span class=\"string\">\"vendor.bundle.js\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// This will remove all modules in the vendor chunk from the app chunk. The bundle.js will now contain just your app code, without any of its dependencies. These are in vendor.bundle.js.</span></div><div class=\"line\"><span class=\"comment\">// In your HTML page load vendor.bundle.js before bundle.js.</span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"vendor.bundle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"bundle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123; <span class=\"attr\">a</span>: <span class=\"string\">\"./a\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"./b\"</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"attr\">filename</span>: <span class=\"string\">\"[name].js\"</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [ <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">\"init.js\"</span>) ]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;script src=<span class=\"string\">\"init.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"b.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h6 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h6><pre><code>* LimitChunkCountPlugin\n* MinChunkSizePlugin\n* AggressiveMergingPlugin\n[Config Plugin List](https://webpack.github.io/docs/list-of-plugins.html){:target=&quot;_blank&quot;}\n</code></pre><p><a href=\"http://www.pro-react.com/materials/appendixA/\" target=\"_blank\" rel=\"external\">http://www.pro-react.com/materials/appendixA/</a><br><a href=\"https://github.com/eyasliu/blog/issues/8\" target=\"_blank\" rel=\"external\">https://github.com/eyasliu/blog/issues/8</a><br><a href=\"http://www.alloyteam.com/2016/02/code-split-by-routes/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2016/02/code-split-by-routes/</a><br><a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/42e11515c10f</a></p>\n<p><a href=\"https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2</a><br><a href=\"https://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux</a><br><a href=\"https://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo</a><br><a href=\"https://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd</a><br><a href=\"https://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n\" target=\"_blank\" rel=\"external\">https://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n</a></p>\n<p><a href=\"https://gold.xitu.io/post/5842ea76128fe10058a3b4f0\" target=\"_blank\" rel=\"external\">https://gold.xitu.io/post/5842ea76128fe10058a3b4f0</a></p>\n<p><a href=\"https://github.com/gwuhaolin/blog/issues/2\" target=\"_blank\" rel=\"external\">https://github.com/gwuhaolin/blog/issues/2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h3><p>Two core philosophies of Webpack are:</p>\n<ul>\n<li>Everything is a module — Just like JS files can be “modules”, everything else (CSS, Images, HTML) can also be modules. That is, you can require(“myJSfile.js”) or require(“myCSSfile.css”). This mean we can split any artifact into smaller manageable pieces, reuse them and so on.</li>\n<li>Load only “what” you need and “when” you need — Typically module bundlers take all the modules and generate a large single output “bundle.js” file. But in many real-world apps, this “bundle.js” could be 10MB-15MB and could take forever to load! So Webpack has various features to split your code and generate multiple “bundle” files, and also load parts of the app asynchronously so that you just load what you need and when you need it.</li>\n</ul>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// golbal install</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// install in your local workspace</span></div><div class=\"line\">npm install --save-dev webpack</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// install webpack dev server</span></div><div class=\"line\">npm install webpack-dev-server --save</div></pre></td></tr></table></figure>\n<h3 id=\"Devtool\"><a href=\"#Devtool\" class=\"headerlink\" title=\"Devtool\"></a>Devtool</h3><blockquote>\n<p>source-map: 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度</p>\n<p>cheap-module-source-map: 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便</p>\n<p>eval-source-map: 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项</p>\n<p>cheap-module-eval-source-map: 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点</p>\n</blockquote>\n<h3 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webapck = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">'/public'</span>,</div><div class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">'/'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.json$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'json'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>, <span class=\"attr\">include</span>: <span class=\"string\">'/public/src'</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css?redules!postcss'</span> &#125;, <span class=\"comment\">// 感叹号的作用在于使同一文件能够使用不同类型的loader</span></div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.png$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=1024'</span> &#125;,</div><div class=\"line\">            &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.png$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader'</span>, <span class=\"attr\">query</span>: &#123; <span class=\"attr\">limit</span>: <span class=\"number\">1024</span> &#125; &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</div><div class=\"line\">                <span class=\"attr\">loader</span>: <span class=\"string\">'babel'</span>,</div><div class=\"line\">                <span class=\"attr\">query</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">presets</span>: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//.bablerc</span></div><div class=\"line\">    <span class=\"comment\">// &#123;</span></div><div class=\"line\">    <span class=\"comment\">//  \"presets\": [\"react\", \"es2015\"]</span></div><div class=\"line\">    <span class=\"comment\">// &#125;,</span></div><div class=\"line\"></div><div class=\"line\">    resolve: &#123;</div><div class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">''</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">postcss</span>: &#123;</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin&#123;</div><div class=\"line\">            <span class=\"attr\">template</span>: <span class=\"string\">'./public/index.template.html'</span>,</div><div class=\"line\">            <span class=\"attr\">inject</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">devtool</span>: <span class=\"string\">'source-map'</span>,</div><div class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">historyApoFailback</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">inLine</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">contentBase</span>: <span class=\"string\">'./public'</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h6><blockquote>\n<p>test: 匹配loaders所处理文件的拓展名的正则表达式<br>loader: loader名<br>include/exclude: 手动添加必须处理或者屏蔽不需要处理的文件<br>query: 为loaders提供额外的设置选项</p>\n</blockquote>\n<h6 id=\"DevServer\"><a href=\"#DevServer\" class=\"headerlink\" title=\"DevServer\"></a>DevServer</h6><blockquote>\n<p>contentBase: 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）<br>port: 设置默认监听端口，如果省略，默认为”8080“<br>inline: 设置为true，当源文件改变时会自动刷新页面<br>colors: 设置为true，使终端输出的文件为彩色的<br>historyApiFallback: 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</p>\n</blockquote>\n<h3 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h3><h6 id=\"PostCSS-autoprefixer\"><a href=\"#PostCSS-autoprefixer\" class=\"headerlink\" title=\"PostCSS + autoprefixer\"></a>PostCSS + autoprefixer</h6> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">loaders</span>: [&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style!css?modules!postcss'</span> &#125;]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">postcss</span>: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)<span class=\"comment\">//调用autoprefixer插件</span></div><div class=\"line\">],</div></pre></td></tr></table></figure>\n<h6 id=\"webpack-BannerPlugin\"><a href=\"#webpack-BannerPlugin\" class=\"headerlink\" title=\"webpack.BannerPlugin\"></a>webpack.BannerPlugin</h6><blockquote>\n<p>版权声明插件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"Copyright Flying Unicorns inc.\"</span>)<span class=\"comment\">//在这个数组中new一个就可以了</span></div></pre></td></tr></table></figure>\n<h6 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span><span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></div><div class=\"line\">devServer: &#123;</div><div class=\"line\">    <span class=\"attr\">colors</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">historyApiFallback</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">inline</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"OccurenceOrderPlugin\"><a href=\"#OccurenceOrderPlugin\" class=\"headerlink\" title=\"OccurenceOrderPlugin\"></a>OccurenceOrderPlugin</h6><blockquote>\n<p>为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin()</div></pre></td></tr></table></figure>\n<h6 id=\"UglifyJsPlugin\"><a href=\"#UglifyJsPlugin\" class=\"headerlink\" title=\"UglifyJsPlugin\"></a>UglifyJsPlugin</h6><blockquote>\n<p>压缩JS代码</p>\n</blockquote>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin()</div></pre></td></tr></table></figure>\n<h6 id=\"ExtractTextPlugin\"><a href=\"#ExtractTextPlugin\" class=\"headerlink\" title=\"ExtractTextPlugin\"></a>ExtractTextPlugin</h6><blockquote>\n<p>分离CSS和JS文件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"style.css\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><blockquote>\n<p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">output: &#123;</div><div class=\"line\">   <span class=\"attr\">path</span>: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">   <span class=\"attr\">filename</span>: <span class=\"string\">\"[name]-[hash].js\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name]-[hash].css\"</span>)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"Code-Splitting\"><a href=\"#Code-Splitting\" class=\"headerlink\" title=\"Code Splitting\"></a>Code Splitting</h3><blockquote>\n<p>It’s an opt-in feature. You can define split points in your code base. Webpack takes care of the dependencies, output files and runtime stuff.</p>\n</blockquote>\n<h6 id=\"CommonJS-require-ensure\"><a href=\"#CommonJS-require-ensure\" class=\"headerlink\" title=\"CommonJS: require.ensure\"></a>CommonJS: require.ensure</h6><blockquote>\n<p>The require.ensure method ensures that every dependency in dependencies can be synchronously required when calling the callback. callback has no parameter.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// require.ensure only loads the modules, it doesn’t evaluate them</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"AMD-require\"><a href=\"#AMD-require\" class=\"headerlink\" title=\"AMD: require\"></a>AMD: require</h6><blockquote>\n<p>The AMD spec defines an asynchronous require method with this definition<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Note: AMD require loads and evaluate the modules. In webpack modules are evaluated left to right.</span></div><div class=\"line\"><span class=\"comment\">// Note: It’s allowed to omit the callback.</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"ES6-Modules\"><a href=\"#ES6-Modules\" class=\"headerlink\" title=\"ES6 Modules\"></a>ES6 Modules</h6><blockquote>\n<p>Webpack doesn’t support ES6 modules; use require.ensure or require directly depending on which module format your transpiler creates.<br>Luckily, there is a JavaScript API “loader” specification being written to handle the dynamic use case: System.load (or System.import). This API will be the native equivalent to the above require variations. However, most transpilers do not support converting System.load calls to require.ensure so you have to do that directly if you want to make use of dynamic code splitting.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//static imports</span></div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// dynamic imports</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> contacts = <span class=\"built_in\">require</span>(<span class=\"string\">'./contacts'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h6 id=\"Chunk-content\"><a href=\"#Chunk-content\" class=\"headerlink\" title=\"Chunk content\"></a>Chunk content</h6><blockquote>\n<p>All dependencies at a split point go into a new chunk. Dependencies are also recursively added.<br>If you pass a function expression (or bound function expression) as callback to the split point, webpack automatically puts all dependencies required in this function expression into the chunk too.</p>\n</blockquote>\n<h6 id=\"Chunk-optimization\"><a href=\"#Chunk-optimization\" class=\"headerlink\" title=\"Chunk optimization\"></a>Chunk optimization</h6><blockquote>\n<p>If two chunks contain the same modules, they are merged into one. This can cause chunks to have multiple parents.<br>If a module is available in all parents of a chunk, it’s removed from that chunk.<br>If a chunk contains all modules of another chunk, this is stored. It fulfills multiple chunks.</p>\n</blockquote>\n<h6 id=\"Chunk-loading\"><a href=\"#Chunk-loading\" class=\"headerlink\" title=\"Chunk loading\"></a>Chunk loading</h6><blockquote>\n<p>Depending on the configuration option target a runtime logic for chunk loading is added to the bundle. I. e. for the web target chunks are loaded via jsonp. A chunk is only loaded once and parallel requests are merged into one. The runtime checks for loaded chunks whether they fulfill multiple chunks.</p>\n</blockquote>\n<h6 id=\"Chunk-types\"><a href=\"#Chunk-types\" class=\"headerlink\" title=\"Chunk types\"></a>Chunk types</h6><p>######### Entry chunk</p>\n<blockquote>\n<p>An entry chunk contains the runtime plus a bunch of modules. If the chunk contains the module 0 the runtime executes it. If not, it waits for chunks that contains the module 0 and executes it (every time when there is a chunk with a module 0)</p>\n</blockquote>\n<p>######### Normal chunk</p>\n<blockquote>\n<p>A normal chunk contains no runtime. It only contains a bunch of modules. The structure depends on the chunk loading algorithm. I. e. for jsonp the modules are wrapped in a jsonp callback function. The chunk also contains a list of chunk id that it fulfills.</p>\n</blockquote>\n<p>######### Initial chunk (non-entry)</p>\n<blockquote>\n<p>An initial chunk is a normal chunk. The only difference is that optimization treats it as more important because it counts toward the initial loading time (like entry chunks). That chunk type can occur in combination with the CommonsChunkPlugin.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">app</span>: <span class=\"string\">\"./app.js\"</span>,</div><div class=\"line\">    <span class=\"attr\">vendor</span>: [<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>, ...],</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"comment\">/* chunkName= */</span><span class=\"string\">\"vendor\"</span>, <span class=\"comment\">/* filename= */</span><span class=\"string\">\"vendor.bundle.js\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// This will remove all modules in the vendor chunk from the app chunk. The bundle.js will now contain just your app code, without any of its dependencies. These are in vendor.bundle.js.</span></div><div class=\"line\"><span class=\"comment\">// In your HTML page load vendor.bundle.js before bundle.js.</span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"vendor.bundle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"bundle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: &#123; <span class=\"attr\">a</span>: <span class=\"string\">\"./a\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"./b\"</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123; <span class=\"attr\">filename</span>: <span class=\"string\">\"[name].js\"</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [ <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">\"init.js\"</span>) ]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;script src=<span class=\"string\">\"init.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"a.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script src=<span class=\"string\">\"b.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h6 id=\"Optimization\"><a href=\"#Optimization\" class=\"headerlink\" title=\"Optimization\"></a>Optimization</h6><pre><code>* LimitChunkCountPlugin\n* MinChunkSizePlugin\n* AggressiveMergingPlugin\n[Config Plugin List](https://webpack.github.io/docs/list-of-plugins.html){:target=&quot;_blank&quot;}\n</code></pre><p><a href=\"http://www.pro-react.com/materials/appendixA/\" target=\"_blank\" rel=\"external\">http://www.pro-react.com/materials/appendixA/</a><br><a href=\"https://github.com/eyasliu/blog/issues/8\" target=\"_blank\" rel=\"external\">https://github.com/eyasliu/blog/issues/8</a><br><a href=\"http://www.alloyteam.com/2016/02/code-split-by-routes/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/2016/02/code-split-by-routes/</a><br><a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/42e11515c10f</a></p>\n<p><a href=\"https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.m1an35go2</a><br><a href=\"https://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/why-redux-needs-reducers-to-be-pure-functions-d438c58ae468#.xcb5p2yux</a><br><a href=\"https://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpacks-hmr-react-hot-loader-the-missing-manual-232336dc0d96#.mxeblxujo</a><br><a href=\"https://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd\" target=\"_blank\" rel=\"external\">https://medium.com/@rajaraodv/webpack-hot-module-replacement-hmr-e756a726a07#.bsm92y6nd</a><br><a href=\"https://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n\" target=\"_blank\" rel=\"external\">https://medium.freecodecamp.com/5-javascript-bad-parts-that-are-fixed-in-es6-c7c45d44fd81#.jtdaohm3n</a></p>\n<p><a href=\"https://gold.xitu.io/post/5842ea76128fe10058a3b4f0\" target=\"_blank\" rel=\"external\">https://gold.xitu.io/post/5842ea76128fe10058a3b4f0</a></p>\n<p><a href=\"https://github.com/gwuhaolin/blog/issues/2\" target=\"_blank\" rel=\"external\">https://github.com/gwuhaolin/blog/issues/2</a></p>\n"},{"layout":"post","title":"Jekyll + Github pages + Travis","subtitle":"Magic","date":"2016-12-05T16:00:00.000Z","author":"Asher","header-img":"post-bg-jekyll.jpg","header-mask":0.3,"catalog":true,"_content":"\n### 为什么搭建Blog\n\n> 最初的原因是在网上搜索解决方案的时候碰巧看到了一个香港妹子自己的博客\n> [小白妹妹写代码](http://sabrinaluo.com/tech/ \"我这么可爱一定是男孩子\"){:target=\"_blank\"}。\n> 风趣幽默的表述让我也有了一个搭建Blog的冲动。\n> 所以一切就此开始。。。\n\n### Jekyll\n\nJekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n一个栗子解释安装：\n\n```javascript\ngem install jekyll //　安装jekyll\n\njekyll MyBlog //　新建一个空的Blog模板\n\njekyll server // 根据提示访问站点\n\n// jekyll server --watch\n// jekyll build\n// jekyll build --watch\n// jekyll clean\n```\n\n#### Jekyll themes\n\n新建的模板不是很好看但是简介，初学这可以先用来练手。这里有一个模板的网站[JekyllThemes](http://jekyllthemes.org \"Jekyll Theme\"){:target=\"_blank\"}。\n\n> 找一个自己喜欢的模板进行改造吧～～～\n\n### Github pages\n\n> 之前在网上找了好多资料。。。其实认真看看文档，你就会发现这个其实非常简单。\n> Github中有一个特殊的分支 `gh-pages`　这个分支中的代码github自动用来生成 Github Pages 站点。\n> 所以你要做的就是建立一个Repository, 新建一个分支然后post代码jekyll下的 `_site/` 到这个分支。\n> 访问username.github.io/repository即可看到你的网站。\n\n### Travis-ci\n\n> 首先我承认自己是一个懒人，我不想每次在发布博文的时候还要进行一次`jekyll build`\n> 然后将代码再`push`到`gh-pages`上. 虽然过程比较简单, 但是每次都这样也挺烦人的, 所以我就想要一个云端的持续构建工具来帮我完成这个工作。\n\n[Travic-ci](https://travis-ci.org/){:target=\"_blank\"} 的用法也很简单。监听`master`分支, 当有新`commit`提交的时候就在云端跑脚本。当然这里所谓的跑脚本就是完成我们安排好的流程。\n\n再来一个栗子：\n\n```javascript\n// 首先你要新建一个Gemfile文件来告诉travis在执行脚本钱需要安装哪些文件。\n// 我的Gemfile文件：\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\ngem \"jekyll-paginate\"\n```\n\n----------------------------------------------------------\n\n```javascript\n//　然后你需要有一个.travis.yml文件来告诉travis-ci你需要让它帮你完成什么。\n//　我的Travis-ci文件\n\nlanguage: ruby\nrvm:\n- 2.2\nscript:\n- jekyll build --future\nafter_success:\n- rm -rf `ls -a |egrep -v .git| egrep -v _site`\n- mv _site//* .\n- rm -rf _site\n- ls -al\n- git config user.name \"Travis CI\"\n- git config user.email ${EMAIL}\n- git add -A\n- git status\n- git commit -m \"Generated Jekyll site by Travis CI - ${TRAVIS_BUILD_NUMBER}\"\n- git push --force \"https://${DEPLOY_KEY}@${GITHUB_REPO}\" HEAD: ${REPO_TARGET_BRANCH}\nenv:\n  global:\n  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true\n  - GITHUB_REPO: github.com/AsherJia/AsherBlog.git\n  - REPO_TARGET_BRANCH: gh-pages\n\n```\n\nEMAIL以及DEPLOY_KEY是需要用travis来生成的，可以起到保护的作用。\n这个脚本所完成的就是当有新的commit提交上来以后，执行jekyll build。\n将生成的_site/下的文件push到gh-pages分支上。\n\n\n```javascript\ngem install travis\n\n$ travis encrypt EMAIL=medomain.com --add\n\n$ travis encrypt DEPLOY_KEY=token --add //这个token需要到github上生成。\n```\n\n----------------------------------------------------------\n\n推荐一篇博文[Jekyll + Github pages + Travis CI, sitting in a tree](http://nick-dunn.co.uk/blog/jekyll-github-travis-ci-sitting-in-a-tree/){:target=\"_blank\"}，　我在刚开始的时候就是根据这篇文章来学习的。\n\n结束了，，，能看到这篇文章我相信你已经知道我的博客了。\n\n> 一个简单的原因，甚至从逻辑上说不通，但是我的博客因此诞生。\n> Later equals never.\n","source":"_posts/2016-12-06-jekyll-github-page-travis-ci.markdown","raw":"---\nlayout:     post\ntitle:      \"Jekyll + Github pages + Travis\"\nsubtitle:   \"Magic\"\ndate:       2016-12-06\nauthor:     \"Asher\"\nheader-img: \"post-bg-jekyll.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Jekyll\n---\n\n### 为什么搭建Blog\n\n> 最初的原因是在网上搜索解决方案的时候碰巧看到了一个香港妹子自己的博客\n> [小白妹妹写代码](http://sabrinaluo.com/tech/ \"我这么可爱一定是男孩子\"){:target=\"_blank\"}。\n> 风趣幽默的表述让我也有了一个搭建Blog的冲动。\n> 所以一切就此开始。。。\n\n### Jekyll\n\nJekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n一个栗子解释安装：\n\n```javascript\ngem install jekyll //　安装jekyll\n\njekyll MyBlog //　新建一个空的Blog模板\n\njekyll server // 根据提示访问站点\n\n// jekyll server --watch\n// jekyll build\n// jekyll build --watch\n// jekyll clean\n```\n\n#### Jekyll themes\n\n新建的模板不是很好看但是简介，初学这可以先用来练手。这里有一个模板的网站[JekyllThemes](http://jekyllthemes.org \"Jekyll Theme\"){:target=\"_blank\"}。\n\n> 找一个自己喜欢的模板进行改造吧～～～\n\n### Github pages\n\n> 之前在网上找了好多资料。。。其实认真看看文档，你就会发现这个其实非常简单。\n> Github中有一个特殊的分支 `gh-pages`　这个分支中的代码github自动用来生成 Github Pages 站点。\n> 所以你要做的就是建立一个Repository, 新建一个分支然后post代码jekyll下的 `_site/` 到这个分支。\n> 访问username.github.io/repository即可看到你的网站。\n\n### Travis-ci\n\n> 首先我承认自己是一个懒人，我不想每次在发布博文的时候还要进行一次`jekyll build`\n> 然后将代码再`push`到`gh-pages`上. 虽然过程比较简单, 但是每次都这样也挺烦人的, 所以我就想要一个云端的持续构建工具来帮我完成这个工作。\n\n[Travic-ci](https://travis-ci.org/){:target=\"_blank\"} 的用法也很简单。监听`master`分支, 当有新`commit`提交的时候就在云端跑脚本。当然这里所谓的跑脚本就是完成我们安排好的流程。\n\n再来一个栗子：\n\n```javascript\n// 首先你要新建一个Gemfile文件来告诉travis在执行脚本钱需要安装哪些文件。\n// 我的Gemfile文件：\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\ngem \"jekyll-paginate\"\n```\n\n----------------------------------------------------------\n\n```javascript\n//　然后你需要有一个.travis.yml文件来告诉travis-ci你需要让它帮你完成什么。\n//　我的Travis-ci文件\n\nlanguage: ruby\nrvm:\n- 2.2\nscript:\n- jekyll build --future\nafter_success:\n- rm -rf `ls -a |egrep -v .git| egrep -v _site`\n- mv _site//* .\n- rm -rf _site\n- ls -al\n- git config user.name \"Travis CI\"\n- git config user.email ${EMAIL}\n- git add -A\n- git status\n- git commit -m \"Generated Jekyll site by Travis CI - ${TRAVIS_BUILD_NUMBER}\"\n- git push --force \"https://${DEPLOY_KEY}@${GITHUB_REPO}\" HEAD: ${REPO_TARGET_BRANCH}\nenv:\n  global:\n  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true\n  - GITHUB_REPO: github.com/AsherJia/AsherBlog.git\n  - REPO_TARGET_BRANCH: gh-pages\n\n```\n\nEMAIL以及DEPLOY_KEY是需要用travis来生成的，可以起到保护的作用。\n这个脚本所完成的就是当有新的commit提交上来以后，执行jekyll build。\n将生成的_site/下的文件push到gh-pages分支上。\n\n\n```javascript\ngem install travis\n\n$ travis encrypt EMAIL=medomain.com --add\n\n$ travis encrypt DEPLOY_KEY=token --add //这个token需要到github上生成。\n```\n\n----------------------------------------------------------\n\n推荐一篇博文[Jekyll + Github pages + Travis CI, sitting in a tree](http://nick-dunn.co.uk/blog/jekyll-github-travis-ci-sitting-in-a-tree/){:target=\"_blank\"}，　我在刚开始的时候就是根据这篇文章来学习的。\n\n结束了，，，能看到这篇文章我相信你已经知道我的博客了。\n\n> 一个简单的原因，甚至从逻辑上说不通，但是我的博客因此诞生。\n> Later equals never.\n","slug":"2016-12-06-jekyll-github-page-travis-ci","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d756000ps7t77vu718lv","content":"<h3 id=\"为什么搭建Blog\"><a href=\"#为什么搭建Blog\" class=\"headerlink\" title=\"为什么搭建Blog\"></a>为什么搭建Blog</h3><blockquote>\n<p>最初的原因是在网上搜索解决方案的时候碰巧看到了一个香港妹子自己的博客<br><a href=\"http://sabrinaluo.com/tech/\" title=\"我这么可爱一定是男孩子\" target=\"_blank\" rel=\"external\">小白妹妹写代码</a>{:target=”_blank”}。<br>风趣幽默的表述让我也有了一个搭建Blog的冲动。<br>所以一切就此开始。。。</p>\n</blockquote>\n<h3 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h3><p>Jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n<p>一个栗子解释安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install jekyll <span class=\"comment\">//　安装jekyll</span></div><div class=\"line\"></div><div class=\"line\">jekyll MyBlog <span class=\"comment\">//　新建一个空的Blog模板</span></div><div class=\"line\"></div><div class=\"line\">jekyll server <span class=\"comment\">// 根据提示访问站点</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// jekyll server --watch</span></div><div class=\"line\"><span class=\"comment\">// jekyll build</span></div><div class=\"line\"><span class=\"comment\">// jekyll build --watch</span></div><div class=\"line\"><span class=\"comment\">// jekyll clean</span></div></pre></td></tr></table></figure>\n<h4 id=\"Jekyll-themes\"><a href=\"#Jekyll-themes\" class=\"headerlink\" title=\"Jekyll themes\"></a>Jekyll themes</h4><p>新建的模板不是很好看但是简介，初学这可以先用来练手。这里有一个模板的网站<a href=\"http://jekyllthemes.org\" title=\"Jekyll Theme\" target=\"_blank\" rel=\"external\">JekyllThemes</a>{:target=”_blank”}。</p>\n<blockquote>\n<p>找一个自己喜欢的模板进行改造吧～～～</p>\n</blockquote>\n<h3 id=\"Github-pages\"><a href=\"#Github-pages\" class=\"headerlink\" title=\"Github pages\"></a>Github pages</h3><blockquote>\n<p>之前在网上找了好多资料。。。其实认真看看文档，你就会发现这个其实非常简单。<br>Github中有一个特殊的分支 <code>gh-pages</code>　这个分支中的代码github自动用来生成 Github Pages 站点。<br>所以你要做的就是建立一个Repository, 新建一个分支然后post代码jekyll下的 <code>_site/</code> 到这个分支。<br>访问username.github.io/repository即可看到你的网站。</p>\n</blockquote>\n<h3 id=\"Travis-ci\"><a href=\"#Travis-ci\" class=\"headerlink\" title=\"Travis-ci\"></a>Travis-ci</h3><blockquote>\n<p>首先我承认自己是一个懒人，我不想每次在发布博文的时候还要进行一次<code>jekyll build</code><br>然后将代码再<code>push</code>到<code>gh-pages</code>上. 虽然过程比较简单, 但是每次都这样也挺烦人的, 所以我就想要一个云端的持续构建工具来帮我完成这个工作。</p>\n</blockquote>\n<p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travic-ci</a>{:target=”_blank”} 的用法也很简单。监听<code>master</code>分支, 当有新<code>commit</code>提交的时候就在云端跑脚本。当然这里所谓的跑脚本就是完成我们安排好的流程。</p>\n<p>再来一个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 首先你要新建一个Gemfile文件来告诉travis在执行脚本钱需要安装哪些文件。</span></div><div class=\"line\"><span class=\"comment\">// 我的Gemfile文件：</span></div><div class=\"line\">source <span class=\"string\">\"https://rubygems.org\"</span></div><div class=\"line\"></div><div class=\"line\">gem <span class=\"string\">\"jekyll\"</span></div><div class=\"line\">gem <span class=\"string\">\"jekyll-paginate\"</span></div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//　然后你需要有一个.travis.yml文件来告诉travis-ci你需要让它帮你完成什么。</span></div><div class=\"line\"><span class=\"comment\">//　我的Travis-ci文件</span></div><div class=\"line\"></div><div class=\"line\">language: ruby</div><div class=\"line\">rvm:</div><div class=\"line\">- <span class=\"number\">2.2</span></div><div class=\"line\">script:</div><div class=\"line\">- jekyll build --future</div><div class=\"line\">after_success:</div><div class=\"line\">- rm -rf <span class=\"string\">`ls -a |egrep -v .git| egrep -v _site`</span></div><div class=\"line\">- mv _site<span class=\"comment\">//* .</span></div><div class=\"line\">- rm -rf _site</div><div class=\"line\">- ls -al</div><div class=\"line\">- git config user.name <span class=\"string\">\"Travis CI\"</span></div><div class=\"line\">- git config user.email $&#123;EMAIL&#125;</div><div class=\"line\">- git add -A</div><div class=\"line\">- git status</div><div class=\"line\">- git commit -m <span class=\"string\">\"Generated Jekyll site by Travis CI - $&#123;TRAVIS_BUILD_NUMBER&#125;\"</span></div><div class=\"line\">- git push --force <span class=\"string\">\"https://$&#123;DEPLOY_KEY&#125;@$&#123;GITHUB_REPO&#125;\"</span> HEAD: $&#123;REPO_TARGET_BRANCH&#125;</div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">  - NOKOGIRI_USE_SYSTEM_LIBRARIES=<span class=\"literal\">true</span></div><div class=\"line\">  - GITHUB_REPO: github.com/AsherJia/AsherBlog.git</div><div class=\"line\">  - REPO_TARGET_BRANCH: gh-pages</div></pre></td></tr></table></figure>\n<p>EMAIL以及DEPLOY_KEY是需要用travis来生成的，可以起到保护的作用。<br>这个脚本所完成的就是当有新的commit提交上来以后，执行jekyll build。<br>将生成的_site/下的文件push到gh-pages分支上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis</div><div class=\"line\"></div><div class=\"line\">$ travis encrypt EMAIL=medomain.com --add</div><div class=\"line\"></div><div class=\"line\">$ travis encrypt DEPLOY_KEY=token --add <span class=\"comment\">//这个token需要到github上生成。</span></div></pre></td></tr></table></figure>\n<hr>\n<p>推荐一篇博文<a href=\"http://nick-dunn.co.uk/blog/jekyll-github-travis-ci-sitting-in-a-tree/\" target=\"_blank\" rel=\"external\">Jekyll + Github pages + Travis CI, sitting in a tree</a>{:target=”_blank”}，　我在刚开始的时候就是根据这篇文章来学习的。</p>\n<p>结束了，，，能看到这篇文章我相信你已经知道我的博客了。</p>\n<blockquote>\n<p>一个简单的原因，甚至从逻辑上说不通，但是我的博客因此诞生。<br>Later equals never.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"为什么搭建Blog\"><a href=\"#为什么搭建Blog\" class=\"headerlink\" title=\"为什么搭建Blog\"></a>为什么搭建Blog</h3><blockquote>\n<p>最初的原因是在网上搜索解决方案的时候碰巧看到了一个香港妹子自己的博客<br><a href=\"http://sabrinaluo.com/tech/\" title=\"我这么可爱一定是男孩子\" target=\"_blank\" rel=\"external\">小白妹妹写代码</a>{:target=”_blank”}。<br>风趣幽默的表述让我也有了一个搭建Blog的冲动。<br>所以一切就此开始。。。</p>\n</blockquote>\n<h3 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h3><p>Jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n<p>一个栗子解释安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install jekyll <span class=\"comment\">//　安装jekyll</span></div><div class=\"line\"></div><div class=\"line\">jekyll MyBlog <span class=\"comment\">//　新建一个空的Blog模板</span></div><div class=\"line\"></div><div class=\"line\">jekyll server <span class=\"comment\">// 根据提示访问站点</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// jekyll server --watch</span></div><div class=\"line\"><span class=\"comment\">// jekyll build</span></div><div class=\"line\"><span class=\"comment\">// jekyll build --watch</span></div><div class=\"line\"><span class=\"comment\">// jekyll clean</span></div></pre></td></tr></table></figure>\n<h4 id=\"Jekyll-themes\"><a href=\"#Jekyll-themes\" class=\"headerlink\" title=\"Jekyll themes\"></a>Jekyll themes</h4><p>新建的模板不是很好看但是简介，初学这可以先用来练手。这里有一个模板的网站<a href=\"http://jekyllthemes.org\" title=\"Jekyll Theme\" target=\"_blank\" rel=\"external\">JekyllThemes</a>{:target=”_blank”}。</p>\n<blockquote>\n<p>找一个自己喜欢的模板进行改造吧～～～</p>\n</blockquote>\n<h3 id=\"Github-pages\"><a href=\"#Github-pages\" class=\"headerlink\" title=\"Github pages\"></a>Github pages</h3><blockquote>\n<p>之前在网上找了好多资料。。。其实认真看看文档，你就会发现这个其实非常简单。<br>Github中有一个特殊的分支 <code>gh-pages</code>　这个分支中的代码github自动用来生成 Github Pages 站点。<br>所以你要做的就是建立一个Repository, 新建一个分支然后post代码jekyll下的 <code>_site/</code> 到这个分支。<br>访问username.github.io/repository即可看到你的网站。</p>\n</blockquote>\n<h3 id=\"Travis-ci\"><a href=\"#Travis-ci\" class=\"headerlink\" title=\"Travis-ci\"></a>Travis-ci</h3><blockquote>\n<p>首先我承认自己是一个懒人，我不想每次在发布博文的时候还要进行一次<code>jekyll build</code><br>然后将代码再<code>push</code>到<code>gh-pages</code>上. 虽然过程比较简单, 但是每次都这样也挺烦人的, 所以我就想要一个云端的持续构建工具来帮我完成这个工作。</p>\n</blockquote>\n<p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travic-ci</a>{:target=”_blank”} 的用法也很简单。监听<code>master</code>分支, 当有新<code>commit</code>提交的时候就在云端跑脚本。当然这里所谓的跑脚本就是完成我们安排好的流程。</p>\n<p>再来一个栗子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 首先你要新建一个Gemfile文件来告诉travis在执行脚本钱需要安装哪些文件。</span></div><div class=\"line\"><span class=\"comment\">// 我的Gemfile文件：</span></div><div class=\"line\">source <span class=\"string\">\"https://rubygems.org\"</span></div><div class=\"line\"></div><div class=\"line\">gem <span class=\"string\">\"jekyll\"</span></div><div class=\"line\">gem <span class=\"string\">\"jekyll-paginate\"</span></div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//　然后你需要有一个.travis.yml文件来告诉travis-ci你需要让它帮你完成什么。</span></div><div class=\"line\"><span class=\"comment\">//　我的Travis-ci文件</span></div><div class=\"line\"></div><div class=\"line\">language: ruby</div><div class=\"line\">rvm:</div><div class=\"line\">- <span class=\"number\">2.2</span></div><div class=\"line\">script:</div><div class=\"line\">- jekyll build --future</div><div class=\"line\">after_success:</div><div class=\"line\">- rm -rf <span class=\"string\">`ls -a |egrep -v .git| egrep -v _site`</span></div><div class=\"line\">- mv _site<span class=\"comment\">//* .</span></div><div class=\"line\">- rm -rf _site</div><div class=\"line\">- ls -al</div><div class=\"line\">- git config user.name <span class=\"string\">\"Travis CI\"</span></div><div class=\"line\">- git config user.email $&#123;EMAIL&#125;</div><div class=\"line\">- git add -A</div><div class=\"line\">- git status</div><div class=\"line\">- git commit -m <span class=\"string\">\"Generated Jekyll site by Travis CI - $&#123;TRAVIS_BUILD_NUMBER&#125;\"</span></div><div class=\"line\">- git push --force <span class=\"string\">\"https://$&#123;DEPLOY_KEY&#125;@$&#123;GITHUB_REPO&#125;\"</span> HEAD: $&#123;REPO_TARGET_BRANCH&#125;</div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">  - NOKOGIRI_USE_SYSTEM_LIBRARIES=<span class=\"literal\">true</span></div><div class=\"line\">  - GITHUB_REPO: github.com/AsherJia/AsherBlog.git</div><div class=\"line\">  - REPO_TARGET_BRANCH: gh-pages</div></pre></td></tr></table></figure>\n<p>EMAIL以及DEPLOY_KEY是需要用travis来生成的，可以起到保护的作用。<br>这个脚本所完成的就是当有新的commit提交上来以后，执行jekyll build。<br>将生成的_site/下的文件push到gh-pages分支上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis</div><div class=\"line\"></div><div class=\"line\">$ travis encrypt EMAIL=medomain.com --add</div><div class=\"line\"></div><div class=\"line\">$ travis encrypt DEPLOY_KEY=token --add <span class=\"comment\">//这个token需要到github上生成。</span></div></pre></td></tr></table></figure>\n<hr>\n<p>推荐一篇博文<a href=\"http://nick-dunn.co.uk/blog/jekyll-github-travis-ci-sitting-in-a-tree/\" target=\"_blank\" rel=\"external\">Jekyll + Github pages + Travis CI, sitting in a tree</a>{:target=”_blank”}，　我在刚开始的时候就是根据这篇文章来学习的。</p>\n<p>结束了，，，能看到这篇文章我相信你已经知道我的博客了。</p>\n<blockquote>\n<p>一个简单的原因，甚至从逻辑上说不通，但是我的博客因此诞生。<br>Later equals never.</p>\n</blockquote>\n"},{"layout":"post","title":"Vue","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n[Vue Demo](https://github.com/lichenbuliren/vuex-notes-app \"Vue Demo\"){:target=\"_blank\"}\n\n###概述\n\n> Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n\n> Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。\n\n###数据绑定语法\n","source":"_posts/2016-08-29-vue-demo.markdown","raw":"---\nlayout:     post\ntitle:      \"Vue\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Vue\n---\n\n[Vue Demo](https://github.com/lichenbuliren/vuex-notes-app \"Vue Demo\"){:target=\"_blank\"}\n\n###概述\n\n> Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n\n> Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。\n\n###数据绑定语法\n","slug":"2016-08-29-vue-demo","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75a000rs7t7am3syygm","content":"<p><a href=\"https://github.com/lichenbuliren/vuex-notes-app\" title=\"Vue Demo\" target=\"_blank\" rel=\"external\">Vue Demo</a>{:target=”_blank”}</p>\n<p>###概述</p>\n<blockquote>\n<p>Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>\n<p>Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p>\n</blockquote>\n<p>###数据绑定语法</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/lichenbuliren/vuex-notes-app\" title=\"Vue Demo\" target=\"_blank\" rel=\"external\">Vue Demo</a>{:target=”_blank”}</p>\n<p>###概述</p>\n<blockquote>\n<p>Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>\n<p>Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p>\n</blockquote>\n<p>###数据绑定语法</p>\n"},{"layout":"post","title":"Understore","subtitle":"understore 源码分析","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"post-bg-e2e-ux.jpg","header-mask":0.3,"catalog":true,"_content":"","source":"_posts/2016-12-28-understore-analysis.markdown","raw":"---\nlayout:     post\ntitle:      \"Understore\"\nsubtitle:   \"understore 源码分析\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"post-bg-e2e-ux.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - understore\n---\n","slug":"2016-12-28-understore-analysis","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75e000ts7t7r4wohl1f","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"NodeJS","subtitle":"Github","date":"2017-01-06T03:11:00.000Z","author":"Asher","header-img":"nodejs.jpg","header-mask":0.3,"catalog":true,"_content":"\n[T1](http://www.zcfy.cc/article/node-js-best-practices-how-to-become-a-better-developer-in-2017-risingstack-2174.html)\n\n[1KE</>](http://1ke.co/course/787)\n","source":"_posts/2017-01-06-nodejs.markdown","raw":"---\nlayout:     post\ntitle:      \"NodeJS\"\nsubtitle:   \"Github\"\ndate:       2017-01-06 11:11\nauthor:     \"Asher\"\nheader-img: \"nodejs.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - NodeJS\n---\n\n[T1](http://www.zcfy.cc/article/node-js-best-practices-how-to-become-a-better-developer-in-2017-risingstack-2174.html)\n\n[1KE</>](http://1ke.co/course/787)\n","slug":"2017-01-06-nodejs","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75q000ws7t79ffbj64t","content":"<p><a href=\"http://www.zcfy.cc/article/node-js-best-practices-how-to-become-a-better-developer-in-2017-risingstack-2174.html\" target=\"_blank\" rel=\"external\">T1</a></p>\n<p><a href=\"http://1ke.co/course/787\" target=\"_blank\" rel=\"external\">1KE&lt;/&gt;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.zcfy.cc/article/node-js-best-practices-how-to-become-a-better-developer-in-2017-risingstack-2174.html\" target=\"_blank\" rel=\"external\">T1</a></p>\n<p><a href=\"http://1ke.co/course/787\" target=\"_blank\" rel=\"external\">1KE&lt;/&gt;</a></p>\n"},{"layout":"post","title":"Javascript","subtitle":"Javascript","date":"2016-05-23T07:08:00.000Z","author":"Asher","header-img":"post-bg-gulp.jpg","header-mask":0.3,"catalog":true,"_content":"\n# 数据类型：\n\n- 6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）\n    1. Null(只有一个值： null)\n    1. Undefined(一个没有被赋值的变量会有个默认值 undefined)\n    1. Number\n    1. Boolean(两个值：true 和 false)\n    1. String\n    1. [Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n- 和Object(对象指内存中的可以被标识符引用的一块区域)\n\n- 数据类型检测\n    - typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)\n        1. undefined - Undefined类型\n        1. number - Number类型\n        1. boolean - Boolean类型\n        1. string - String类型\n        1. symbol - Symbol类型(ECMAScript6新增)\n        1. function - 函数对象([[Call]]在ECMA-262条款中实现了)\n        1. object - 引用类型 或 Null类型\n    ```javascript\n    typeof(Function) // function (Function是函数对象)\n    typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})\n    typeof(Array) // function (Array是函数对象)\n    typeof(new Array) // object（实例化的Array就是object）\n    ```\n\n- 变量赋值时候的返回值：\n    ```javascript\n    var name = 123; // 返回undefined\n    name = 456; // 返回456\n    ```\n    > 结语：定义变量的时候赋值返回:undefined\n    > 给已声明变量赋值时候返回当前赋值。\n\n- 获取元素距离页面的top、left\n    ```javascript\n    function getRec(ele) {\n        var _t = document.documentElement.clientTop,\n            _l = document.documentElement.clientLeft,\n            rect = ele.getBoundingClientRect();\n        return {\n            top: rect.top - _t,\n            right: rect.right - _l,\n            bottom: rect.bottom - _t,\n            left: rect.left - _l\n        }\n    }\n    ```\n    > 注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。\n\n- 数字的固定小数位数\n    ```javascript\n    var a=8.88888,\n        b=8;\n    console.log(a.toFixed(2)); // 8.89 或者 8.88\n    console.log(b.toFixed(2)); // 8.00\n    ```\n\n- js是编译语言，数组长度是随时程序变化而变化的\n    ```javascript\n    var arr = [0, 1];\n    arr[3] = 3;\n    console.log(arr[2]); // undefined\n    console.log(arr.length); // 4\n    ```\n\n- 矩阵的转置\n    ```javascript\n    var arr = [ // 定义一个矩阵（二维数据）\n        [1, 2, 3, 4],\n        [5, 6, 6, 6],\n        [7, 6, 7, 8],\n        [8, 5, 3, 3]\n    ];\n\n    function changeArr(arr) { // 矩阵转置函数\n        var c;\n        for (var i = 1; i < arr.length; i++) {\n            for (var j = 0; j < i; j++) {\n                c = arr[i][j];\n                arr[i][j] = arr[j][i];\n                arr[j][i] = c;\n            }\n        }\n    }\n    changeArr(arr);\n    console.table(arr);\n    ```\n\n- 冒泡排序方法\n    ```javascript\n    // 第一轮是对n-1的位置定位\n    // 第二轮是 每一个位置的数的 确定\n    var arr = [1, 100, 4, 5, 6, 99, 111, 112, 113, 133],\n        temp = 0,\n        flag = false;\n    for (var i = 0; i < arr.length - 1; i++) {\n        document.writeln('come');\n        for (var j = 0; j < arr.length - 1 - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                flag = true;\n            }\n        }\n        if (flag) {\n            flag = false;\n        } else {\n            console.log('brak')\n            break;\n        }\n    }\n    for (var i = 0; i < arr.length; i++) {\n        document.writeln(arr[i]);\n    };\n    ```\n\n- 二分查找\n    ```javascript\n    var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];\n\n    function binarySearch(arr, wantVal, leftIndex, rightIndex) {\n        console.log('leftIndex: ' + leftIndex + ' rightIndex: ' + rightIndex)\n        if (leftIndex > rightIndex) {\n            document.writeln('SORRY: 找不到 ' + wantVal + ' ！');\n            return;\n        }\n        var minIndex = Math.floor((leftIndex + rightIndex) / 2);\n        if (arr[minIndex] > wantVal) {\n            binarySearch(arr, wantVal, leftIndex, minIndex - 1);\n        } else if (arr[minIndex] < wantVal) {\n            binarySearch(arr, wantVal, minIndex + 1, rightIndex);\n        } else {\n            document.writeln('找到了 ' + wantVal + ' ,下标为' + minIndex);\n        }\n    }\n    binarySearch(arr, 99, 0, arr.length - 1);\n    ```\n\n- js 对象访问属性的二种方式\n    ```javascript\n    function Person () {};\n    var new1 = new Person ();\n    new1.name='冯杰';\n    new1.age=21;\n    window.alert(new1.name);\n    window.alert(new1[\"age\"]);\n    ```\n\n- js delete 只能 删除对象的属性\n    ```javascript\n    function Person () {};\n    var me = new Person();\n    me.name='冯杰';\n    console.log(me.name);\n    delete me.name;\n    console.log(me.name);\n    ```\n\n- 在js 中 对象的方法不是通用的 如果生成n个对象 那么就有n个内存堆栈\n    ```javascript\n    // js 中 一切类 继承自 Object 而Object 有propotype\n    // 下面是解决办法 prototype 获得类的static性质\n    function God() {}\n    God.prototype.shout = function() {\n        window.alert('小狗叫');\n    }\n    var dog1 = new God();\n    var dog2 = new God();\n    dog1.shout();\n    dog2.shout();\n    ```\n\n- 对象\n    ```javascript\n    // js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类\n    // Object 类是所有js类的基类 Object 就表示对象（一切的对象）\n    var p1 = new Object();\n    p1.name = 'fj';\n    window.alert(p1.name);\n    window.alert(p1.constructor);\n\n    // 原型链上新增默认对象方法\n    var num = new Number(1);\n    var num2 = 10;\n    window.alert(num.constructor);\n    window.alert(num2.constructor);\n    // 上面2个弹出是一样的\n    Number.prototype.add = function(a) { //prototype是属于类的\n        return this + a;\n    }\n    window.alert(num.add(1).add(2));\n\n    // 小实验 为Array 添加 find(val) 方法\n    Array.prototype.find = function(a) {\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] == a) {\n                return i;\n            }\n        }\n        return 'find fail.';\n    }\n    var arr = [0, 1, 2, 77, 4, 5];\n    window.alert(arr.find(77));\n    ```\n\n- 当需要输出字符串的时候默认调用toString\n\n    ```javascript\n    function Dog(name,breed,color,sex) {\n       this.name=name;\n       this.breed=breed;\n       this.color=color;\n       this.sex=sex;\n    }\n    Dog.prototype.toString = function dogToString() {\n      var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n      return ret;\n    }\n\n    var theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\n    console.log(theDog+'')\n    ```\n\n- prototype 的方法不能访问私有属性和方法\n    ```javascript\n    function Person() {\n        var name = 'fj'; //私有\n        this.age = 21;\n    }\n    Person.prototype.showName = function() {\n        window.alert(this.name);\n    }\n    Person.prototype.showAge = function() {\n        window.alert(this.age);\n    }\n    var p1 = new Person();\n    p1.showName();\n    p1.showAge();\n    ```\n\n- 继承\n    ```javascript\n    // js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字\n    function Father(name, age) {\n        this.name = name;\n        this.age = age;\n        this.show = function() {\n            window.alert(this.name + '---' + this.age);\n        }\n    }\n\n    function Son(name, age) {\n        this.Father = Father;\n        this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间\n    }\n    var me = new Son('fj', 21);\n    window.alert(me.name);\n    me.show();\n    ```\n\n\n- 重载\n    ```javascript\n    // js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理\n    ```\n\n- 闭包\n    ```javascript\n    // 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的\n    ```\n\n\n- 数组长度\n    ```javascript\n    // 数组的长度是根据下标的最大而确定的\n    var arr = new Array();\n    arr['a'] = 1;\n    arr['b'] = 2;\n    window.alert(arr.length); // 打出0\n    ```\n\n\n* 如果函数用来初始化一个新建的对象(new), 称之为构造函数constructor.\n\n* 采用64位浮点格式表示数字，　整数范围是-9007199254570992 ~ 9007199054570992,  -2^53 ~ 2^53\n\nvar s1 = 0010; 8\n\nvar s2 = 0x0010; 16\n\n浮点数\n3.14\n.2222\n6.02e23\n12.3E-32\n\n* javascript 非数字　not-a-number　NaN　跟任何值都不相等，包括自身。\n* x!=x 当且仅当x为NaN的时候返回true.\n* isNaN 如果参数是NaN或者非数字的时候返回true.\n* isFinite 用来检测数字是不是有限的。\n\nstring 由16位值组成的不可变的有序序列。\n\nboolean:\n\n> undefined null 0 -0 NaN \"\"  会转化为false\n\ntype of null  -> object\ntype of '' -> string\ntype of undefined -> undefined\nnull == undefined -> true\nnull === undefined -> false\n\n\n全局属性：　undefined, Infinity, NaN\n全局函数：　isNaN(), parseInt(), eval()\n构造函数：　Date(), RegExp(), String(), Object(), Array()\n全局对象：　Math, JSON\n\nMath.floor 返回小于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“舍”；如果x是负数，则把小数“入”。\nMath.round 1=>1 1.5=>2 1.6=>2 -1.5=>1 -1.6=>2\nMath.ceil 返回返回大于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“入”；如果x是负数，则把小数“舍”。\n\nin运算符\n希望左侧为字符串或者可以转换为字符串。\n右侧是一个对象。\n右侧对象是否包含一个名为左操作数的属性值。\n\ninstanceof\n左侧为对象，右侧为标识对象的类\n\n\n原型\n\n> It is for example fairly trivial to build a classic model on top of it, while the other\n> is more difficult task.\n\nhasOwnProperty 判断一个对象是否包含自定义属性而不是原型链上的属性。\n\nhasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。\n\n\nJavaScript 中原始值（undefined, null, 布尔值，数字和字符串）和对象（包括数组和函数）有着根本的区别，原始值是不可更改的，比如字符串的所有方法都是新返回一个值。\n\n对象和原始值不同，首先，它他是 可变的 —— 值可以修改。\n\nJavaScript 中的某些运算符会做隐式的类型转换。如果「+」运算符的一个操作数是字符串，它将会把另外一个操作数转换为字符串。一元「!」运算符将其操作数转换为布尔值并取反\n\n```javascript\nx + \"\"      // 等价于 String(x)\n+x          // 等价于 Number(x)\n!!x         // 等价于 Boolean(x)\n```\n\n```javascript\nNumber(\"3\")     // => 3\nString(false)   // => \"false\"\nBoolean([])     // => true\nObject(3)       // => new Number(3)\n\nx + \"\"      // 等价于 String(x)\n+x          // 等价于 Number(x)\n!!x         // 等价于 Boolean(x)\n\nvar n = 17\nbinary_sting = n.toString(2)        // 转换为 \"10001\"\noctal_string = \"0\" + n.toString(8)  // 转换为 \"021\"\nhex_string = \"0x\" + n.toString(16)  // 转换为 \"0x11\"\n\nparseInt(\"3 blind mice\")        // => 3\nparseFloat(\" 3.14 meters\")      // => 3.14\nparseInt(0xFF)                  // => 255\nparseInt(\"0.1\")                 // => 0\nparseInt(\".1\")                  // => NaN\nparseFloat(\"$72.47\")            // => NaN\n```\n\n###对象转换为原始值\n> 所有对象继承了两个转换方法 toString(), valueOf()\n> toString() 的作用是返回一个反映这个对象的字符串\n> valueOf() 这个方法的作答并未详细定义：如果存在任意原始值，它就默认将对象转换为表示它的\n> 原始值。复合值默认返回对象本身\n\nJavaScript 中对象到字符串的转换经过了如下这些步骤：\n\n如果对象具有 toString() 方法，调用后，如果返回一个原始值，JavaScript 将这个值转换为字符串，并返回\n如果没有 toString() 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf() 方法，如果存在这个方法，则调用它。如果返回值是原始值，就将这个值值的为字符串并返回\n否则，无法从 toString() 和 valueOf() 获得一个原始值，这些将抛出一个类型错误异常\n\n\n```javascript\nvar now = new Date();\ntypeof (now +1)             // => \"string\" 「+」将日期转换为字符串\ntypeof (now -1)             // => \"number\" 「-」使用对象到数字的转换\nnow == now.toString()       // => true\nnow > (now - 1)             // => true\n```\n\n##in 运算符\n\n希望左操作数是一个字符串或者可转换为字符串。右操作数是一个对象。如果右侧的对象拥有一个名为右操作数值的属性名，那么表达式返回 true。\n\n##instanceof 运算符\n\ninstanceof 运算符希望左侧操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回 true，否则返回 false。\n\n##‘use strict’\n\n‘use strict’ 是 ECMAScript 5 引入的一条指定。非常类似语句但不是，区别在于：\n- 它 不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式，它是一条没有副作用的表达式语句，什么也没做\n- 它只能出现在脚本代码的开始或者函数体的开始、任何实体语句之前。但不必一定出现在脚本或者函数休内的首行\n\n使用 ‘use strict’ 指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码\n\n- 严格代码以 严格模式 执行，严格模式悠了语言的重要缺陷，并提供健壮的查氏功能和增强的安全机制，和非严格模式的区别如下\n\n- 严格模式中 禁止 使用 width 语句\n- 严格模式中，所有的变量都要先声明，如果给一个未声明的变量、函数、函数参数、catch 从句参数或全局对象的属性赋值，将会抛出一个引用错误异常\n- 严格模式中，调用的函数（不是方法）中的一个 this 值是 undefined（非严格模式下 this 值总是全局对象），可以利用这个特性来判断当前的 JavaScript 是否支持严格模式 var hasStrictMode = (function() { \"use strict\"; return this === undefined }())\n- 严格模式中，给只读属性赋值和给不可扩展的对象创建新成员都将抛出一个类型错误异常（非严格模式中不会报错）\n- 严格模式中，传入 eval() 的代码不能在调用程序所在的上下文中声明变量或定义函数，非严格模式中可以\n- 严格模式中，函数里的 arguments 对象拥有传入函数值的 静态副本。非严格模式下，arguments 里的数组元素和函数参数都指向同一个值的引用\n- 严格模式中，当 delete 运算符后跟随非法的标识符（变量、函数、当函数参数）时，将会抛出一个语法错误异常\n- 严格模式中试图删除一个 不可配置 的属性将抛出一个类型错误异常（非严格模式中，返回 false）\n- 严格模式中，一个对象直接量中定义两个或多个 同名属性 将产生一个语法错误\n- 严格模式中，函数声明中存在两个或多个同名参数将产生一个语法错误\n- 严格模式中，不允许使用八进制 整数直接量（以 0 为前缀）\n- 严格模式中，标识符 eval 和 arguments 当做关键字，它们的值是不能更改的，不能给它们赋值，也不能把它们声明为变量、函数名\n- 严格模式中，限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常\nhttp://bonsaiden.github.io/JavaScript-Garden/zh/\n","source":"_posts/2017-01-19-javascript-note.markdown","raw":"---\nlayout:     post\ntitle:      \"Javascript\"\nsubtitle:   \"Javascript\"\ndate:       2016-05-23 15:08\nauthor:     \"Asher\"\nheader-img: \"post-bg-gulp.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Javascript\n---\n\n# 数据类型：\n\n- 6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）\n    1. Null(只有一个值： null)\n    1. Undefined(一个没有被赋值的变量会有个默认值 undefined)\n    1. Number\n    1. Boolean(两个值：true 和 false)\n    1. String\n    1. [Symbol](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n- 和Object(对象指内存中的可以被标识符引用的一块区域)\n\n- 数据类型检测\n    - typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)\n        1. undefined - Undefined类型\n        1. number - Number类型\n        1. boolean - Boolean类型\n        1. string - String类型\n        1. symbol - Symbol类型(ECMAScript6新增)\n        1. function - 函数对象([[Call]]在ECMA-262条款中实现了)\n        1. object - 引用类型 或 Null类型\n    ```javascript\n    typeof(Function) // function (Function是函数对象)\n    typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})\n    typeof(Array) // function (Array是函数对象)\n    typeof(new Array) // object（实例化的Array就是object）\n    ```\n\n- 变量赋值时候的返回值：\n    ```javascript\n    var name = 123; // 返回undefined\n    name = 456; // 返回456\n    ```\n    > 结语：定义变量的时候赋值返回:undefined\n    > 给已声明变量赋值时候返回当前赋值。\n\n- 获取元素距离页面的top、left\n    ```javascript\n    function getRec(ele) {\n        var _t = document.documentElement.clientTop,\n            _l = document.documentElement.clientLeft,\n            rect = ele.getBoundingClientRect();\n        return {\n            top: rect.top - _t,\n            right: rect.right - _l,\n            bottom: rect.bottom - _t,\n            left: rect.left - _l\n        }\n    }\n    ```\n    > 注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。\n\n- 数字的固定小数位数\n    ```javascript\n    var a=8.88888,\n        b=8;\n    console.log(a.toFixed(2)); // 8.89 或者 8.88\n    console.log(b.toFixed(2)); // 8.00\n    ```\n\n- js是编译语言，数组长度是随时程序变化而变化的\n    ```javascript\n    var arr = [0, 1];\n    arr[3] = 3;\n    console.log(arr[2]); // undefined\n    console.log(arr.length); // 4\n    ```\n\n- 矩阵的转置\n    ```javascript\n    var arr = [ // 定义一个矩阵（二维数据）\n        [1, 2, 3, 4],\n        [5, 6, 6, 6],\n        [7, 6, 7, 8],\n        [8, 5, 3, 3]\n    ];\n\n    function changeArr(arr) { // 矩阵转置函数\n        var c;\n        for (var i = 1; i < arr.length; i++) {\n            for (var j = 0; j < i; j++) {\n                c = arr[i][j];\n                arr[i][j] = arr[j][i];\n                arr[j][i] = c;\n            }\n        }\n    }\n    changeArr(arr);\n    console.table(arr);\n    ```\n\n- 冒泡排序方法\n    ```javascript\n    // 第一轮是对n-1的位置定位\n    // 第二轮是 每一个位置的数的 确定\n    var arr = [1, 100, 4, 5, 6, 99, 111, 112, 113, 133],\n        temp = 0,\n        flag = false;\n    for (var i = 0; i < arr.length - 1; i++) {\n        document.writeln('come');\n        for (var j = 0; j < arr.length - 1 - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                flag = true;\n            }\n        }\n        if (flag) {\n            flag = false;\n        } else {\n            console.log('brak')\n            break;\n        }\n    }\n    for (var i = 0; i < arr.length; i++) {\n        document.writeln(arr[i]);\n    };\n    ```\n\n- 二分查找\n    ```javascript\n    var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];\n\n    function binarySearch(arr, wantVal, leftIndex, rightIndex) {\n        console.log('leftIndex: ' + leftIndex + ' rightIndex: ' + rightIndex)\n        if (leftIndex > rightIndex) {\n            document.writeln('SORRY: 找不到 ' + wantVal + ' ！');\n            return;\n        }\n        var minIndex = Math.floor((leftIndex + rightIndex) / 2);\n        if (arr[minIndex] > wantVal) {\n            binarySearch(arr, wantVal, leftIndex, minIndex - 1);\n        } else if (arr[minIndex] < wantVal) {\n            binarySearch(arr, wantVal, minIndex + 1, rightIndex);\n        } else {\n            document.writeln('找到了 ' + wantVal + ' ,下标为' + minIndex);\n        }\n    }\n    binarySearch(arr, 99, 0, arr.length - 1);\n    ```\n\n- js 对象访问属性的二种方式\n    ```javascript\n    function Person () {};\n    var new1 = new Person ();\n    new1.name='冯杰';\n    new1.age=21;\n    window.alert(new1.name);\n    window.alert(new1[\"age\"]);\n    ```\n\n- js delete 只能 删除对象的属性\n    ```javascript\n    function Person () {};\n    var me = new Person();\n    me.name='冯杰';\n    console.log(me.name);\n    delete me.name;\n    console.log(me.name);\n    ```\n\n- 在js 中 对象的方法不是通用的 如果生成n个对象 那么就有n个内存堆栈\n    ```javascript\n    // js 中 一切类 继承自 Object 而Object 有propotype\n    // 下面是解决办法 prototype 获得类的static性质\n    function God() {}\n    God.prototype.shout = function() {\n        window.alert('小狗叫');\n    }\n    var dog1 = new God();\n    var dog2 = new God();\n    dog1.shout();\n    dog2.shout();\n    ```\n\n- 对象\n    ```javascript\n    // js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类\n    // Object 类是所有js类的基类 Object 就表示对象（一切的对象）\n    var p1 = new Object();\n    p1.name = 'fj';\n    window.alert(p1.name);\n    window.alert(p1.constructor);\n\n    // 原型链上新增默认对象方法\n    var num = new Number(1);\n    var num2 = 10;\n    window.alert(num.constructor);\n    window.alert(num2.constructor);\n    // 上面2个弹出是一样的\n    Number.prototype.add = function(a) { //prototype是属于类的\n        return this + a;\n    }\n    window.alert(num.add(1).add(2));\n\n    // 小实验 为Array 添加 find(val) 方法\n    Array.prototype.find = function(a) {\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] == a) {\n                return i;\n            }\n        }\n        return 'find fail.';\n    }\n    var arr = [0, 1, 2, 77, 4, 5];\n    window.alert(arr.find(77));\n    ```\n\n- 当需要输出字符串的时候默认调用toString\n\n    ```javascript\n    function Dog(name,breed,color,sex) {\n       this.name=name;\n       this.breed=breed;\n       this.color=color;\n       this.sex=sex;\n    }\n    Dog.prototype.toString = function dogToString() {\n      var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;\n      return ret;\n    }\n\n    var theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\n\n    console.log(theDog+'')\n    ```\n\n- prototype 的方法不能访问私有属性和方法\n    ```javascript\n    function Person() {\n        var name = 'fj'; //私有\n        this.age = 21;\n    }\n    Person.prototype.showName = function() {\n        window.alert(this.name);\n    }\n    Person.prototype.showAge = function() {\n        window.alert(this.age);\n    }\n    var p1 = new Person();\n    p1.showName();\n    p1.showAge();\n    ```\n\n- 继承\n    ```javascript\n    // js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字\n    function Father(name, age) {\n        this.name = name;\n        this.age = age;\n        this.show = function() {\n            window.alert(this.name + '---' + this.age);\n        }\n    }\n\n    function Son(name, age) {\n        this.Father = Father;\n        this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间\n    }\n    var me = new Son('fj', 21);\n    window.alert(me.name);\n    me.show();\n    ```\n\n\n- 重载\n    ```javascript\n    // js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理\n    ```\n\n- 闭包\n    ```javascript\n    // 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的\n    ```\n\n\n- 数组长度\n    ```javascript\n    // 数组的长度是根据下标的最大而确定的\n    var arr = new Array();\n    arr['a'] = 1;\n    arr['b'] = 2;\n    window.alert(arr.length); // 打出0\n    ```\n\n\n* 如果函数用来初始化一个新建的对象(new), 称之为构造函数constructor.\n\n* 采用64位浮点格式表示数字，　整数范围是-9007199254570992 ~ 9007199054570992,  -2^53 ~ 2^53\n\nvar s1 = 0010; 8\n\nvar s2 = 0x0010; 16\n\n浮点数\n3.14\n.2222\n6.02e23\n12.3E-32\n\n* javascript 非数字　not-a-number　NaN　跟任何值都不相等，包括自身。\n* x!=x 当且仅当x为NaN的时候返回true.\n* isNaN 如果参数是NaN或者非数字的时候返回true.\n* isFinite 用来检测数字是不是有限的。\n\nstring 由16位值组成的不可变的有序序列。\n\nboolean:\n\n> undefined null 0 -0 NaN \"\"  会转化为false\n\ntype of null  -> object\ntype of '' -> string\ntype of undefined -> undefined\nnull == undefined -> true\nnull === undefined -> false\n\n\n全局属性：　undefined, Infinity, NaN\n全局函数：　isNaN(), parseInt(), eval()\n构造函数：　Date(), RegExp(), String(), Object(), Array()\n全局对象：　Math, JSON\n\nMath.floor 返回小于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“舍”；如果x是负数，则把小数“入”。\nMath.round 1=>1 1.5=>2 1.6=>2 -1.5=>1 -1.6=>2\nMath.ceil 返回返回大于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“入”；如果x是负数，则把小数“舍”。\n\nin运算符\n希望左侧为字符串或者可以转换为字符串。\n右侧是一个对象。\n右侧对象是否包含一个名为左操作数的属性值。\n\ninstanceof\n左侧为对象，右侧为标识对象的类\n\n\n原型\n\n> It is for example fairly trivial to build a classic model on top of it, while the other\n> is more difficult task.\n\nhasOwnProperty 判断一个对象是否包含自定义属性而不是原型链上的属性。\n\nhasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。\n\n\nJavaScript 中原始值（undefined, null, 布尔值，数字和字符串）和对象（包括数组和函数）有着根本的区别，原始值是不可更改的，比如字符串的所有方法都是新返回一个值。\n\n对象和原始值不同，首先，它他是 可变的 —— 值可以修改。\n\nJavaScript 中的某些运算符会做隐式的类型转换。如果「+」运算符的一个操作数是字符串，它将会把另外一个操作数转换为字符串。一元「!」运算符将其操作数转换为布尔值并取反\n\n```javascript\nx + \"\"      // 等价于 String(x)\n+x          // 等价于 Number(x)\n!!x         // 等价于 Boolean(x)\n```\n\n```javascript\nNumber(\"3\")     // => 3\nString(false)   // => \"false\"\nBoolean([])     // => true\nObject(3)       // => new Number(3)\n\nx + \"\"      // 等价于 String(x)\n+x          // 等价于 Number(x)\n!!x         // 等价于 Boolean(x)\n\nvar n = 17\nbinary_sting = n.toString(2)        // 转换为 \"10001\"\noctal_string = \"0\" + n.toString(8)  // 转换为 \"021\"\nhex_string = \"0x\" + n.toString(16)  // 转换为 \"0x11\"\n\nparseInt(\"3 blind mice\")        // => 3\nparseFloat(\" 3.14 meters\")      // => 3.14\nparseInt(0xFF)                  // => 255\nparseInt(\"0.1\")                 // => 0\nparseInt(\".1\")                  // => NaN\nparseFloat(\"$72.47\")            // => NaN\n```\n\n###对象转换为原始值\n> 所有对象继承了两个转换方法 toString(), valueOf()\n> toString() 的作用是返回一个反映这个对象的字符串\n> valueOf() 这个方法的作答并未详细定义：如果存在任意原始值，它就默认将对象转换为表示它的\n> 原始值。复合值默认返回对象本身\n\nJavaScript 中对象到字符串的转换经过了如下这些步骤：\n\n如果对象具有 toString() 方法，调用后，如果返回一个原始值，JavaScript 将这个值转换为字符串，并返回\n如果没有 toString() 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf() 方法，如果存在这个方法，则调用它。如果返回值是原始值，就将这个值值的为字符串并返回\n否则，无法从 toString() 和 valueOf() 获得一个原始值，这些将抛出一个类型错误异常\n\n\n```javascript\nvar now = new Date();\ntypeof (now +1)             // => \"string\" 「+」将日期转换为字符串\ntypeof (now -1)             // => \"number\" 「-」使用对象到数字的转换\nnow == now.toString()       // => true\nnow > (now - 1)             // => true\n```\n\n##in 运算符\n\n希望左操作数是一个字符串或者可转换为字符串。右操作数是一个对象。如果右侧的对象拥有一个名为右操作数值的属性名，那么表达式返回 true。\n\n##instanceof 运算符\n\ninstanceof 运算符希望左侧操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回 true，否则返回 false。\n\n##‘use strict’\n\n‘use strict’ 是 ECMAScript 5 引入的一条指定。非常类似语句但不是，区别在于：\n- 它 不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式，它是一条没有副作用的表达式语句，什么也没做\n- 它只能出现在脚本代码的开始或者函数体的开始、任何实体语句之前。但不必一定出现在脚本或者函数休内的首行\n\n使用 ‘use strict’ 指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码\n\n- 严格代码以 严格模式 执行，严格模式悠了语言的重要缺陷，并提供健壮的查氏功能和增强的安全机制，和非严格模式的区别如下\n\n- 严格模式中 禁止 使用 width 语句\n- 严格模式中，所有的变量都要先声明，如果给一个未声明的变量、函数、函数参数、catch 从句参数或全局对象的属性赋值，将会抛出一个引用错误异常\n- 严格模式中，调用的函数（不是方法）中的一个 this 值是 undefined（非严格模式下 this 值总是全局对象），可以利用这个特性来判断当前的 JavaScript 是否支持严格模式 var hasStrictMode = (function() { \"use strict\"; return this === undefined }())\n- 严格模式中，给只读属性赋值和给不可扩展的对象创建新成员都将抛出一个类型错误异常（非严格模式中不会报错）\n- 严格模式中，传入 eval() 的代码不能在调用程序所在的上下文中声明变量或定义函数，非严格模式中可以\n- 严格模式中，函数里的 arguments 对象拥有传入函数值的 静态副本。非严格模式下，arguments 里的数组元素和函数参数都指向同一个值的引用\n- 严格模式中，当 delete 运算符后跟随非法的标识符（变量、函数、当函数参数）时，将会抛出一个语法错误异常\n- 严格模式中试图删除一个 不可配置 的属性将抛出一个类型错误异常（非严格模式中，返回 false）\n- 严格模式中，一个对象直接量中定义两个或多个 同名属性 将产生一个语法错误\n- 严格模式中，函数声明中存在两个或多个同名参数将产生一个语法错误\n- 严格模式中，不允许使用八进制 整数直接量（以 0 为前缀）\n- 严格模式中，标识符 eval 和 arguments 当做关键字，它们的值是不能更改的，不能给它们赋值，也不能把它们声明为变量、函数名\n- 严格模式中，限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常\nhttp://bonsaiden.github.io/JavaScript-Garden/zh/\n","slug":"2017-01-19-javascript-note","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75t000xs7t7bntcgevv","content":"<h1 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h1><ul>\n<li>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<ol>\n<li>Null(只有一个值： null)</li>\n<li>Undefined(一个没有被赋值的变量会有个默认值 undefined)</li>\n<li>Number</li>\n<li>Boolean(两个值：true 和 false)</li>\n<li>String</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"external\">Symbol</a></li>\n</ol>\n</li>\n<li><p>和Object(对象指内存中的可以被标识符引用的一块区域)</p>\n</li>\n<li><p>数据类型检测</p>\n<ul>\n<li>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<ol>\n<li>undefined - Undefined类型</li>\n<li>number - Number类型</li>\n<li>boolean - Boolean类型</li>\n<li>string - String类型</li>\n<li>symbol - Symbol类型(ECMAScript6新增)</li>\n<li>function - 函数对象([[Call]]在ECMA-262条款中实现了)</li>\n<li>object - 引用类型 或 Null类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"built_in\">Function</span>) <span class=\"comment\">// function (Function是函数对象)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>) <span class=\"comment\">// function (new Function也是是函数对象，同等：var func = function()&#123;&#125;)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"built_in\">Array</span>) <span class=\"comment\">// function (Array是函数对象)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>) <span class=\"comment\">// object（实例化的Array就是object）</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>变量赋值时候的返回值：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"number\">123</span>; <span class=\"comment\">// 返回undefined</span></div><div class=\"line\">name = <span class=\"number\">456</span>; <span class=\"comment\">// 返回456</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。</p>\n</blockquote>\n</li>\n<li><p>获取元素距离页面的top、left</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRec</span>(<span class=\"params\">ele</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _t = <span class=\"built_in\">document</span>.documentElement.clientTop,</div><div class=\"line\">        _l = <span class=\"built_in\">document</span>.documentElement.clientLeft,</div><div class=\"line\">        rect = ele.getBoundingClientRect();</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">top</span>: rect.top - _t,</div><div class=\"line\">        <span class=\"attr\">right</span>: rect.right - _l,</div><div class=\"line\">        <span class=\"attr\">bottom</span>: rect.bottom - _t,</div><div class=\"line\">        <span class=\"attr\">left</span>: rect.left - _l</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。</p>\n</blockquote>\n</li>\n<li><p>数字的固定小数位数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">8.88888</span>,</div><div class=\"line\">    b=<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">// 8.89 或者 8.88</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">// 8.00</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js是编译语言，数组长度是随时程序变化而变化的</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</div><div class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">2</span>]); <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>矩阵的转置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"comment\">// 定义一个矩阵（二维数据）</span></div><div class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</div><div class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>],</div><div class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>],</div><div class=\"line\">    [<span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeArr</span>(<span class=\"params\">arr</span>) </span>&#123; <span class=\"comment\">// 矩阵转置函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> c;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            c = arr[i][j];</div><div class=\"line\">            arr[i][j] = arr[j][i];</div><div class=\"line\">            arr[j][i] = c;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">changeArr(arr);</div><div class=\"line\"><span class=\"built_in\">console</span>.table(arr);</div></pre></td></tr></table></figure>\n</li>\n<li><p>冒泡排序方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 第一轮是对n-1的位置定位</span></div><div class=\"line\"><span class=\"comment\">// 第二轮是 每一个位置的数的 确定</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">99</span>, <span class=\"number\">111</span>, <span class=\"number\">112</span>, <span class=\"number\">113</span>, <span class=\"number\">133</span>],</div><div class=\"line\">    temp = <span class=\"number\">0</span>,</div><div class=\"line\">    flag = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'come'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            temp = arr[j];</div><div class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">            flag = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">        flag = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'brak'</span>)</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.writeln(arr[i]);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>二分查找</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">41</span>, <span class=\"number\">55</span>, <span class=\"number\">76</span>, <span class=\"number\">87</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>, <span class=\"number\">123</span>, <span class=\"number\">432</span>, <span class=\"number\">546</span>, <span class=\"number\">577</span>, <span class=\"number\">688</span>, <span class=\"number\">786</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr, wantVal, leftIndex, rightIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'leftIndex: '</span> + leftIndex + <span class=\"string\">' rightIndex: '</span> + rightIndex)</div><div class=\"line\">    <span class=\"keyword\">if</span> (leftIndex &gt; rightIndex) &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'SORRY: 找不到 '</span> + wantVal + <span class=\"string\">' ！'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> minIndex = <span class=\"built_in\">Math</span>.floor((leftIndex + rightIndex) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[minIndex] &gt; wantVal) &#123;</div><div class=\"line\">        binarySearch(arr, wantVal, leftIndex, minIndex - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[minIndex] &lt; wantVal) &#123;</div><div class=\"line\">        binarySearch(arr, wantVal, minIndex + <span class=\"number\">1</span>, rightIndex);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'找到了 '</span> + wantVal + <span class=\"string\">' ,下标为'</span> + minIndex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">binarySearch(arr, <span class=\"number\">99</span>, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>js 对象访问属性的二种方式</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"keyword\">new</span> Person ();</div><div class=\"line\">new1.name=<span class=\"string\">'冯杰'</span>;</div><div class=\"line\">new1.age=<span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(new1.name);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(new1[<span class=\"string\">\"age\"</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>js delete 只能 删除对象的属性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">me.name=<span class=\"string\">'冯杰'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.name);</div><div class=\"line\"><span class=\"keyword\">delete</span> me.name;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.name);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在js 中 对象的方法不是通用的 如果生成n个对象 那么就有n个内存堆栈</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js 中 一切类 继承自 Object 而Object 有propotype</span></div><div class=\"line\"><span class=\"comment\">// 下面是解决办法 prototype 获得类的static性质</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">God</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">God.prototype.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"string\">'小狗叫'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> God();</div><div class=\"line\"><span class=\"keyword\">var</span> dog2 = <span class=\"keyword\">new</span> God();</div><div class=\"line\">dog1.shout();</div><div class=\"line\">dog2.shout();</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类</span></div><div class=\"line\"><span class=\"comment\">// Object 类是所有js类的基类 Object 就表示对象（一切的对象）</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">p1.name = <span class=\"string\">'fj'</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(p1.name);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(p1.constructor);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 原型链上新增默认对象方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num.constructor);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num2.constructor);</div><div class=\"line\"><span class=\"comment\">// 上面2个弹出是一样的</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123; <span class=\"comment\">//prototype是属于类的</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> + a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num.add(<span class=\"number\">1</span>).add(<span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小实验 为Array 添加 find(val) 方法</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] == a) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'find fail.'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">77</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(arr.find(<span class=\"number\">77</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>当需要输出字符串的时候默认调用toString</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name,breed,color,sex</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name=name;</div><div class=\"line\">   <span class=\"keyword\">this</span>.breed=breed;</div><div class=\"line\">   <span class=\"keyword\">this</span>.color=color;</div><div class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</div><div class=\"line\">&#125;</div><div class=\"line\">Dog.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dogToString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"string\">\"Dog \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">this</span>.sex + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.color + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.breed;</div><div class=\"line\">  <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> theDog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">\"Gabby\"</span>,<span class=\"string\">\"Lab\"</span>,<span class=\"string\">\"chocolate\"</span>,<span class=\"string\">\"female\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(theDog+<span class=\"string\">''</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>prototype 的方法不能访问私有属性和方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'fj'</span>; <span class=\"comment\">//私有</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">21</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.showAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.showName();</div><div class=\"line\">p1.showAge();</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">'---'</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Father = Father;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Father(name, age); <span class=\"comment\">//通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Son(<span class=\"string\">'fj'</span>, <span class=\"number\">21</span>);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(me.name);</div><div class=\"line\">me.show();</div></pre></td></tr></table></figure>\n</li>\n<li><p>重载</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>闭包</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组的长度是根据下标的最大而确定的</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr[<span class=\"string\">'a'</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">arr[<span class=\"string\">'b'</span>] = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(arr.length); <span class=\"comment\">// 打出0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果函数用来初始化一个新建的对象(new), 称之为构造函数constructor.</p>\n</li>\n<li><p>采用64位浮点格式表示数字，　整数范围是-9007199254570992 ~ 9007199054570992,  -2^53 ~ 2^53</p>\n</li>\n</ul>\n<p>var s1 = 0010; 8</p>\n<p>var s2 = 0x0010; 16</p>\n<p>浮点数<br>3.14<br>.2222<br>6.02e23<br>12.3E-32</p>\n<ul>\n<li>javascript 非数字　not-a-number　NaN　跟任何值都不相等，包括自身。</li>\n<li>x!=x 当且仅当x为NaN的时候返回true.</li>\n<li>isNaN 如果参数是NaN或者非数字的时候返回true.</li>\n<li>isFinite 用来检测数字是不是有限的。</li>\n</ul>\n<p>string 由16位值组成的不可变的有序序列。</p>\n<p>boolean:</p>\n<blockquote>\n<p>undefined null 0 -0 NaN “”  会转化为false</p>\n</blockquote>\n<p>type of null  -&gt; object<br>type of ‘’ -&gt; string<br>type of undefined -&gt; undefined<br>null == undefined -&gt; true<br>null === undefined -&gt; false</p>\n<p>全局属性：　undefined, Infinity, NaN<br>全局函数：　isNaN(), parseInt(), eval()<br>构造函数：　Date(), RegExp(), String(), Object(), Array()<br>全局对象：　Math, JSON</p>\n<p>Math.floor 返回小于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“舍”；如果x是负数，则把小数“入”。<br>Math.round 1=&gt;1 1.5=&gt;2 1.6=&gt;2 -1.5=&gt;1 -1.6=&gt;2<br>Math.ceil 返回返回大于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“入”；如果x是负数，则把小数“舍”。</p>\n<p>in运算符<br>希望左侧为字符串或者可以转换为字符串。<br>右侧是一个对象。<br>右侧对象是否包含一个名为左操作数的属性值。</p>\n<p>instanceof<br>左侧为对象，右侧为标识对象的类</p>\n<p>原型</p>\n<blockquote>\n<p>It is for example fairly trivial to build a classic model on top of it, while the other<br>is more difficult task.</p>\n</blockquote>\n<p>hasOwnProperty 判断一个对象是否包含自定义属性而不是原型链上的属性。</p>\n<p>hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。</p>\n<p>JavaScript 中原始值（undefined, null, 布尔值，数字和字符串）和对象（包括数组和函数）有着根本的区别，原始值是不可更改的，比如字符串的所有方法都是新返回一个值。</p>\n<p>对象和原始值不同，首先，它他是 可变的 —— 值可以修改。</p>\n<p>JavaScript 中的某些运算符会做隐式的类型转换。如果「+」运算符的一个操作数是字符串，它将会把另外一个操作数转换为字符串。一元「!」运算符将其操作数转换为布尔值并取反</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x + <span class=\"string\">\"\"</span>      <span class=\"comment\">// 等价于 String(x)</span></div><div class=\"line\">+x          <span class=\"comment\">// 等价于 Number(x)</span></div><div class=\"line\">!!x         <span class=\"comment\">// 等价于 Boolean(x)</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">\"3\"</span>)     <span class=\"comment\">// =&gt; 3</span></div><div class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">false</span>)   <span class=\"comment\">// =&gt; \"false\"</span></div><div class=\"line\"><span class=\"built_in\">Boolean</span>([])     <span class=\"comment\">// =&gt; true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>(<span class=\"number\">3</span>)       <span class=\"comment\">// =&gt; new Number(3)</span></div><div class=\"line\"></div><div class=\"line\">x + <span class=\"string\">\"\"</span>      <span class=\"comment\">// 等价于 String(x)</span></div><div class=\"line\">+x          <span class=\"comment\">// 等价于 Number(x)</span></div><div class=\"line\">!!x         <span class=\"comment\">// 等价于 Boolean(x)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">17</span></div><div class=\"line\">binary_sting = n.toString(<span class=\"number\">2</span>)        <span class=\"comment\">// 转换为 \"10001\"</span></div><div class=\"line\">octal_string = <span class=\"string\">\"0\"</span> + n.toString(<span class=\"number\">8</span>)  <span class=\"comment\">// 转换为 \"021\"</span></div><div class=\"line\">hex_string = <span class=\"string\">\"0x\"</span> + n.toString(<span class=\"number\">16</span>)  <span class=\"comment\">// 转换为 \"0x11\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"3 blind mice\"</span>)        <span class=\"comment\">// =&gt; 3</span></div><div class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">\" 3.14 meters\"</span>)      <span class=\"comment\">// =&gt; 3.14</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">0xFF</span>)                  <span class=\"comment\">// =&gt; 255</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0.1\"</span>)                 <span class=\"comment\">// =&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\".1\"</span>)                  <span class=\"comment\">// =&gt; NaN</span></div><div class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"$72.47\"</span>)            <span class=\"comment\">// =&gt; NaN</span></div></pre></td></tr></table></figure>\n<p>###对象转换为原始值</p>\n<blockquote>\n<p>所有对象继承了两个转换方法 toString(), valueOf()<br>toString() 的作用是返回一个反映这个对象的字符串<br>valueOf() 这个方法的作答并未详细定义：如果存在任意原始值，它就默认将对象转换为表示它的<br>原始值。复合值默认返回对象本身</p>\n</blockquote>\n<p>JavaScript 中对象到字符串的转换经过了如下这些步骤：</p>\n<p>如果对象具有 toString() 方法，调用后，如果返回一个原始值，JavaScript 将这个值转换为字符串，并返回<br>如果没有 toString() 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf() 方法，如果存在这个方法，则调用它。如果返回值是原始值，就将这个值值的为字符串并返回<br>否则，无法从 toString() 和 valueOf() 获得一个原始值，这些将抛出一个类型错误异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">typeof</span> (now +<span class=\"number\">1</span>)             <span class=\"comment\">// =&gt; \"string\" 「+」将日期转换为字符串</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> (now <span class=\"number\">-1</span>)             <span class=\"comment\">// =&gt; \"number\" 「-」使用对象到数字的转换</span></div><div class=\"line\">now == now.toString()       <span class=\"comment\">// =&gt; true</span></div><div class=\"line\">now &gt; (now - <span class=\"number\">1</span>)             <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<p>##in 运算符</p>\n<p>希望左操作数是一个字符串或者可转换为字符串。右操作数是一个对象。如果右侧的对象拥有一个名为右操作数值的属性名，那么表达式返回 true。</p>\n<p>##instanceof 运算符</p>\n<p>instanceof 运算符希望左侧操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回 true，否则返回 false。</p>\n<p>##‘use strict’</p>\n<p>‘use strict’ 是 ECMAScript 5 引入的一条指定。非常类似语句但不是，区别在于：</p>\n<ul>\n<li>它 不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式，它是一条没有副作用的表达式语句，什么也没做</li>\n<li>它只能出现在脚本代码的开始或者函数体的开始、任何实体语句之前。但不必一定出现在脚本或者函数休内的首行</li>\n</ul>\n<p>使用 ‘use strict’ 指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码</p>\n<ul>\n<li><p>严格代码以 严格模式 执行，严格模式悠了语言的重要缺陷，并提供健壮的查氏功能和增强的安全机制，和非严格模式的区别如下</p>\n</li>\n<li><p>严格模式中 禁止 使用 width 语句</p>\n</li>\n<li>严格模式中，所有的变量都要先声明，如果给一个未声明的变量、函数、函数参数、catch 从句参数或全局对象的属性赋值，将会抛出一个引用错误异常</li>\n<li>严格模式中，调用的函数（不是方法）中的一个 this 值是 undefined（非严格模式下 this 值总是全局对象），可以利用这个特性来判断当前的 JavaScript 是否支持严格模式 var hasStrictMode = (function() { “use strict”; return this === undefined }())</li>\n<li>严格模式中，给只读属性赋值和给不可扩展的对象创建新成员都将抛出一个类型错误异常（非严格模式中不会报错）</li>\n<li>严格模式中，传入 eval() 的代码不能在调用程序所在的上下文中声明变量或定义函数，非严格模式中可以</li>\n<li>严格模式中，函数里的 arguments 对象拥有传入函数值的 静态副本。非严格模式下，arguments 里的数组元素和函数参数都指向同一个值的引用</li>\n<li>严格模式中，当 delete 运算符后跟随非法的标识符（变量、函数、当函数参数）时，将会抛出一个语法错误异常</li>\n<li>严格模式中试图删除一个 不可配置 的属性将抛出一个类型错误异常（非严格模式中，返回 false）</li>\n<li>严格模式中，一个对象直接量中定义两个或多个 同名属性 将产生一个语法错误</li>\n<li>严格模式中，函数声明中存在两个或多个同名参数将产生一个语法错误</li>\n<li>严格模式中，不允许使用八进制 整数直接量（以 0 为前缀）</li>\n<li>严格模式中，标识符 eval 和 arguments 当做关键字，它们的值是不能更改的，不能给它们赋值，也不能把它们声明为变量、函数名</li>\n<li>严格模式中，限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常<br><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h1><ul>\n<li>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<ol>\n<li>Null(只有一个值： null)</li>\n<li>Undefined(一个没有被赋值的变量会有个默认值 undefined)</li>\n<li>Number</li>\n<li>Boolean(两个值：true 和 false)</li>\n<li>String</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"external\">Symbol</a></li>\n</ol>\n</li>\n<li><p>和Object(对象指内存中的可以被标识符引用的一块区域)</p>\n</li>\n<li><p>数据类型检测</p>\n<ul>\n<li>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<ol>\n<li>undefined - Undefined类型</li>\n<li>number - Number类型</li>\n<li>boolean - Boolean类型</li>\n<li>string - String类型</li>\n<li>symbol - Symbol类型(ECMAScript6新增)</li>\n<li>function - 函数对象([[Call]]在ECMA-262条款中实现了)</li>\n<li>object - 引用类型 或 Null类型<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"built_in\">Function</span>) <span class=\"comment\">// function (Function是函数对象)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>) <span class=\"comment\">// function (new Function也是是函数对象，同等：var func = function()&#123;&#125;)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"built_in\">Array</span>) <span class=\"comment\">// function (Array是函数对象)</span></div><div class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>) <span class=\"comment\">// object（实例化的Array就是object）</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>变量赋值时候的返回值：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"number\">123</span>; <span class=\"comment\">// 返回undefined</span></div><div class=\"line\">name = <span class=\"number\">456</span>; <span class=\"comment\">// 返回456</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。</p>\n</blockquote>\n</li>\n<li><p>获取元素距离页面的top、left</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRec</span>(<span class=\"params\">ele</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _t = <span class=\"built_in\">document</span>.documentElement.clientTop,</div><div class=\"line\">        _l = <span class=\"built_in\">document</span>.documentElement.clientLeft,</div><div class=\"line\">        rect = ele.getBoundingClientRect();</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">top</span>: rect.top - _t,</div><div class=\"line\">        <span class=\"attr\">right</span>: rect.right - _l,</div><div class=\"line\">        <span class=\"attr\">bottom</span>: rect.bottom - _t,</div><div class=\"line\">        <span class=\"attr\">left</span>: rect.left - _l</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。</p>\n</blockquote>\n</li>\n<li><p>数字的固定小数位数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">8.88888</span>,</div><div class=\"line\">    b=<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">// 8.89 或者 8.88</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.toFixed(<span class=\"number\">2</span>)); <span class=\"comment\">// 8.00</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>js是编译语言，数组长度是随时程序变化而变化的</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</div><div class=\"line\">arr[<span class=\"number\">3</span>] = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">2</span>]); <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>矩阵的转置</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"comment\">// 定义一个矩阵（二维数据）</span></div><div class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</div><div class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>],</div><div class=\"line\">    [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>],</div><div class=\"line\">    [<span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeArr</span>(<span class=\"params\">arr</span>) </span>&#123; <span class=\"comment\">// 矩阵转置函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> c;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            c = arr[i][j];</div><div class=\"line\">            arr[i][j] = arr[j][i];</div><div class=\"line\">            arr[j][i] = c;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">changeArr(arr);</div><div class=\"line\"><span class=\"built_in\">console</span>.table(arr);</div></pre></td></tr></table></figure>\n</li>\n<li><p>冒泡排序方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 第一轮是对n-1的位置定位</span></div><div class=\"line\"><span class=\"comment\">// 第二轮是 每一个位置的数的 确定</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">99</span>, <span class=\"number\">111</span>, <span class=\"number\">112</span>, <span class=\"number\">113</span>, <span class=\"number\">133</span>],</div><div class=\"line\">    temp = <span class=\"number\">0</span>,</div><div class=\"line\">    flag = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'come'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            temp = arr[j];</div><div class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">            flag = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (flag) &#123;</div><div class=\"line\">        flag = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'brak'</span>)</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.writeln(arr[i]);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>二分查找</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">41</span>, <span class=\"number\">55</span>, <span class=\"number\">76</span>, <span class=\"number\">87</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>, <span class=\"number\">123</span>, <span class=\"number\">432</span>, <span class=\"number\">546</span>, <span class=\"number\">577</span>, <span class=\"number\">688</span>, <span class=\"number\">786</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr, wantVal, leftIndex, rightIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'leftIndex: '</span> + leftIndex + <span class=\"string\">' rightIndex: '</span> + rightIndex)</div><div class=\"line\">    <span class=\"keyword\">if</span> (leftIndex &gt; rightIndex) &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'SORRY: 找不到 '</span> + wantVal + <span class=\"string\">' ！'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> minIndex = <span class=\"built_in\">Math</span>.floor((leftIndex + rightIndex) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[minIndex] &gt; wantVal) &#123;</div><div class=\"line\">        binarySearch(arr, wantVal, leftIndex, minIndex - <span class=\"number\">1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[minIndex] &lt; wantVal) &#123;</div><div class=\"line\">        binarySearch(arr, wantVal, minIndex + <span class=\"number\">1</span>, rightIndex);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.writeln(<span class=\"string\">'找到了 '</span> + wantVal + <span class=\"string\">' ,下标为'</span> + minIndex);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">binarySearch(arr, <span class=\"number\">99</span>, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>js 对象访问属性的二种方式</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> new1 = <span class=\"keyword\">new</span> Person ();</div><div class=\"line\">new1.name=<span class=\"string\">'冯杰'</span>;</div><div class=\"line\">new1.age=<span class=\"number\">21</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(new1.name);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(new1[<span class=\"string\">\"age\"</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>js delete 只能 删除对象的属性</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">me.name=<span class=\"string\">'冯杰'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.name);</div><div class=\"line\"><span class=\"keyword\">delete</span> me.name;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.name);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在js 中 对象的方法不是通用的 如果生成n个对象 那么就有n个内存堆栈</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js 中 一切类 继承自 Object 而Object 有propotype</span></div><div class=\"line\"><span class=\"comment\">// 下面是解决办法 prototype 获得类的static性质</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">God</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">God.prototype.shout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"string\">'小狗叫'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> God();</div><div class=\"line\"><span class=\"keyword\">var</span> dog2 = <span class=\"keyword\">new</span> God();</div><div class=\"line\">dog1.shout();</div><div class=\"line\">dog2.shout();</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类</span></div><div class=\"line\"><span class=\"comment\">// Object 类是所有js类的基类 Object 就表示对象（一切的对象）</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">p1.name = <span class=\"string\">'fj'</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(p1.name);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(p1.constructor);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 原型链上新增默认对象方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num.constructor);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num2.constructor);</div><div class=\"line\"><span class=\"comment\">// 上面2个弹出是一样的</span></div><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123; <span class=\"comment\">//prototype是属于类的</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> + a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(num.add(<span class=\"number\">1</span>).add(<span class=\"number\">2</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 小实验 为Array 添加 find(val) 方法</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] == a) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'find fail.'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">77</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(arr.find(<span class=\"number\">77</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>当需要输出字符串的时候默认调用toString</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name,breed,color,sex</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name=name;</div><div class=\"line\">   <span class=\"keyword\">this</span>.breed=breed;</div><div class=\"line\">   <span class=\"keyword\">this</span>.color=color;</div><div class=\"line\">   <span class=\"keyword\">this</span>.sex=sex;</div><div class=\"line\">&#125;</div><div class=\"line\">Dog.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dogToString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"string\">\"Dog \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">this</span>.sex + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.color + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.breed;</div><div class=\"line\">  <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> theDog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">\"Gabby\"</span>,<span class=\"string\">\"Lab\"</span>,<span class=\"string\">\"chocolate\"</span>,<span class=\"string\">\"female\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(theDog+<span class=\"string\">''</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>prototype 的方法不能访问私有属性和方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">'fj'</span>; <span class=\"comment\">//私有</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">21</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.showAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.showName();</div><div class=\"line\">p1.showAge();</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">'---'</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Father = Father;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Father(name, age); <span class=\"comment\">//通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Son(<span class=\"string\">'fj'</span>, <span class=\"number\">21</span>);</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(me.name);</div><div class=\"line\">me.show();</div></pre></td></tr></table></figure>\n</li>\n<li><p>重载</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>闭包</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>数组长度</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组的长度是根据下标的最大而确定的</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">arr[<span class=\"string\">'a'</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">arr[<span class=\"string\">'b'</span>] = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert(arr.length); <span class=\"comment\">// 打出0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果函数用来初始化一个新建的对象(new), 称之为构造函数constructor.</p>\n</li>\n<li><p>采用64位浮点格式表示数字，　整数范围是-9007199254570992 ~ 9007199054570992,  -2^53 ~ 2^53</p>\n</li>\n</ul>\n<p>var s1 = 0010; 8</p>\n<p>var s2 = 0x0010; 16</p>\n<p>浮点数<br>3.14<br>.2222<br>6.02e23<br>12.3E-32</p>\n<ul>\n<li>javascript 非数字　not-a-number　NaN　跟任何值都不相等，包括自身。</li>\n<li>x!=x 当且仅当x为NaN的时候返回true.</li>\n<li>isNaN 如果参数是NaN或者非数字的时候返回true.</li>\n<li>isFinite 用来检测数字是不是有限的。</li>\n</ul>\n<p>string 由16位值组成的不可变的有序序列。</p>\n<p>boolean:</p>\n<blockquote>\n<p>undefined null 0 -0 NaN “”  会转化为false</p>\n</blockquote>\n<p>type of null  -&gt; object<br>type of ‘’ -&gt; string<br>type of undefined -&gt; undefined<br>null == undefined -&gt; true<br>null === undefined -&gt; false</p>\n<p>全局属性：　undefined, Infinity, NaN<br>全局函数：　isNaN(), parseInt(), eval()<br>构造函数：　Date(), RegExp(), String(), Object(), Array()<br>全局对象：　Math, JSON</p>\n<p>Math.floor 返回小于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“舍”；如果x是负数，则把小数“入”。<br>Math.round 1=&gt;1 1.5=&gt;2 1.6=&gt;2 -1.5=&gt;1 -1.6=&gt;2<br>Math.ceil 返回返回大于或等于x，并且与之最接近的整数。 如果x是正数，则把小数“入”；如果x是负数，则把小数“舍”。</p>\n<p>in运算符<br>希望左侧为字符串或者可以转换为字符串。<br>右侧是一个对象。<br>右侧对象是否包含一个名为左操作数的属性值。</p>\n<p>instanceof<br>左侧为对象，右侧为标识对象的类</p>\n<p>原型</p>\n<blockquote>\n<p>It is for example fairly trivial to build a classic model on top of it, while the other<br>is more difficult task.</p>\n</blockquote>\n<p>hasOwnProperty 判断一个对象是否包含自定义属性而不是原型链上的属性。</p>\n<p>hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。</p>\n<p>JavaScript 中原始值（undefined, null, 布尔值，数字和字符串）和对象（包括数组和函数）有着根本的区别，原始值是不可更改的，比如字符串的所有方法都是新返回一个值。</p>\n<p>对象和原始值不同，首先，它他是 可变的 —— 值可以修改。</p>\n<p>JavaScript 中的某些运算符会做隐式的类型转换。如果「+」运算符的一个操作数是字符串，它将会把另外一个操作数转换为字符串。一元「!」运算符将其操作数转换为布尔值并取反</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x + <span class=\"string\">\"\"</span>      <span class=\"comment\">// 等价于 String(x)</span></div><div class=\"line\">+x          <span class=\"comment\">// 等价于 Number(x)</span></div><div class=\"line\">!!x         <span class=\"comment\">// 等价于 Boolean(x)</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">\"3\"</span>)     <span class=\"comment\">// =&gt; 3</span></div><div class=\"line\"><span class=\"built_in\">String</span>(<span class=\"literal\">false</span>)   <span class=\"comment\">// =&gt; \"false\"</span></div><div class=\"line\"><span class=\"built_in\">Boolean</span>([])     <span class=\"comment\">// =&gt; true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>(<span class=\"number\">3</span>)       <span class=\"comment\">// =&gt; new Number(3)</span></div><div class=\"line\"></div><div class=\"line\">x + <span class=\"string\">\"\"</span>      <span class=\"comment\">// 等价于 String(x)</span></div><div class=\"line\">+x          <span class=\"comment\">// 等价于 Number(x)</span></div><div class=\"line\">!!x         <span class=\"comment\">// 等价于 Boolean(x)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">17</span></div><div class=\"line\">binary_sting = n.toString(<span class=\"number\">2</span>)        <span class=\"comment\">// 转换为 \"10001\"</span></div><div class=\"line\">octal_string = <span class=\"string\">\"0\"</span> + n.toString(<span class=\"number\">8</span>)  <span class=\"comment\">// 转换为 \"021\"</span></div><div class=\"line\">hex_string = <span class=\"string\">\"0x\"</span> + n.toString(<span class=\"number\">16</span>)  <span class=\"comment\">// 转换为 \"0x11\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"3 blind mice\"</span>)        <span class=\"comment\">// =&gt; 3</span></div><div class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">\" 3.14 meters\"</span>)      <span class=\"comment\">// =&gt; 3.14</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">0xFF</span>)                  <span class=\"comment\">// =&gt; 255</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0.1\"</span>)                 <span class=\"comment\">// =&gt; 0</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\".1\"</span>)                  <span class=\"comment\">// =&gt; NaN</span></div><div class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">\"$72.47\"</span>)            <span class=\"comment\">// =&gt; NaN</span></div></pre></td></tr></table></figure>\n<p>###对象转换为原始值</p>\n<blockquote>\n<p>所有对象继承了两个转换方法 toString(), valueOf()<br>toString() 的作用是返回一个反映这个对象的字符串<br>valueOf() 这个方法的作答并未详细定义：如果存在任意原始值，它就默认将对象转换为表示它的<br>原始值。复合值默认返回对象本身</p>\n</blockquote>\n<p>JavaScript 中对象到字符串的转换经过了如下这些步骤：</p>\n<p>如果对象具有 toString() 方法，调用后，如果返回一个原始值，JavaScript 将这个值转换为字符串，并返回<br>如果没有 toString() 方法，或者这个方法并不返回一个原始值，那么 JavaScript 会调用 valueOf() 方法，如果存在这个方法，则调用它。如果返回值是原始值，就将这个值值的为字符串并返回<br>否则，无法从 toString() 和 valueOf() 获得一个原始值，这些将抛出一个类型错误异常</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">typeof</span> (now +<span class=\"number\">1</span>)             <span class=\"comment\">// =&gt; \"string\" 「+」将日期转换为字符串</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> (now <span class=\"number\">-1</span>)             <span class=\"comment\">// =&gt; \"number\" 「-」使用对象到数字的转换</span></div><div class=\"line\">now == now.toString()       <span class=\"comment\">// =&gt; true</span></div><div class=\"line\">now &gt; (now - <span class=\"number\">1</span>)             <span class=\"comment\">// =&gt; true</span></div></pre></td></tr></table></figure>\n<p>##in 运算符</p>\n<p>希望左操作数是一个字符串或者可转换为字符串。右操作数是一个对象。如果右侧的对象拥有一个名为右操作数值的属性名，那么表达式返回 true。</p>\n<p>##instanceof 运算符</p>\n<p>instanceof 运算符希望左侧操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回 true，否则返回 false。</p>\n<p>##‘use strict’</p>\n<p>‘use strict’ 是 ECMAScript 5 引入的一条指定。非常类似语句但不是，区别在于：</p>\n<ul>\n<li>它 不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式，它是一条没有副作用的表达式语句，什么也没做</li>\n<li>它只能出现在脚本代码的开始或者函数体的开始、任何实体语句之前。但不必一定出现在脚本或者函数休内的首行</li>\n</ul>\n<p>使用 ‘use strict’ 指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码</p>\n<ul>\n<li><p>严格代码以 严格模式 执行，严格模式悠了语言的重要缺陷，并提供健壮的查氏功能和增强的安全机制，和非严格模式的区别如下</p>\n</li>\n<li><p>严格模式中 禁止 使用 width 语句</p>\n</li>\n<li>严格模式中，所有的变量都要先声明，如果给一个未声明的变量、函数、函数参数、catch 从句参数或全局对象的属性赋值，将会抛出一个引用错误异常</li>\n<li>严格模式中，调用的函数（不是方法）中的一个 this 值是 undefined（非严格模式下 this 值总是全局对象），可以利用这个特性来判断当前的 JavaScript 是否支持严格模式 var hasStrictMode = (function() { “use strict”; return this === undefined }())</li>\n<li>严格模式中，给只读属性赋值和给不可扩展的对象创建新成员都将抛出一个类型错误异常（非严格模式中不会报错）</li>\n<li>严格模式中，传入 eval() 的代码不能在调用程序所在的上下文中声明变量或定义函数，非严格模式中可以</li>\n<li>严格模式中，函数里的 arguments 对象拥有传入函数值的 静态副本。非严格模式下，arguments 里的数组元素和函数参数都指向同一个值的引用</li>\n<li>严格模式中，当 delete 运算符后跟随非法的标识符（变量、函数、当函数参数）时，将会抛出一个语法错误异常</li>\n<li>严格模式中试图删除一个 不可配置 的属性将抛出一个类型错误异常（非严格模式中，返回 false）</li>\n<li>严格模式中，一个对象直接量中定义两个或多个 同名属性 将产生一个语法错误</li>\n<li>严格模式中，函数声明中存在两个或多个同名参数将产生一个语法错误</li>\n<li>严格模式中，不允许使用八进制 整数直接量（以 0 为前缀）</li>\n<li>严格模式中，标识符 eval 和 arguments 当做关键字，它们的值是不能更改的，不能给它们赋值，也不能把它们声明为变量、函数名</li>\n<li>严格模式中，限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常<br><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></li>\n</ul>\n"},{"layout":"post","title":"underscore","subtitle":"Github","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"http://www.css88.com/doc/underscore1.8.2/docs/underscore.html\n\n### Underscore source code\n\n```javascript\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty; //返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys, //返回一个数组，包含指定对象的所有自有可遍历属性的名称。\n    nativeBind         = FuncProto.bind,\n    // bind()方法会创建一个新函数,称为绑定函数.当调用这个绑定函数时,绑定函数会以创建它时传入 bind()方法的第一个参数作为 this,\n    // 传入 bind()方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n```\n","source":"_posts/2016-08-18-underscore.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore\"\nsubtitle:   \"Github\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - 前端工具\n---\nhttp://www.css88.com/doc/underscore1.8.2/docs/underscore.html\n\n### Underscore source code\n\n```javascript\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty; //返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys, //返回一个数组，包含指定对象的所有自有可遍历属性的名称。\n    nativeBind         = FuncProto.bind,\n    // bind()方法会创建一个新函数,称为绑定函数.当调用这个绑定函数时,绑定函数会以创建它时传入 bind()方法的第一个参数作为 this,\n    // 传入 bind()方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n```\n","slug":"2016-08-18-underscore","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75v000zs7t7x7tqayv0","content":"<p><a href=\"http://www.css88.com/doc/underscore1.8.2/docs/underscore.html\" target=\"_blank\" rel=\"external\">http://www.css88.com/doc/underscore1.8.2/docs/underscore.html</a></p>\n<h3 id=\"Underscore-source-code\"><a href=\"#Underscore-source-code\" class=\"headerlink\" title=\"Underscore source code\"></a>Underscore source code</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//     Underscore.js 1.8.3</span></div><div class=\"line\"><span class=\"comment\">//     http://underscorejs.org</span></div><div class=\"line\"><span class=\"comment\">//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</span></div><div class=\"line\"><span class=\"comment\">//     Underscore may be freely distributed under the MIT license.</span></div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Baseline setup</span></div><div class=\"line\">  <span class=\"comment\">// --------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Establish the root object, `window` in the browser, or `exports` on the server.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> root = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Save the previous value of the `_` variable.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> previousUnderscore = root._;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Save bytes in the minified (but not gzipped) version:</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ArrayProto = <span class=\"built_in\">Array</span>.prototype, ObjProto = <span class=\"built_in\">Object</span>.prototype, FuncProto = <span class=\"built_in\">Function</span>.prototype;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create quick reference variables for speed access to core prototypes.</span></div><div class=\"line\">  <span class=\"keyword\">var</span></div><div class=\"line\">    push             = ArrayProto.push,</div><div class=\"line\">    slice            = ArrayProto.slice,</div><div class=\"line\">    toString         = ObjProto.toString,</div><div class=\"line\">    hasOwnProperty   = ObjProto.hasOwnProperty; <span class=\"comment\">//返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// All **ECMAScript 5** native function implementations that we hope to use</span></div><div class=\"line\">  <span class=\"comment\">// are declared here.</span></div><div class=\"line\">  <span class=\"keyword\">var</span></div><div class=\"line\">    nativeIsArray      = <span class=\"built_in\">Array</span>.isArray,</div><div class=\"line\">    nativeKeys         = <span class=\"built_in\">Object</span>.keys, <span class=\"comment\">//返回一个数组，包含指定对象的所有自有可遍历属性的名称。</span></div><div class=\"line\">    nativeBind         = FuncProto.bind,</div><div class=\"line\">    <span class=\"comment\">// bind()方法会创建一个新函数,称为绑定函数.当调用这个绑定函数时,绑定函数会以创建它时传入 bind()方法的第一个参数作为 this,</span></div><div class=\"line\">    <span class=\"comment\">// 传入 bind()方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</span></div><div class=\"line\">    nativeCreate       = <span class=\"built_in\">Object</span>.create;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Naked function reference for surrogate-prototype-swapping.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a safe reference to the Underscore object for use below.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> _) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> _)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _(obj);</div><div class=\"line\">    <span class=\"keyword\">this</span>._wrapped = obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Export the Underscore object for **Node.js**, with</span></div><div class=\"line\">  <span class=\"comment\">// backwards-compatibility for the old `require()` API. If we're in</span></div><div class=\"line\">  <span class=\"comment\">// the browser, add `_` as a global object.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">      exports = <span class=\"built_in\">module</span>.exports = _;</div><div class=\"line\">    &#125;</div><div class=\"line\">    exports._ = _;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    root._ = _;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Current version.</span></div><div class=\"line\">  _.VERSION = <span class=\"string\">'1.8.3'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal function that returns an efficient (for current engines) version</span></div><div class=\"line\">  <span class=\"comment\">// of the passed-in callback, to be repeatedly applied in other Underscore</span></div><div class=\"line\">  <span class=\"comment\">// functions.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> func;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, other);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, index, collection);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// A mostly-internal function to generate callbacks that can be applied</span></div><div class=\"line\">  <span class=\"comment\">// to each element in a collection, returning the desired result — either</span></div><div class=\"line\">  <span class=\"comment\">// identity, an arbitrary callback, a property matcher, or a property accessor.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  _.iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> cb(value, context, <span class=\"literal\">Infinity</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function for creating assigner functions.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">      <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],</div><div class=\"line\">            keys = keysFunc(source),</div><div class=\"line\">            l = keys.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">          <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function for creating a new object that inherits from another.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(prototype);</div><div class=\"line\">    Ctor.prototype = prototype;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</div><div class=\"line\">    Ctor.prototype = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Helper for collection methods to determine whether a collection</span></div><div class=\"line\">  <span class=\"comment\">// should be iterated as an array or as an object</span></div><div class=\"line\">  <span class=\"comment\">// Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength</span></div><div class=\"line\">  <span class=\"comment\">// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094</span></div><div class=\"line\">  <span class=\"keyword\">var</span> MAX_ARRAY_INDEX = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> getLength = property(<span class=\"string\">'length'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> isArrayLike = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">collection</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = getLength(collection);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> length == <span class=\"string\">'number'</span> &amp;&amp; length &gt;= <span class=\"number\">0</span> &amp;&amp; length &lt;= MAX_ARRAY_INDEX;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Collection Functions</span></div><div class=\"line\">  <span class=\"comment\">// --------------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The cornerstone, an `each` implementation, aka `forEach`.</span></div><div class=\"line\">  <span class=\"comment\">// Handles raw objects in addition to array-likes. Treats all</span></div><div class=\"line\">  <span class=\"comment\">// sparse array-likes as if they were dense.</span></div><div class=\"line\">  _.each = _.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = optimizeCb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> i, length;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        iteratee(obj[i], i, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">        iteratee(obj[keys[i]], keys[i], obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the results of applying the iteratee to each element.</span></div><div class=\"line\">  _.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length,</div><div class=\"line\">        results = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      results[index] = iteratee(obj[currentKey], currentKey, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a reducing function iterating left or right.</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReduce</span>(<span class=\"params\">dir</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Optimized iterator function as using arguments.length</span></div><div class=\"line\">    <span class=\"comment\">// in the main function will deoptimize the, see #1991.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">obj, iteratee, memo, keys, index, length</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">        memo = iteratee(memo, obj[currentKey], currentKey, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> memo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</div><div class=\"line\">      iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">          length = (keys || obj).length,</div><div class=\"line\">          index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</div><div class=\"line\">      <span class=\"comment\">// Determine the initial value if none is provided.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        memo = obj[keys ? keys[index] : index];</div><div class=\"line\">        index += dir;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> iterator(obj, iteratee, memo, keys, index, length);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// **Reduce** builds up a single result from a list of values, aka `inject`,</span></div><div class=\"line\">  <span class=\"comment\">// or `foldl`.</span></div><div class=\"line\">  _.reduce = _.foldl = _.inject = createReduce(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The right-associative version of reduce, also known as `foldr`.</span></div><div class=\"line\">  _.reduceRight = _.foldr = createReduce(<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the first value which passes a truth test. Aliased as `detect`.</span></div><div class=\"line\">  _.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</div><div class=\"line\">      key = _.findIndex(obj, predicate, context);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      key = _.findKey(obj, predicate, context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return all the elements that pass a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `select`.</span></div><div class=\"line\">  _.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> results = [];</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return all the elements for which a truth test fails.</span></div><div class=\"line\">  _.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine whether all of the elements match a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `all`.</span></div><div class=\"line\">  _.every = _.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine if at least one element in the object matches a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `any`.</span></div><div class=\"line\">  _.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine if the array or object contains a given item (using `===`).</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `includes` and `include`.</span></div><div class=\"line\">  _.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, item, fromIndex, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isArrayLike(obj)) obj = _.values(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex != <span class=\"string\">'number'</span> || guard) fromIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, item, fromIndex) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invoke a method (with arguments) on every item in a collection.</span></div><div class=\"line\">  _.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> func = isFunc ? method : value[method];</div><div class=\"line\">      <span class=\"keyword\">return</span> func == <span class=\"literal\">null</span> ? func : func.apply(value, args);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `map`: fetching a property.</span></div><div class=\"line\">  _.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, _.property(key));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `filter`: selecting only objects</span></div><div class=\"line\">  <span class=\"comment\">// containing specific `key:value` pairs.</span></div><div class=\"line\">  _.where = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(obj, _.matcher(attrs));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `find`: getting the first object</span></div><div class=\"line\">  <span class=\"comment\">// containing specific `key:value` pairs.</span></div><div class=\"line\">  _.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matcher(attrs));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the maximum element (or element-based computation).</span></div><div class=\"line\">  _.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</div><div class=\"line\">        value, computed;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      obj = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        value = obj[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">        computed = iteratee(value, index, list);</div><div class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">          lastComputed = computed;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the minimum element (or element-based computation).</span></div><div class=\"line\">  _.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</div><div class=\"line\">        value, computed;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      obj = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        value = obj[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">        computed = iteratee(value, index, list);</div><div class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">          lastComputed = computed;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Shuffle a collection, using the modern version of the</span></div><div class=\"line\">  <span class=\"comment\">// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).</span></div><div class=\"line\">  _.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> set = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> shuffled = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</div><div class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</div><div class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</div><div class=\"line\">      shuffled[rand] = set[index];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shuffled;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Sample **n** random values from a collection.</span></div><div class=\"line\">  <span class=\"comment\">// If **n** is not specified, returns a single random element.</span></div><div class=\"line\">  <span class=\"comment\">// The internal `guard` argument allows it to work with `map`.</span></div><div class=\"line\">  _.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!isArrayLike(obj)) obj = _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Sort the object's values by a criterion produced by an iteratee.</span></div><div class=\"line\">  _.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">value</span>: value,</div><div class=\"line\">        <span class=\"attr\">index</span>: index,</div><div class=\"line\">        <span class=\"attr\">criteria</span>: iteratee(value, index, list)</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = left.criteria;</div><div class=\"line\">      <span class=\"keyword\">var</span> b = right.criteria;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a !== b) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a &gt; b || a === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a &lt; b || b === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> left.index - right.index;</div><div class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function used for aggregate \"group by\" operations.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</div><div class=\"line\">        behavior(result, value, key);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Groups the object's values by a criterion. Pass either a string attribute</span></div><div class=\"line\">  <span class=\"comment\">// to group by, or a function that returns the criterion.</span></div><div class=\"line\">  _.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Indexes the object's values by a criterion, similar to `groupBy`, but for</span></div><div class=\"line\">  <span class=\"comment\">// when you know that your index values will be unique.</span></div><div class=\"line\">  _.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    result[key] = value;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Counts instances of an object that group by a certain criterion. Pass</span></div><div class=\"line\">  <span class=\"comment\">// either a string attribute to count by, or a function that returns the</span></div><div class=\"line\">  <span class=\"comment\">// criterion.</span></div><div class=\"line\">  _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key]++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Safely create a real, live array from anything iterable.</span></div><div class=\"line\">  _.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) <span class=\"keyword\">return</span> _.map(obj, _.identity);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the number of elements in an object.</span></div><div class=\"line\">  _.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> isArrayLike(obj) ? obj.length : _.keys(obj).length;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Split a collection into two arrays: one whose elements all satisfy the given</span></div><div class=\"line\">  <span class=\"comment\">// predicate, and one whose elements all do not satisfy the predicate.</span></div><div class=\"line\">  _.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = [], fail = [];</div><div class=\"line\">    _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123;</div><div class=\"line\">      (predicate(value, key, obj) ? pass : fail).push(value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> [pass, fail];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Array Functions</span></div><div class=\"line\">  <span class=\"comment\">// ---------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Get the first element of an array. Passing **n** will return the first N</span></div><div class=\"line\">  <span class=\"comment\">// values in the array. Aliased as `head` and `take`. The **guard** check</span></div><div class=\"line\">  <span class=\"comment\">// allows it to work with `_.map`.</span></div><div class=\"line\">  _.first = _.head = _.take = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> _.initial(array, array.length - n);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns everything but the last entry of the array. Especially useful on</span></div><div class=\"line\">  <span class=\"comment\">// the arguments object. Passing **n** will return all the values in</span></div><div class=\"line\">  <span class=\"comment\">// the array, excluding the last N.</span></div><div class=\"line\">  _.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Get the last element of an array. Passing **n** will return the last N</span></div><div class=\"line\">  <span class=\"comment\">// values in the array.</span></div><div class=\"line\">  _.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns everything but the first entry of the array. Aliased as `tail` and `drop`.</span></div><div class=\"line\">  <span class=\"comment\">// Especially useful on the arguments object. Passing an **n** will return</span></div><div class=\"line\">  <span class=\"comment\">// the rest N values in the array.</span></div><div class=\"line\">  _.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Trim out all falsy values from an array.</span></div><div class=\"line\">  _.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, _.identity);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal implementation of a recursive `flatten` function.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = getLength(input); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value = input[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</div><div class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</div><div class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</div><div class=\"line\">        output.length += len;</div><div class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</div><div class=\"line\">          output[idx++] = value[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</div><div class=\"line\">        output[idx++] = value;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> output;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Flatten out an array, either recursively (by default), or just one level.</span></div><div class=\"line\">  _.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a version of the array that does not contain the specified value(s).</span></div><div class=\"line\">  _.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce a duplicate-free version of the array. If the array has already</span></div><div class=\"line\">  <span class=\"comment\">// been sorted, you have the option of using a faster algorithm.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `unique`.</span></div><div class=\"line\">  _.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</div><div class=\"line\">      context = iteratee;</div><div class=\"line\">      iteratee = isSorted;</div><div class=\"line\">      isSorted = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> seen = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</div><div class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</div><div class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</div><div class=\"line\">        seen = computed;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</div><div class=\"line\">          seen.push(computed);</div><div class=\"line\">          result.push(value);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</div><div class=\"line\">        result.push(value);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce an array that contains the union: each distinct element from all of</span></div><div class=\"line\">  <span class=\"comment\">// the passed-in arrays.</span></div><div class=\"line\">  _.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce an array that contains every item shared between all the</span></div><div class=\"line\">  <span class=\"comment\">// passed-in arrays.</span></div><div class=\"line\">  _.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Take the difference between one array and a number of other arrays.</span></div><div class=\"line\">  <span class=\"comment\">// Only the elements present in just the first array will remain.</span></div><div class=\"line\">  _.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Zip together multiple lists into a single array -- elements that share</span></div><div class=\"line\">  <span class=\"comment\">// an index go together.</span></div><div class=\"line\">  _.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.unzip(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Complement of _.zip. Unzip accepts an array of arrays and groups</span></div><div class=\"line\">  <span class=\"comment\">// each array's elements on shared indices</span></div><div class=\"line\">  _.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = array &amp;&amp; _.max(array, getLength).length || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      result[index] = _.pluck(array, index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Converts lists into objects. Pass either a single array of `[key, value]`</span></div><div class=\"line\">  <span class=\"comment\">// pairs, or two parallel arrays of the same length -- one of keys, and one of</span></div><div class=\"line\">  <span class=\"comment\">// the corresponding values.</span></div><div class=\"line\">  _.object = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list, values</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(list); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (values) &#123;</div><div class=\"line\">        result[list[i]] = values[i];</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result[list[i][<span class=\"number\">0</span>]] = list[i][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generator function to create the findIndex and findLastIndex functions</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPredicateIndexFinder</span>(<span class=\"params\">dir</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</div><div class=\"line\">      predicate = cb(predicate, context);</div><div class=\"line\">      <span class=\"keyword\">var</span> length = getLength(array);</div><div class=\"line\">      <span class=\"keyword\">var</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first index on an array-like that passes a predicate test</span></div><div class=\"line\">  _.findIndex = createPredicateIndexFinder(<span class=\"number\">1</span>);</div><div class=\"line\">  _.findLastIndex = createPredicateIndexFinder(<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Use a comparator function to figure out the smallest index at which</span></div><div class=\"line\">  <span class=\"comment\">// an object should be inserted so as to maintain order. Uses binary search.</span></div><div class=\"line\">  _.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> value = iteratee(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = getLength(array);</div><div class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (iteratee(array[mid]) &lt; value) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> low;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generator function to create the indexOf and lastIndexOf functions</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIndexFinder</span>(<span class=\"params\">dir, predicateFind, sortedIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, idx</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array);</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> idx == <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dir &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            i = idx &gt;= <span class=\"number\">0</span> ? idx : <span class=\"built_in\">Math</span>.max(idx + length, i);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            length = idx &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(idx + <span class=\"number\">1</span>, length) : idx + length + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sortedIndex &amp;&amp; idx &amp;&amp; length) &#123;</div><div class=\"line\">        idx = sortedIndex(array, item);</div><div class=\"line\">        <span class=\"keyword\">return</span> array[idx] === item ? idx : <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (item !== item) &#123;</div><div class=\"line\">        idx = predicateFind(slice.call(array, i, length), _.isNaN);</div><div class=\"line\">        <span class=\"keyword\">return</span> idx &gt;= <span class=\"number\">0</span> ? idx + i : <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span> (idx = dir &gt; <span class=\"number\">0</span> ? i : length - <span class=\"number\">1</span>; idx &gt;= <span class=\"number\">0</span> &amp;&amp; idx &lt; length; idx += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[idx] === item) <span class=\"keyword\">return</span> idx;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the position of the first occurrence of an item in an array,</span></div><div class=\"line\">  <span class=\"comment\">// or -1 if the item is not included in the array.</span></div><div class=\"line\">  <span class=\"comment\">// If the array is large and already in sort order, pass `true`</span></div><div class=\"line\">  <span class=\"comment\">// for **isSorted** to use binary search.</span></div><div class=\"line\">  _.indexOf = createIndexFinder(<span class=\"number\">1</span>, _.findIndex, _.sortedIndex);</div><div class=\"line\">  _.lastIndexOf = createIndexFinder(<span class=\"number\">-1</span>, _.findLastIndex);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generate an integer Array containing an arithmetic progression. A port of</span></div><div class=\"line\">  <span class=\"comment\">// the native Python `range()` function. See</span></div><div class=\"line\">  <span class=\"comment\">// [the Python documentation](http://docs.python.org/library/functions.html#range).</span></div><div class=\"line\">  _.range = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (stop == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      stop = start || <span class=\"number\">0</span>;</div><div class=\"line\">      start = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    step = step || <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((stop - start) / step), <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> range = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>; idx &lt; length; idx++, start += step) &#123;</div><div class=\"line\">      range[idx] = start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> range;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Function (ahem) Functions</span></div><div class=\"line\">  <span class=\"comment\">// ------------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determines whether to execute a function as a constructor</span></div><div class=\"line\">  <span class=\"comment\">// or a normal function with the provided arguments</span></div><div class=\"line\">  <span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</div><div class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> self;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a function bound to a given object (assigning `this`, and arguments,</span></div><div class=\"line\">  <span class=\"comment\">// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if</span></div><div class=\"line\">  <span class=\"comment\">// available.</span></div><div class=\"line\">  _.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> bound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Partially apply a function by creating a version that has had some of its</span></div><div class=\"line\">  <span class=\"comment\">// arguments pre-filled, without changing its dynamic `this` context. _ acts</span></div><div class=\"line\">  <span class=\"comment\">// as a placeholder, allowing any combination of arguments to be pre-filled.</span></div><div class=\"line\">  _.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>, length = boundArgs.length;</div><div class=\"line\">      <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">        args[i] = boundArgs[i] === _ ? <span class=\"built_in\">arguments</span>[position++] : boundArgs[i];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">while</span> (position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</div><div class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> bound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Bind a number of an object's methods to that object. Remaining arguments</span></div><div class=\"line\">  <span class=\"comment\">// are the method names to be bound. Useful for ensuring that all callbacks</span></div><div class=\"line\">  <span class=\"comment\">// defined on an object belong to it.</span></div><div class=\"line\">  _.bindAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, length = <span class=\"built_in\">arguments</span>.length, key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'bindAll must be passed function names'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      key = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">      obj[key] = _.bind(obj[key], obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Memoize an expensive function by storing its results.</span></div><div class=\"line\">  _.memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, hasher</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> cache = memoize.cache;</div><div class=\"line\">      <span class=\"keyword\">var</span> address = <span class=\"string\">''</span> + (hasher ? hasher.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) : key);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!_.has(cache, address)) cache[address] = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> cache[address];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    memoize.cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> memoize;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Delays a function for the given number of milliseconds, and then calls</span></div><div class=\"line\">  <span class=\"comment\">// it with the arguments supplied.</span></div><div class=\"line\">  _.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">    &#125;, wait);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Defers a function, scheduling it to run after the current call stack has</span></div><div class=\"line\">  <span class=\"comment\">// cleared.</span></div><div class=\"line\">  _.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function, that, when invoked, will only be triggered at most once</span></div><div class=\"line\">  <span class=\"comment\">// during a given window of time. Normally, the throttled function will run</span></div><div class=\"line\">  <span class=\"comment\">// as much as it can, without ever going more than once per `wait` duration;</span></div><div class=\"line\">  <span class=\"comment\">// but if you'd like to disable the execution on the leading edge, pass</span></div><div class=\"line\">  <span class=\"comment\">// `&#123;leading: false&#125;`. To disable execution on the trailing edge, ditto.</span></div><div class=\"line\">  _.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</div><div class=\"line\">      timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</div><div class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</div><div class=\"line\">          clearTimeout(timeout);</div><div class=\"line\">          timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class=\"line\">  <span class=\"comment\">// be triggered. The function will be called after it stops being called for</span></div><div class=\"line\">  <span class=\"comment\">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class=\"line\">  <span class=\"comment\">// leading edge, instead of the trailing.</span></div><div class=\"line\">  _.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timestamp;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, wait - last);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</div><div class=\"line\">          result = func.apply(context, args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      timestamp = _.now();</div><div class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</div><div class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first function passed as an argument to the second,</span></div><div class=\"line\">  <span class=\"comment\">// allowing you to adjust arguments, run code before and after, and</span></div><div class=\"line\">  <span class=\"comment\">// conditionally execute the original function.</span></div><div class=\"line\">  _.wrap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wrapper</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a negated version of the passed-in predicate.</span></div><div class=\"line\">  _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that is the composition of a list of functions, each</span></div><div class=\"line\">  <span class=\"comment\">// consuming the return value of the function that follows.</span></div><div class=\"line\">  _.compose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = args.length - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> i = start;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">while</span> (i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will only be executed on and after the Nth call.</span></div><div class=\"line\">  _.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">times, func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will only be executed up to (but not including) the Nth call.</span></div><div class=\"line\">  _.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">times, func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> memo;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> memo;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will be executed at most one time, no matter how</span></div><div class=\"line\">  <span class=\"comment\">// often you call it. Useful for lazy initialization.</span></div><div class=\"line\">  _.once = _.partial(_.before, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Object Functions</span></div><div class=\"line\">  <span class=\"comment\">// ----------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Keys in IE &lt; 9 that won't be iterated by `for key in ...` and thus missed.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> hasEnumBug = !&#123;<span class=\"attr\">toString</span>: <span class=\"literal\">null</span>&#125;.propertyIsEnumerable(<span class=\"string\">'toString'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> nonEnumerableProps = [<span class=\"string\">'valueOf'</span>, <span class=\"string\">'isPrototypeOf'</span>, <span class=\"string\">'toString'</span>,</div><div class=\"line\">                      <span class=\"string\">'propertyIsEnumerable'</span>, <span class=\"string\">'hasOwnProperty'</span>, <span class=\"string\">'toLocaleString'</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collectNonEnumProps</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nonEnumIdx = nonEnumerableProps.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">constructor</span> = obj.<span class=\"keyword\">constructor</span>;</div><div class=\"line\">    var proto = (_.isFunction(<span class=\"keyword\">constructor</span>) &amp;&amp; <span class=\"keyword\">constructor</span>.prototype) || ObjProto;</div><div class=\"line\"></div><div class=\"line\">    // Constructor is a special case.</div><div class=\"line\">    var prop = '<span class=\"keyword\">constructor</span>';</div><div class=\"line\">    if (_.has(obj, prop) &amp;&amp; !_.contains(keys, prop)) keys.push(prop);</div><div class=\"line\"></div><div class=\"line\">    while (nonEnumIdx--) &#123;</div><div class=\"line\">      prop = nonEnumerableProps[nonEnumIdx];</div><div class=\"line\">      <span class=\"keyword\">if</span> (prop <span class=\"keyword\">in</span> obj &amp;&amp; obj[prop] !== proto[prop] &amp;&amp; !_.contains(keys, prop)) &#123;</div><div class=\"line\">        keys.push(prop);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve the names of an object's own properties.</span></div><div class=\"line\">  <span class=\"comment\">// Delegates to **ECMAScript 5**'s native `Object.keys`</span></div><div class=\"line\">  _.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeKeys) <span class=\"keyword\">return</span> nativeKeys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (_.has(obj, key)) keys.push(key);</div><div class=\"line\">    <span class=\"comment\">// Ahem, IE &lt; 9.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasEnumBug) collectNonEnumProps(obj, keys);</div><div class=\"line\">    <span class=\"keyword\">return</span> keys;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve all the property names of an object.</span></div><div class=\"line\">  _.allKeys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) keys.push(key);</div><div class=\"line\">    <span class=\"comment\">// Ahem, IE &lt; 9.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasEnumBug) collectNonEnumProps(obj, keys);</div><div class=\"line\">    <span class=\"keyword\">return</span> keys;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve the values of an object's properties.</span></div><div class=\"line\">  _.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      values[i] = obj[keys[i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> values;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the results of applying the iteratee to each element of the object</span></div><div class=\"line\">  <span class=\"comment\">// In contrast to _.map it returns an object</span></div><div class=\"line\">  _.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys =  _.keys(obj),</div><div class=\"line\">          length = keys.length,</div><div class=\"line\">          results = &#123;&#125;,</div><div class=\"line\">          currentKey;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">        currentKey = keys[index];</div><div class=\"line\">        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convert an object into a list of `[key, value]` pairs.</span></div><div class=\"line\">  _.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> pairs;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invert the keys and values of an object. The values must be serializable.</span></div><div class=\"line\">  _.invert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      result[obj[keys[i]]] = keys[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a sorted list of the function names available on the object.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `methods`</span></div><div class=\"line\">  _.functions = _.methods = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> names = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> names.sort();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Extend a given object with all the properties in passed-in object(s).</span></div><div class=\"line\">  _.extend = createAssigner(_.allKeys);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Assigns a given object with all the own properties in the passed-in object(s)</span></div><div class=\"line\">  <span class=\"comment\">// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)</span></div><div class=\"line\">  _.extendOwn = _.assign = createAssigner(_.keys);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first key on an object that passes a predicate test</span></div><div class=\"line\">  _.findKey = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj), key;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a copy of the object only containing the whitelisted properties.</span></div><div class=\"line\">  _.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;, obj = object, iteratee, keys;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</div><div class=\"line\">      keys = _.allKeys(obj);</div><div class=\"line\">      iteratee = optimizeCb(oiteratee, context);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</div><div class=\"line\">      obj = <span class=\"built_in\">Object</span>(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">var</span> value = obj[key];</div><div class=\"line\">      <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Return a copy of the object without the blacklisted properties.</span></div><div class=\"line\">  _.omit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(iteratee)) &#123;</div><div class=\"line\">      iteratee = _.negate(iteratee);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</div><div class=\"line\">      iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !_.contains(keys, key);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Fill in a given object with default properties.</span></div><div class=\"line\">  _.defaults = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Creates an object that inherits from the given prototype object.</span></div><div class=\"line\">  <span class=\"comment\">// If additional properties are provided then they will be added to the</span></div><div class=\"line\">  <span class=\"comment\">// created object.</span></div><div class=\"line\">  _.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype, props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = baseCreate(prototype);</div><div class=\"line\">    <span class=\"keyword\">if</span> (props) _.extendOwn(result, props);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a (shallow-cloned) duplicate of an object.</span></div><div class=\"line\">  _.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invokes interceptor with the obj, and then returns obj.</span></div><div class=\"line\">  <span class=\"comment\">// The primary purpose of this method is to \"tap into\" a method chain, in</span></div><div class=\"line\">  <span class=\"comment\">// order to perform operations on intermediate results within the chain.</span></div><div class=\"line\">  _.tap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, interceptor</span>) </span>&#123;</div><div class=\"line\">    interceptor(obj);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns whether an object has a given set of `key:value` pairs.</span></div><div class=\"line\">  _.isMatch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(attrs), length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(object);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal recursive comparison function for `isEqual`.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></div><div class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</div><div class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</div><div class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</div><div class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</div><div class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</div><div class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</div><div class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></div><div class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</div><div class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></div><div class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</div><div class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</div><div class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></div><div class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></div><div class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></div><div class=\"line\">      <span class=\"comment\">// from different frames are.</span></div><div class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</div><div class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</div><div class=\"line\">                               _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor)</div><div class=\"line\">                          &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></div><div class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></div><div class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></div><div class=\"line\">    aStack = aStack || [];</div><div class=\"line\">    bStack = bStack || [];</div><div class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</div><div class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></div><div class=\"line\">      <span class=\"comment\">// unique nested structures.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></div><div class=\"line\">    aStack.push(a);</div><div class=\"line\">    bStack.push(b);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</div><div class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></div><div class=\"line\">      length = a.length;</div><div class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</div><div class=\"line\">      length = keys.length;</div><div class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">        <span class=\"comment\">// Deep compare each member</span></div><div class=\"line\">        key = keys[length];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></div><div class=\"line\">    aStack.pop();</div><div class=\"line\">    bStack.pop();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Perform a deep comparison to check if two objects are equal.</span></div><div class=\"line\">  _.isEqual = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> eq(a, b);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given array, string, or object empty?</span></div><div class=\"line\">  <span class=\"comment\">// An \"empty\" object has no enumerable own-properties.</span></div><div class=\"line\">  _.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj) &amp;&amp; (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.keys(obj).length === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value a DOM element?</span></div><div class=\"line\">  _.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value an array?</span></div><div class=\"line\">  <span class=\"comment\">// Delegates to ECMA5's native Array.isArray</span></div><div class=\"line\">  _.isArray = nativeIsArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given variable an object?</span></div><div class=\"line\">  _.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> obj;</div><div class=\"line\">    <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.</span></div><div class=\"line\">  _.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    _[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object '</span> + name + <span class=\"string\">']'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Define a fallback version of the method in browsers (ahem, IE &lt; 9), where</span></div><div class=\"line\">  <span class=\"comment\">// there isn't any inspectable \"Arguments\" type.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!_.isArguments(<span class=\"built_in\">arguments</span>)) &#123;</div><div class=\"line\">    _.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _.has(obj, <span class=\"string\">'callee'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,</span></div><div class=\"line\">  <span class=\"comment\">// IE 11 (#1621), and in Safari 8 (#1929).</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> /./ != <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Int8Array</span> != <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    _.isFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj == <span class=\"string\">'function'</span> || <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given object a finite number?</span></div><div class=\"line\">  _.isFinite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is the given value `NaN`? (NaN is the only number which does not equal itself).</span></div><div class=\"line\">  _.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value a boolean?</span></div><div class=\"line\">  _.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object Boolean]'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value equal to null?</span></div><div class=\"line\">  _.isNull = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given variable undefined?</span></div><div class=\"line\">  _.isUndefined = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Shortcut function for checking if an object has a given property directly</span></div><div class=\"line\">  <span class=\"comment\">// on itself (in other words, not on a prototype).</span></div><div class=\"line\">  _.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Utility Functions</span></div><div class=\"line\">  <span class=\"comment\">// -----------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Run Underscore.js in *noConflict* mode, returning the `_` variable to its</span></div><div class=\"line\">  <span class=\"comment\">// previous owner. Returns a reference to the Underscore object.</span></div><div class=\"line\">  _.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    root._ = previousUnderscore;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Keep the identity function around for default iteratees.</span></div><div class=\"line\">  _.identity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Predicate-generating functions. Often useful outside of Underscore.</span></div><div class=\"line\">  _.constant = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  _.noop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  _.property = property;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generates a function for a given object that returns a given property.</span></div><div class=\"line\">  _.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj[key];</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a predicate for checking whether an object has a given set of</span></div><div class=\"line\">  <span class=\"comment\">// `key:value` pairs.</span></div><div class=\"line\">  _.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</div><div class=\"line\">    attrs = _.extendOwn(&#123;&#125;, attrs);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Run a function **n** times.</span></div><div class=\"line\">  _.times = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> accum = <span class=\"built_in\">Array</span>(<span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</div><div class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) accum[i] = iteratee(i);</div><div class=\"line\">    <span class=\"keyword\">return</span> accum;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a random integer between min and max (inclusive).</span></div><div class=\"line\">  _.random = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">min, max</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      max = min;</div><div class=\"line\">      min = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// A (possibly faster) way to get the current timestamp as an integer.</span></div><div class=\"line\">  _.now = <span class=\"built_in\">Date</span>.now || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// List of HTML entities for escaping.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> escapeMap = &#123;</div><div class=\"line\">    <span class=\"string\">'&amp;'</span>: <span class=\"string\">'&amp;amp;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</div><div class=\"line\">    <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#x27;'</span>,</div><div class=\"line\">    <span class=\"string\">'`'</span>: <span class=\"string\">'&amp;#x60;'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> unescapeMap = _.invert(escapeMap);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Functions for escaping and unescaping strings to/from HTML interpolation.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createEscaper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> escaper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> map[match];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// Regexes for identifying a key that needs to be escaped</span></div><div class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"string\">'(?:'</span> + _.keys(map).join(<span class=\"string\">'|'</span>) + <span class=\"string\">')'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> testRegexp = <span class=\"built_in\">RegExp</span>(source);</div><div class=\"line\">    <span class=\"keyword\">var</span> replaceRegexp = <span class=\"built_in\">RegExp</span>(source, <span class=\"string\">'g'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</div><div class=\"line\">      string = string == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : <span class=\"string\">''</span> + string;</div><div class=\"line\">      <span class=\"keyword\">return</span> testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  _.escape = createEscaper(escapeMap);</div><div class=\"line\">  _.unescape = createEscaper(unescapeMap);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// If the value of the named `property` is a function then invoke it with the</span></div><div class=\"line\">  <span class=\"comment\">// `object` as context; otherwise, return it.</span></div><div class=\"line\">  _.result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, property, fallback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = object == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : object[property];</div><div class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      value = fallback;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isFunction(value) ? value.call(object) : value;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generate a unique integer id (unique within the entire client session).</span></div><div class=\"line\">  <span class=\"comment\">// Useful for temporary DOM ids.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> idCounter = <span class=\"number\">0</span>;</div><div class=\"line\">  _.uniqueId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prefix</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = ++idCounter + <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> prefix ? prefix + id : id;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// By default, Underscore uses ERB-style template delimiters, change the</span></div><div class=\"line\">  <span class=\"comment\">// following template settings to use alternative delimiters.</span></div><div class=\"line\">  _.templateSettings = &#123;</div><div class=\"line\">    <span class=\"attr\">evaluate</span>    : <span class=\"regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>,</div><div class=\"line\">    <span class=\"attr\">interpolate</span> : <span class=\"regexp\">/&lt;%=([\\s\\S]+?)%&gt;/g</span>,</div><div class=\"line\">    <span class=\"attr\">escape</span>      : <span class=\"regexp\">/&lt;%-([\\s\\S]+?)%&gt;/g</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When customizing `templateSettings`, if you don't want to define an</span></div><div class=\"line\">  <span class=\"comment\">// interpolation, evaluation or escaping regex, we need one that is</span></div><div class=\"line\">  <span class=\"comment\">// guaranteed not to match.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> noMatch = <span class=\"regexp\">/(.)^/</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Certain characters need to be escaped so that they can be put into a</span></div><div class=\"line\">  <span class=\"comment\">// string literal.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> escapes = &#123;</div><div class=\"line\">    <span class=\"string\">\"'\"</span>:      <span class=\"string\">\"'\"</span>,</div><div class=\"line\">    <span class=\"string\">'\\\\'</span>:     <span class=\"string\">'\\\\'</span>,</div><div class=\"line\">    <span class=\"string\">'\\r'</span>:     <span class=\"string\">'r'</span>,</div><div class=\"line\">    <span class=\"string\">'\\n'</span>:     <span class=\"string\">'n'</span>,</div><div class=\"line\">    <span class=\"string\">'\\u2028'</span>: <span class=\"string\">'u2028'</span>,</div><div class=\"line\">    <span class=\"string\">'\\u2029'</span>: <span class=\"string\">'u2029'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> escaper = <span class=\"regexp\">/\\\\|'|\\r|\\n|\\u2028|\\u2029/g</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> escapeChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\\\'</span> + escapes[match];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// JavaScript micro-templating, similar to John Resig's implementation.</span></div><div class=\"line\">  <span class=\"comment\">// Underscore templating handles arbitrary delimiters, preserves whitespace,</span></div><div class=\"line\">  <span class=\"comment\">// and correctly escapes quotes within interpolated code.</span></div><div class=\"line\">  <span class=\"comment\">// NB: `oldSettings` only exists for backwards compatibility.</span></div><div class=\"line\">  _.template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, settings, oldSettings</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!settings &amp;&amp; oldSettings) settings = oldSettings;</div><div class=\"line\">    settings = _.defaults(&#123;&#125;, settings, _.templateSettings);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine delimiters into one regular expression via alternation.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> matcher = <span class=\"built_in\">RegExp</span>([</div><div class=\"line\">      (settings.escape || noMatch).source,</div><div class=\"line\">      (settings.interpolate || noMatch).source,</div><div class=\"line\">      (settings.evaluate || noMatch).source</div><div class=\"line\">    ].join(<span class=\"string\">'|'</span>) + <span class=\"string\">'|$'</span>, <span class=\"string\">'g'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Compile the template source, escaping string literals appropriately.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"string\">\"__p+='\"</span>;</div><div class=\"line\">    text.replace(matcher, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, escape, interpolate, evaluate, offset</span>) </span>&#123;</div><div class=\"line\">      source += text.slice(index, offset).replace(escaper, escapeChar);</div><div class=\"line\">      index = offset + match.length;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"'+\\n((__t=(\"</span> + <span class=\"built_in\">escape</span> + <span class=\"string\">\"))==null?'':_.escape(__t))+\\n'\"</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (interpolate) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"'+\\n((__t=(\"</span> + interpolate + <span class=\"string\">\"))==null?'':__t)+\\n'\"</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (evaluate) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"';\\n\"</span> + evaluate + <span class=\"string\">\"\\n__p+='\"</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Adobe VMs need the match returned to produce the correct offest.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> match;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    source += <span class=\"string\">\"';\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If a variable is not specified, place data values in local scope.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!settings.variable) source = <span class=\"string\">'with(obj||&#123;&#125;)&#123;\\n'</span> + source + <span class=\"string\">'&#125;\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    source = <span class=\"string\">\"var __t,__p='',__j=Array.prototype.join,\"</span> +</div><div class=\"line\">      <span class=\"string\">\"print=function()&#123;__p+=__j.call(arguments,'');&#125;;\\n\"</span> +</div><div class=\"line\">      source + <span class=\"string\">'return __p;\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> render = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(settings.variable || <span class=\"string\">'obj'</span>, <span class=\"string\">'_'</span>, source);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      e.source = source;</div><div class=\"line\">      <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> render.call(<span class=\"keyword\">this</span>, data, _);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Provide the compiled source as a convenience for precompilation.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> argument = settings.variable || <span class=\"string\">'obj'</span>;</div><div class=\"line\">    template.source = <span class=\"string\">'function('</span> + argument + <span class=\"string\">')&#123;\\n'</span> + source + <span class=\"string\">'&#125;'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> template;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add a \"chain\" function. Start chaining a wrapped Underscore object.</span></div><div class=\"line\">  _.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> instance = _(obj);</div><div class=\"line\">    instance._chain = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// OOP</span></div><div class=\"line\">  <span class=\"comment\">// ---------------</span></div><div class=\"line\">  <span class=\"comment\">// If Underscore is called as a function, it returns a wrapped object that</span></div><div class=\"line\">  <span class=\"comment\">// can be used OO-style. This wrapper holds altered versions of all the</span></div><div class=\"line\">  <span class=\"comment\">// underscore functions. Wrapped objects may be chained.</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Helper function to continue chaining intermediate results.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add your own custom functions to the Underscore object.</span></div><div class=\"line\">  _.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> func = _[name] = obj[name];</div><div class=\"line\">      _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</div><div class=\"line\">        push.apply(args, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all of the Underscore functions to the wrapper object.</span></div><div class=\"line\">  _.mixin(_);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all mutator Array functions to the wrapper.</span></div><div class=\"line\">  _.each([<span class=\"string\">'pop'</span>, <span class=\"string\">'push'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'sort'</span>, <span class=\"string\">'splice'</span>, <span class=\"string\">'unshift'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> method = ArrayProto[name];</div><div class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> obj = <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">      method.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> ((name === <span class=\"string\">'shift'</span> || name === <span class=\"string\">'splice'</span>) &amp;&amp; obj.length === <span class=\"number\">0</span>) <span class=\"keyword\">delete</span> obj[<span class=\"number\">0</span>];</div><div class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, obj);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all accessor Array functions to the wrapper.</span></div><div class=\"line\">  _.each([<span class=\"string\">'concat'</span>, <span class=\"string\">'join'</span>, <span class=\"string\">'slice'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> method = ArrayProto[name];</div><div class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, method.apply(<span class=\"keyword\">this</span>._wrapped, <span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Extracts the result from a wrapped and chained object.</span></div><div class=\"line\">  _.prototype.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Provide unwrapping proxy for some methods used in engine operations</span></div><div class=\"line\">  <span class=\"comment\">// such as arithmetic and JSON stringification.</span></div><div class=\"line\">  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;</div><div class=\"line\"></div><div class=\"line\">  _.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// AMD registration happens at the end for compatibility with AMD loaders</span></div><div class=\"line\">  <span class=\"comment\">// that may not enforce next-turn semantics on modules. Even though general</span></div><div class=\"line\">  <span class=\"comment\">// practice for AMD registration is to be anonymous, underscore registers</span></div><div class=\"line\">  <span class=\"comment\">// as a named module because, like jQuery, it is a base library that is</span></div><div class=\"line\">  <span class=\"comment\">// popular enough to be bundled in a third party lib, but not be part of</span></div><div class=\"line\">  <span class=\"comment\">// an AMD load request. Those cases could generate an error when an</span></div><div class=\"line\">  <span class=\"comment\">// anonymous define() is called outside of a loader request.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">    define(<span class=\"string\">'underscore'</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;.call(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.css88.com/doc/underscore1.8.2/docs/underscore.html\" target=\"_blank\" rel=\"external\">http://www.css88.com/doc/underscore1.8.2/docs/underscore.html</a></p>\n<h3 id=\"Underscore-source-code\"><a href=\"#Underscore-source-code\" class=\"headerlink\" title=\"Underscore source code\"></a>Underscore source code</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//     Underscore.js 1.8.3</span></div><div class=\"line\"><span class=\"comment\">//     http://underscorejs.org</span></div><div class=\"line\"><span class=\"comment\">//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</span></div><div class=\"line\"><span class=\"comment\">//     Underscore may be freely distributed under the MIT license.</span></div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Baseline setup</span></div><div class=\"line\">  <span class=\"comment\">// --------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Establish the root object, `window` in the browser, or `exports` on the server.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> root = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Save the previous value of the `_` variable.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> previousUnderscore = root._;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Save bytes in the minified (but not gzipped) version:</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ArrayProto = <span class=\"built_in\">Array</span>.prototype, ObjProto = <span class=\"built_in\">Object</span>.prototype, FuncProto = <span class=\"built_in\">Function</span>.prototype;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create quick reference variables for speed access to core prototypes.</span></div><div class=\"line\">  <span class=\"keyword\">var</span></div><div class=\"line\">    push             = ArrayProto.push,</div><div class=\"line\">    slice            = ArrayProto.slice,</div><div class=\"line\">    toString         = ObjProto.toString,</div><div class=\"line\">    hasOwnProperty   = ObjProto.hasOwnProperty; <span class=\"comment\">//返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// All **ECMAScript 5** native function implementations that we hope to use</span></div><div class=\"line\">  <span class=\"comment\">// are declared here.</span></div><div class=\"line\">  <span class=\"keyword\">var</span></div><div class=\"line\">    nativeIsArray      = <span class=\"built_in\">Array</span>.isArray,</div><div class=\"line\">    nativeKeys         = <span class=\"built_in\">Object</span>.keys, <span class=\"comment\">//返回一个数组，包含指定对象的所有自有可遍历属性的名称。</span></div><div class=\"line\">    nativeBind         = FuncProto.bind,</div><div class=\"line\">    <span class=\"comment\">// bind()方法会创建一个新函数,称为绑定函数.当调用这个绑定函数时,绑定函数会以创建它时传入 bind()方法的第一个参数作为 this,</span></div><div class=\"line\">    <span class=\"comment\">// 传入 bind()方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</span></div><div class=\"line\">    nativeCreate       = <span class=\"built_in\">Object</span>.create;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Naked function reference for surrogate-prototype-swapping.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a safe reference to the Underscore object for use below.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> _) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> _)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _(obj);</div><div class=\"line\">    <span class=\"keyword\">this</span>._wrapped = obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Export the Underscore object for **Node.js**, with</span></div><div class=\"line\">  <span class=\"comment\">// backwards-compatibility for the old `require()` API. If we're in</span></div><div class=\"line\">  <span class=\"comment\">// the browser, add `_` as a global object.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports) &#123;</div><div class=\"line\">      exports = <span class=\"built_in\">module</span>.exports = _;</div><div class=\"line\">    &#125;</div><div class=\"line\">    exports._ = _;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    root._ = _;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Current version.</span></div><div class=\"line\">  _.VERSION = <span class=\"string\">'1.8.3'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal function that returns an efficient (for current engines) version</span></div><div class=\"line\">  <span class=\"comment\">// of the passed-in callback, to be repeatedly applied in other Underscore</span></div><div class=\"line\">  <span class=\"comment\">// functions.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> func;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, other);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, index, collection);</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// A mostly-internal function to generate callbacks that can be applied</span></div><div class=\"line\">  <span class=\"comment\">// to each element in a collection, returning the desired result — either</span></div><div class=\"line\">  <span class=\"comment\">// identity, an arbitrary callback, a property matcher, or a property accessor.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  _.iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> cb(value, context, <span class=\"literal\">Infinity</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function for creating assigner functions.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">      <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],</div><div class=\"line\">            keys = keysFunc(source),</div><div class=\"line\">            l = keys.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">          <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function for creating a new object that inherits from another.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(prototype);</div><div class=\"line\">    Ctor.prototype = prototype;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</div><div class=\"line\">    Ctor.prototype = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Helper for collection methods to determine whether a collection</span></div><div class=\"line\">  <span class=\"comment\">// should be iterated as an array or as an object</span></div><div class=\"line\">  <span class=\"comment\">// Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength</span></div><div class=\"line\">  <span class=\"comment\">// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094</span></div><div class=\"line\">  <span class=\"keyword\">var</span> MAX_ARRAY_INDEX = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> getLength = property(<span class=\"string\">'length'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> isArrayLike = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">collection</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = getLength(collection);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> length == <span class=\"string\">'number'</span> &amp;&amp; length &gt;= <span class=\"number\">0</span> &amp;&amp; length &lt;= MAX_ARRAY_INDEX;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Collection Functions</span></div><div class=\"line\">  <span class=\"comment\">// --------------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The cornerstone, an `each` implementation, aka `forEach`.</span></div><div class=\"line\">  <span class=\"comment\">// Handles raw objects in addition to array-likes. Treats all</span></div><div class=\"line\">  <span class=\"comment\">// sparse array-likes as if they were dense.</span></div><div class=\"line\">  _.each = _.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = optimizeCb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> i, length;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        iteratee(obj[i], i, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">        iteratee(obj[keys[i]], keys[i], obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the results of applying the iteratee to each element.</span></div><div class=\"line\">  _.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length,</div><div class=\"line\">        results = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      results[index] = iteratee(obj[currentKey], currentKey, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a reducing function iterating left or right.</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReduce</span>(<span class=\"params\">dir</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Optimized iterator function as using arguments.length</span></div><div class=\"line\">    <span class=\"comment\">// in the main function will deoptimize the, see #1991.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span>(<span class=\"params\">obj, iteratee, memo, keys, index, length</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">        memo = iteratee(memo, obj[currentKey], currentKey, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> memo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</div><div class=\"line\">      iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">          length = (keys || obj).length,</div><div class=\"line\">          index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</div><div class=\"line\">      <span class=\"comment\">// Determine the initial value if none is provided.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        memo = obj[keys ? keys[index] : index];</div><div class=\"line\">        index += dir;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> iterator(obj, iteratee, memo, keys, index, length);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// **Reduce** builds up a single result from a list of values, aka `inject`,</span></div><div class=\"line\">  <span class=\"comment\">// or `foldl`.</span></div><div class=\"line\">  _.reduce = _.foldl = _.inject = createReduce(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// The right-associative version of reduce, also known as `foldr`.</span></div><div class=\"line\">  _.reduceRight = _.foldr = createReduce(<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the first value which passes a truth test. Aliased as `detect`.</span></div><div class=\"line\">  _.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) &#123;</div><div class=\"line\">      key = _.findIndex(obj, predicate, context);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      key = _.findKey(obj, predicate, context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return all the elements that pass a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `select`.</span></div><div class=\"line\">  _.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> results = [];</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return all the elements for which a truth test fails.</span></div><div class=\"line\">  _.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine whether all of the elements match a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `all`.</span></div><div class=\"line\">  _.every = _.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine if at least one element in the object matches a truth test.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `any`.</span></div><div class=\"line\">  _.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</div><div class=\"line\">        length = (keys || obj).length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> currentKey = keys ? keys[index] : index;</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determine if the array or object contains a given item (using `===`).</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `includes` and `include`.</span></div><div class=\"line\">  _.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, item, fromIndex, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isArrayLike(obj)) obj = _.values(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex != <span class=\"string\">'number'</span> || guard) fromIndex = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, item, fromIndex) &gt;= <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invoke a method (with arguments) on every item in a collection.</span></div><div class=\"line\">  _.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> func = isFunc ? method : value[method];</div><div class=\"line\">      <span class=\"keyword\">return</span> func == <span class=\"literal\">null</span> ? func : func.apply(value, args);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `map`: fetching a property.</span></div><div class=\"line\">  _.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, _.property(key));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `filter`: selecting only objects</span></div><div class=\"line\">  <span class=\"comment\">// containing specific `key:value` pairs.</span></div><div class=\"line\">  _.where = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(obj, _.matcher(attrs));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convenience version of a common use case of `find`: getting the first object</span></div><div class=\"line\">  <span class=\"comment\">// containing specific `key:value` pairs.</span></div><div class=\"line\">  _.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matcher(attrs));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the maximum element (or element-based computation).</span></div><div class=\"line\">  _.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</div><div class=\"line\">        value, computed;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      obj = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        value = obj[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">        computed = iteratee(value, index, list);</div><div class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">          lastComputed = computed;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the minimum element (or element-based computation).</span></div><div class=\"line\">  _.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</div><div class=\"line\">        value, computed;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      obj = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</div><div class=\"line\">        value = obj[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">        computed = iteratee(value, index, list);</div><div class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</div><div class=\"line\">          result = value;</div><div class=\"line\">          lastComputed = computed;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Shuffle a collection, using the modern version of the</span></div><div class=\"line\">  <span class=\"comment\">// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).</span></div><div class=\"line\">  _.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> set = isArrayLike(obj) ? obj : _.values(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> shuffled = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</div><div class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</div><div class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</div><div class=\"line\">      shuffled[rand] = set[index];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shuffled;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Sample **n** random values from a collection.</span></div><div class=\"line\">  <span class=\"comment\">// If **n** is not specified, returns a single random element.</span></div><div class=\"line\">  <span class=\"comment\">// The internal `guard` argument allows it to work with `map`.</span></div><div class=\"line\">  _.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!isArrayLike(obj)) obj = _.values(obj);</div><div class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Sort the object's values by a criterion produced by an iteratee.</span></div><div class=\"line\">  _.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">value</span>: value,</div><div class=\"line\">        <span class=\"attr\">index</span>: index,</div><div class=\"line\">        <span class=\"attr\">criteria</span>: iteratee(value, index, list)</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> a = left.criteria;</div><div class=\"line\">      <span class=\"keyword\">var</span> b = right.criteria;</div><div class=\"line\">      <span class=\"keyword\">if</span> (a !== b) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a &gt; b || a === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a &lt; b || b === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> left.index - right.index;</div><div class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// An internal function used for aggregate \"group by\" operations.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">      iteratee = cb(iteratee, context);</div><div class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</div><div class=\"line\">        behavior(result, value, key);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Groups the object's values by a criterion. Pass either a string attribute</span></div><div class=\"line\">  <span class=\"comment\">// to group by, or a function that returns the criterion.</span></div><div class=\"line\">  _.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Indexes the object's values by a criterion, similar to `groupBy`, but for</span></div><div class=\"line\">  <span class=\"comment\">// when you know that your index values will be unique.</span></div><div class=\"line\">  _.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    result[key] = value;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Counts instances of an object that group by a certain criterion. Pass</span></div><div class=\"line\">  <span class=\"comment\">// either a string attribute to count by, or a function that returns the</span></div><div class=\"line\">  <span class=\"comment\">// criterion.</span></div><div class=\"line\">  _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key]++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Safely create a real, live array from anything iterable.</span></div><div class=\"line\">  _.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj)) <span class=\"keyword\">return</span> _.map(obj, _.identity);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the number of elements in an object.</span></div><div class=\"line\">  _.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> isArrayLike(obj) ? obj.length : _.keys(obj).length;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Split a collection into two arrays: one whose elements all satisfy the given</span></div><div class=\"line\">  <span class=\"comment\">// predicate, and one whose elements all do not satisfy the predicate.</span></div><div class=\"line\">  _.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> pass = [], fail = [];</div><div class=\"line\">    _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123;</div><div class=\"line\">      (predicate(value, key, obj) ? pass : fail).push(value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> [pass, fail];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Array Functions</span></div><div class=\"line\">  <span class=\"comment\">// ---------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Get the first element of an array. Passing **n** will return the first N</span></div><div class=\"line\">  <span class=\"comment\">// values in the array. Aliased as `head` and `take`. The **guard** check</span></div><div class=\"line\">  <span class=\"comment\">// allows it to work with `_.map`.</span></div><div class=\"line\">  _.first = _.head = _.take = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> _.initial(array, array.length - n);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns everything but the last entry of the array. Especially useful on</span></div><div class=\"line\">  <span class=\"comment\">// the arguments object. Passing **n** will return all the values in</span></div><div class=\"line\">  <span class=\"comment\">// the array, excluding the last N.</span></div><div class=\"line\">  _.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Get the last element of an array. Passing **n** will return the last N</span></div><div class=\"line\">  <span class=\"comment\">// values in the array.</span></div><div class=\"line\">  _.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns everything but the first entry of the array. Aliased as `tail` and `drop`.</span></div><div class=\"line\">  <span class=\"comment\">// Especially useful on the arguments object. Passing an **n** will return</span></div><div class=\"line\">  <span class=\"comment\">// the rest N values in the array.</span></div><div class=\"line\">  _.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Trim out all falsy values from an array.</span></div><div class=\"line\">  _.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, _.identity);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal implementation of a recursive `flatten` function.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = getLength(input); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value = input[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</div><div class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</div><div class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</div><div class=\"line\">        output.length += len;</div><div class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</div><div class=\"line\">          output[idx++] = value[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</div><div class=\"line\">        output[idx++] = value;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> output;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Flatten out an array, either recursively (by default), or just one level.</span></div><div class=\"line\">  _.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a version of the array that does not contain the specified value(s).</span></div><div class=\"line\">  _.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce a duplicate-free version of the array. If the array has already</span></div><div class=\"line\">  <span class=\"comment\">// been sorted, you have the option of using a faster algorithm.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `unique`.</span></div><div class=\"line\">  _.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</div><div class=\"line\">      context = iteratee;</div><div class=\"line\">      iteratee = isSorted;</div><div class=\"line\">      isSorted = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> seen = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</div><div class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</div><div class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</div><div class=\"line\">        seen = computed;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</div><div class=\"line\">          seen.push(computed);</div><div class=\"line\">          result.push(value);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</div><div class=\"line\">        result.push(value);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce an array that contains the union: each distinct element from all of</span></div><div class=\"line\">  <span class=\"comment\">// the passed-in arrays.</span></div><div class=\"line\">  _.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Produce an array that contains every item shared between all the</span></div><div class=\"line\">  <span class=\"comment\">// passed-in arrays.</span></div><div class=\"line\">  _.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Take the difference between one array and a number of other arrays.</span></div><div class=\"line\">  <span class=\"comment\">// Only the elements present in just the first array will remain.</span></div><div class=\"line\">  _.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Zip together multiple lists into a single array -- elements that share</span></div><div class=\"line\">  <span class=\"comment\">// an index go together.</span></div><div class=\"line\">  _.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.unzip(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Complement of _.zip. Unzip accepts an array of arrays and groups</span></div><div class=\"line\">  <span class=\"comment\">// each array's elements on shared indices</span></div><div class=\"line\">  _.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = array &amp;&amp; _.max(array, getLength).length || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">      result[index] = _.pluck(array, index);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Converts lists into objects. Pass either a single array of `[key, value]`</span></div><div class=\"line\">  <span class=\"comment\">// pairs, or two parallel arrays of the same length -- one of keys, and one of</span></div><div class=\"line\">  <span class=\"comment\">// the corresponding values.</span></div><div class=\"line\">  _.object = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list, values</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(list); i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (values) &#123;</div><div class=\"line\">        result[list[i]] = values[i];</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        result[list[i][<span class=\"number\">0</span>]] = list[i][<span class=\"number\">1</span>];</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generator function to create the findIndex and findLastIndex functions</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPredicateIndexFinder</span>(<span class=\"params\">dir</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</div><div class=\"line\">      predicate = cb(predicate, context);</div><div class=\"line\">      <span class=\"keyword\">var</span> length = getLength(array);</div><div class=\"line\">      <span class=\"keyword\">var</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first index on an array-like that passes a predicate test</span></div><div class=\"line\">  _.findIndex = createPredicateIndexFinder(<span class=\"number\">1</span>);</div><div class=\"line\">  _.findLastIndex = createPredicateIndexFinder(<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Use a comparator function to figure out the smallest index at which</span></div><div class=\"line\">  <span class=\"comment\">// an object should be inserted so as to maintain order. Uses binary search.</span></div><div class=\"line\">  _.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> value = iteratee(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = getLength(array);</div><div class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (iteratee(array[mid]) &lt; value) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> low;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generator function to create the indexOf and lastIndexOf functions</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIndexFinder</span>(<span class=\"params\">dir, predicateFind, sortedIndex</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, idx</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array);</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> idx == <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dir &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            i = idx &gt;= <span class=\"number\">0</span> ? idx : <span class=\"built_in\">Math</span>.max(idx + length, i);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            length = idx &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(idx + <span class=\"number\">1</span>, length) : idx + length + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sortedIndex &amp;&amp; idx &amp;&amp; length) &#123;</div><div class=\"line\">        idx = sortedIndex(array, item);</div><div class=\"line\">        <span class=\"keyword\">return</span> array[idx] === item ? idx : <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (item !== item) &#123;</div><div class=\"line\">        idx = predicateFind(slice.call(array, i, length), _.isNaN);</div><div class=\"line\">        <span class=\"keyword\">return</span> idx &gt;= <span class=\"number\">0</span> ? idx + i : <span class=\"number\">-1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span> (idx = dir &gt; <span class=\"number\">0</span> ? i : length - <span class=\"number\">1</span>; idx &gt;= <span class=\"number\">0</span> &amp;&amp; idx &lt; length; idx += dir) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (array[idx] === item) <span class=\"keyword\">return</span> idx;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return the position of the first occurrence of an item in an array,</span></div><div class=\"line\">  <span class=\"comment\">// or -1 if the item is not included in the array.</span></div><div class=\"line\">  <span class=\"comment\">// If the array is large and already in sort order, pass `true`</span></div><div class=\"line\">  <span class=\"comment\">// for **isSorted** to use binary search.</span></div><div class=\"line\">  _.indexOf = createIndexFinder(<span class=\"number\">1</span>, _.findIndex, _.sortedIndex);</div><div class=\"line\">  _.lastIndexOf = createIndexFinder(<span class=\"number\">-1</span>, _.findLastIndex);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generate an integer Array containing an arithmetic progression. A port of</span></div><div class=\"line\">  <span class=\"comment\">// the native Python `range()` function. See</span></div><div class=\"line\">  <span class=\"comment\">// [the Python documentation](http://docs.python.org/library/functions.html#range).</span></div><div class=\"line\">  _.range = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (stop == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      stop = start || <span class=\"number\">0</span>;</div><div class=\"line\">      start = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    step = step || <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((stop - start) / step), <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> range = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>; idx &lt; length; idx++, start += step) &#123;</div><div class=\"line\">      range[idx] = start;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> range;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Function (ahem) Functions</span></div><div class=\"line\">  <span class=\"comment\">// ------------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Determines whether to execute a function as a constructor</span></div><div class=\"line\">  <span class=\"comment\">// or a normal function with the provided arguments</span></div><div class=\"line\">  <span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</div><div class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</div><div class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</div><div class=\"line\">    <span class=\"keyword\">return</span> self;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a function bound to a given object (assigning `this`, and arguments,</span></div><div class=\"line\">  <span class=\"comment\">// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if</span></div><div class=\"line\">  <span class=\"comment\">// available.</span></div><div class=\"line\">  _.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> bound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Partially apply a function by creating a version that has had some of its</span></div><div class=\"line\">  <span class=\"comment\">// arguments pre-filled, without changing its dynamic `this` context. _ acts</span></div><div class=\"line\">  <span class=\"comment\">// as a placeholder, allowing any combination of arguments to be pre-filled.</span></div><div class=\"line\">  _.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> position = <span class=\"number\">0</span>, length = boundArgs.length;</div><div class=\"line\">      <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">        args[i] = boundArgs[i] === _ ? <span class=\"built_in\">arguments</span>[position++] : boundArgs[i];</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">while</span> (position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</div><div class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> bound;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Bind a number of an object's methods to that object. Remaining arguments</span></div><div class=\"line\">  <span class=\"comment\">// are the method names to be bound. Useful for ensuring that all callbacks</span></div><div class=\"line\">  <span class=\"comment\">// defined on an object belong to it.</span></div><div class=\"line\">  _.bindAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, length = <span class=\"built_in\">arguments</span>.length, key;</div><div class=\"line\">    <span class=\"keyword\">if</span> (length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'bindAll must be passed function names'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      key = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">      obj[key] = _.bind(obj[key], obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Memoize an expensive function by storing its results.</span></div><div class=\"line\">  _.memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, hasher</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> cache = memoize.cache;</div><div class=\"line\">      <span class=\"keyword\">var</span> address = <span class=\"string\">''</span> + (hasher ? hasher.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) : key);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!_.has(cache, address)) cache[address] = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> cache[address];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    memoize.cache = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> memoize;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Delays a function for the given number of milliseconds, and then calls</span></div><div class=\"line\">  <span class=\"comment\">// it with the arguments supplied.</span></div><div class=\"line\">  _.delay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">    &#125;, wait);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Defers a function, scheduling it to run after the current call stack has</span></div><div class=\"line\">  <span class=\"comment\">// cleared.</span></div><div class=\"line\">  _.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function, that, when invoked, will only be triggered at most once</span></div><div class=\"line\">  <span class=\"comment\">// during a given window of time. Normally, the throttled function will run</span></div><div class=\"line\">  <span class=\"comment\">// as much as it can, without ever going more than once per `wait` duration;</span></div><div class=\"line\">  <span class=\"comment\">// but if you'd like to disable the execution on the leading edge, pass</span></div><div class=\"line\">  <span class=\"comment\">// `&#123;leading: false&#125;`. To disable execution on the trailing edge, ditto.</span></div><div class=\"line\">  _.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</div><div class=\"line\">      timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</div><div class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</div><div class=\"line\">          clearTimeout(timeout);</div><div class=\"line\">          timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class=\"line\">  <span class=\"comment\">// be triggered. The function will be called after it stops being called for</span></div><div class=\"line\">  <span class=\"comment\">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class=\"line\">  <span class=\"comment\">// leading edge, instead of the trailing.</span></div><div class=\"line\">  _.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timestamp;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, wait - last);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</div><div class=\"line\">          result = func.apply(context, args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      timestamp = _.now();</div><div class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</div><div class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first function passed as an argument to the second,</span></div><div class=\"line\">  <span class=\"comment\">// allowing you to adjust arguments, run code before and after, and</span></div><div class=\"line\">  <span class=\"comment\">// conditionally execute the original function.</span></div><div class=\"line\">  _.wrap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wrapper</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a negated version of the passed-in predicate.</span></div><div class=\"line\">  _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that is the composition of a list of functions, each</span></div><div class=\"line\">  <span class=\"comment\">// consuming the return value of the function that follows.</span></div><div class=\"line\">  _.compose = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> start = args.length - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> i = start;</div><div class=\"line\">      <span class=\"keyword\">var</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">while</span> (i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will only be executed on and after the Nth call.</span></div><div class=\"line\">  _.after = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">times, func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will only be executed up to (but not including) the Nth call.</span></div><div class=\"line\">  _.before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">times, func</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> memo;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> memo;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a function that will be executed at most one time, no matter how</span></div><div class=\"line\">  <span class=\"comment\">// often you call it. Useful for lazy initialization.</span></div><div class=\"line\">  _.once = _.partial(_.before, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Object Functions</span></div><div class=\"line\">  <span class=\"comment\">// ----------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Keys in IE &lt; 9 that won't be iterated by `for key in ...` and thus missed.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> hasEnumBug = !&#123;<span class=\"attr\">toString</span>: <span class=\"literal\">null</span>&#125;.propertyIsEnumerable(<span class=\"string\">'toString'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> nonEnumerableProps = [<span class=\"string\">'valueOf'</span>, <span class=\"string\">'isPrototypeOf'</span>, <span class=\"string\">'toString'</span>,</div><div class=\"line\">                      <span class=\"string\">'propertyIsEnumerable'</span>, <span class=\"string\">'hasOwnProperty'</span>, <span class=\"string\">'toLocaleString'</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">collectNonEnumProps</span>(<span class=\"params\">obj, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> nonEnumIdx = nonEnumerableProps.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">constructor</span> = obj.<span class=\"keyword\">constructor</span>;</div><div class=\"line\">    var proto = (_.isFunction(<span class=\"keyword\">constructor</span>) &amp;&amp; <span class=\"keyword\">constructor</span>.prototype) || ObjProto;</div><div class=\"line\"></div><div class=\"line\">    // Constructor is a special case.</div><div class=\"line\">    var prop = '<span class=\"keyword\">constructor</span>';</div><div class=\"line\">    if (_.has(obj, prop) &amp;&amp; !_.contains(keys, prop)) keys.push(prop);</div><div class=\"line\"></div><div class=\"line\">    while (nonEnumIdx--) &#123;</div><div class=\"line\">      prop = nonEnumerableProps[nonEnumIdx];</div><div class=\"line\">      <span class=\"keyword\">if</span> (prop <span class=\"keyword\">in</span> obj &amp;&amp; obj[prop] !== proto[prop] &amp;&amp; !_.contains(keys, prop)) &#123;</div><div class=\"line\">        keys.push(prop);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve the names of an object's own properties.</span></div><div class=\"line\">  <span class=\"comment\">// Delegates to **ECMAScript 5**'s native `Object.keys`</span></div><div class=\"line\">  _.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">if</span> (nativeKeys) <span class=\"keyword\">return</span> nativeKeys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (_.has(obj, key)) keys.push(key);</div><div class=\"line\">    <span class=\"comment\">// Ahem, IE &lt; 9.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasEnumBug) collectNonEnumProps(obj, keys);</div><div class=\"line\">    <span class=\"keyword\">return</span> keys;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve all the property names of an object.</span></div><div class=\"line\">  _.allKeys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> [];</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) keys.push(key);</div><div class=\"line\">    <span class=\"comment\">// Ahem, IE &lt; 9.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (hasEnumBug) collectNonEnumProps(obj, keys);</div><div class=\"line\">    <span class=\"keyword\">return</span> keys;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Retrieve the values of an object's properties.</span></div><div class=\"line\">  _.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> values = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      values[i] = obj[keys[i]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> values;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the results of applying the iteratee to each element of the object</span></div><div class=\"line\">  <span class=\"comment\">// In contrast to _.map it returns an object</span></div><div class=\"line\">  _.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    iteratee = cb(iteratee, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys =  _.keys(obj),</div><div class=\"line\">          length = keys.length,</div><div class=\"line\">          results = &#123;&#125;,</div><div class=\"line\">          currentKey;</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</div><div class=\"line\">        currentKey = keys[index];</div><div class=\"line\">        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> results;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Convert an object into a list of `[key, value]` pairs.</span></div><div class=\"line\">  _.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> pairs;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invert the keys and values of an object. The values must be serializable.</span></div><div class=\"line\">  _.invert = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      result[obj[keys[i]]] = keys[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a sorted list of the function names available on the object.</span></div><div class=\"line\">  <span class=\"comment\">// Aliased as `methods`</span></div><div class=\"line\">  _.functions = _.methods = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> names = [];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(key);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> names.sort();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Extend a given object with all the properties in passed-in object(s).</span></div><div class=\"line\">  _.extend = createAssigner(_.allKeys);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Assigns a given object with all the own properties in the passed-in object(s)</span></div><div class=\"line\">  <span class=\"comment\">// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)</span></div><div class=\"line\">  _.extendOwn = _.assign = createAssigner(_.keys);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns the first key on an object that passes a predicate test</span></div><div class=\"line\">  _.findKey = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</div><div class=\"line\">    predicate = cb(predicate, context);</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj), key;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a copy of the object only containing the whitelisted properties.</span></div><div class=\"line\">  _.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;, obj = object, iteratee, keys;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</div><div class=\"line\">      keys = _.allKeys(obj);</div><div class=\"line\">      iteratee = optimizeCb(oiteratee, context);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</div><div class=\"line\">      obj = <span class=\"built_in\">Object</span>(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = keys.length; i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">var</span> value = obj[key];</div><div class=\"line\">      <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Return a copy of the object without the blacklisted properties.</span></div><div class=\"line\">  _.omit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(iteratee)) &#123;</div><div class=\"line\">      iteratee = _.negate(iteratee);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</div><div class=\"line\">      iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !_.contains(keys, key);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Fill in a given object with default properties.</span></div><div class=\"line\">  _.defaults = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Creates an object that inherits from the given prototype object.</span></div><div class=\"line\">  <span class=\"comment\">// If additional properties are provided then they will be added to the</span></div><div class=\"line\">  <span class=\"comment\">// created object.</span></div><div class=\"line\">  _.create = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype, props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = baseCreate(prototype);</div><div class=\"line\">    <span class=\"keyword\">if</span> (props) _.extendOwn(result, props);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Create a (shallow-cloned) duplicate of an object.</span></div><div class=\"line\">  _.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> obj;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Invokes interceptor with the obj, and then returns obj.</span></div><div class=\"line\">  <span class=\"comment\">// The primary purpose of this method is to \"tap into\" a method chain, in</span></div><div class=\"line\">  <span class=\"comment\">// order to perform operations on intermediate results within the chain.</span></div><div class=\"line\">  _.tap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, interceptor</span>) </span>&#123;</div><div class=\"line\">    interceptor(obj);</div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns whether an object has a given set of `key:value` pairs.</span></div><div class=\"line\">  _.isMatch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(attrs), length = keys.length;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(object);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">      <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Internal recursive comparison function for `isEqual`.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></div><div class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</div><div class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</div><div class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</div><div class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</div><div class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</div><div class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</div><div class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></div><div class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</div><div class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></div><div class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</div><div class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</div><div class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></div><div class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></div><div class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></div><div class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></div><div class=\"line\">      <span class=\"comment\">// from different frames are.</span></div><div class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</div><div class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</div><div class=\"line\">                               _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor)</div><div class=\"line\">                          &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></div><div class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></div><div class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></div><div class=\"line\">    aStack = aStack || [];</div><div class=\"line\">    bStack = bStack || [];</div><div class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</div><div class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></div><div class=\"line\">      <span class=\"comment\">// unique nested structures.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></div><div class=\"line\">    aStack.push(a);</div><div class=\"line\">    bStack.push(b);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</div><div class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></div><div class=\"line\">      length = a.length;</div><div class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></div><div class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</div><div class=\"line\">      length = keys.length;</div><div class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</div><div class=\"line\">        <span class=\"comment\">// Deep compare each member</span></div><div class=\"line\">        key = keys[length];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></div><div class=\"line\">    aStack.pop();</div><div class=\"line\">    bStack.pop();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Perform a deep comparison to check if two objects are equal.</span></div><div class=\"line\">  _.isEqual = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> eq(a, b);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given array, string, or object empty?</span></div><div class=\"line\">  <span class=\"comment\">// An \"empty\" object has no enumerable own-properties.</span></div><div class=\"line\">  _.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isArrayLike(obj) &amp;&amp; (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.keys(obj).length === <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value a DOM element?</span></div><div class=\"line\">  _.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value an array?</span></div><div class=\"line\">  <span class=\"comment\">// Delegates to ECMA5's native Array.isArray</span></div><div class=\"line\">  _.isArray = nativeIsArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object Array]'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given variable an object?</span></div><div class=\"line\">  _.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> obj;</div><div class=\"line\">    <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.</span></div><div class=\"line\">  _.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    _[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object '</span> + name + <span class=\"string\">']'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Define a fallback version of the method in browsers (ahem, IE &lt; 9), where</span></div><div class=\"line\">  <span class=\"comment\">// there isn't any inspectable \"Arguments\" type.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!_.isArguments(<span class=\"built_in\">arguments</span>)) &#123;</div><div class=\"line\">    _.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _.has(obj, <span class=\"string\">'callee'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,</span></div><div class=\"line\">  <span class=\"comment\">// IE 11 (#1621), and in Safari 8 (#1929).</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> /./ != <span class=\"string\">'function'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Int8Array</span> != <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    _.isFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj == <span class=\"string\">'function'</span> || <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given object a finite number?</span></div><div class=\"line\">  _.isFinite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is the given value `NaN`? (NaN is the only number which does not equal itself).</span></div><div class=\"line\">  _.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value a boolean?</span></div><div class=\"line\">  _.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object Boolean]'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given value equal to null?</span></div><div class=\"line\">  _.isNull = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Is a given variable undefined?</span></div><div class=\"line\">  _.isUndefined = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Shortcut function for checking if an object has a given property directly</span></div><div class=\"line\">  <span class=\"comment\">// on itself (in other words, not on a prototype).</span></div><div class=\"line\">  _.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Utility Functions</span></div><div class=\"line\">  <span class=\"comment\">// -----------------</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Run Underscore.js in *noConflict* mode, returning the `_` variable to its</span></div><div class=\"line\">  <span class=\"comment\">// previous owner. Returns a reference to the Underscore object.</span></div><div class=\"line\">  _.noConflict = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    root._ = previousUnderscore;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Keep the identity function around for default iteratees.</span></div><div class=\"line\">  _.identity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Predicate-generating functions. Often useful outside of Underscore.</span></div><div class=\"line\">  _.constant = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  _.noop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  _.property = property;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generates a function for a given object that returns a given property.</span></div><div class=\"line\">  _.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> obj[key];</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Returns a predicate for checking whether an object has a given set of</span></div><div class=\"line\">  <span class=\"comment\">// `key:value` pairs.</span></div><div class=\"line\">  _.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</div><div class=\"line\">    attrs = _.extendOwn(&#123;&#125;, attrs);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Run a function **n** times.</span></div><div class=\"line\">  _.times = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n, iteratee, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> accum = <span class=\"built_in\">Array</span>(<span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</div><div class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++) accum[i] = iteratee(i);</div><div class=\"line\">    <span class=\"keyword\">return</span> accum;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Return a random integer between min and max (inclusive).</span></div><div class=\"line\">  _.random = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">min, max</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">      max = min;</div><div class=\"line\">      min = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// A (possibly faster) way to get the current timestamp as an integer.</span></div><div class=\"line\">  _.now = <span class=\"built_in\">Date</span>.now || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// List of HTML entities for escaping.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> escapeMap = &#123;</div><div class=\"line\">    <span class=\"string\">'&amp;'</span>: <span class=\"string\">'&amp;amp;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</div><div class=\"line\">    <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#x27;'</span>,</div><div class=\"line\">    <span class=\"string\">'`'</span>: <span class=\"string\">'&amp;#x60;'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> unescapeMap = _.invert(escapeMap);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Functions for escaping and unescaping strings to/from HTML interpolation.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> createEscaper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> escaper = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> map[match];</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// Regexes for identifying a key that needs to be escaped</span></div><div class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"string\">'(?:'</span> + _.keys(map).join(<span class=\"string\">'|'</span>) + <span class=\"string\">')'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> testRegexp = <span class=\"built_in\">RegExp</span>(source);</div><div class=\"line\">    <span class=\"keyword\">var</span> replaceRegexp = <span class=\"built_in\">RegExp</span>(source, <span class=\"string\">'g'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">string</span>) </span>&#123;</div><div class=\"line\">      string = string == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : <span class=\"string\">''</span> + string;</div><div class=\"line\">      <span class=\"keyword\">return</span> testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  _.escape = createEscaper(escapeMap);</div><div class=\"line\">  _.unescape = createEscaper(unescapeMap);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// If the value of the named `property` is a function then invoke it with the</span></div><div class=\"line\">  <span class=\"comment\">// `object` as context; otherwise, return it.</span></div><div class=\"line\">  _.result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, property, fallback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = object == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : object[property];</div><div class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      value = fallback;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.isFunction(value) ? value.call(object) : value;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Generate a unique integer id (unique within the entire client session).</span></div><div class=\"line\">  <span class=\"comment\">// Useful for temporary DOM ids.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> idCounter = <span class=\"number\">0</span>;</div><div class=\"line\">  _.uniqueId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prefix</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = ++idCounter + <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> prefix ? prefix + id : id;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// By default, Underscore uses ERB-style template delimiters, change the</span></div><div class=\"line\">  <span class=\"comment\">// following template settings to use alternative delimiters.</span></div><div class=\"line\">  _.templateSettings = &#123;</div><div class=\"line\">    <span class=\"attr\">evaluate</span>    : <span class=\"regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>,</div><div class=\"line\">    <span class=\"attr\">interpolate</span> : <span class=\"regexp\">/&lt;%=([\\s\\S]+?)%&gt;/g</span>,</div><div class=\"line\">    <span class=\"attr\">escape</span>      : <span class=\"regexp\">/&lt;%-([\\s\\S]+?)%&gt;/g</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// When customizing `templateSettings`, if you don't want to define an</span></div><div class=\"line\">  <span class=\"comment\">// interpolation, evaluation or escaping regex, we need one that is</span></div><div class=\"line\">  <span class=\"comment\">// guaranteed not to match.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> noMatch = <span class=\"regexp\">/(.)^/</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Certain characters need to be escaped so that they can be put into a</span></div><div class=\"line\">  <span class=\"comment\">// string literal.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> escapes = &#123;</div><div class=\"line\">    <span class=\"string\">\"'\"</span>:      <span class=\"string\">\"'\"</span>,</div><div class=\"line\">    <span class=\"string\">'\\\\'</span>:     <span class=\"string\">'\\\\'</span>,</div><div class=\"line\">    <span class=\"string\">'\\r'</span>:     <span class=\"string\">'r'</span>,</div><div class=\"line\">    <span class=\"string\">'\\n'</span>:     <span class=\"string\">'n'</span>,</div><div class=\"line\">    <span class=\"string\">'\\u2028'</span>: <span class=\"string\">'u2028'</span>,</div><div class=\"line\">    <span class=\"string\">'\\u2029'</span>: <span class=\"string\">'u2029'</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> escaper = <span class=\"regexp\">/\\\\|'|\\r|\\n|\\u2028|\\u2029/g</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> escapeChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'\\\\'</span> + escapes[match];</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// JavaScript micro-templating, similar to John Resig's implementation.</span></div><div class=\"line\">  <span class=\"comment\">// Underscore templating handles arbitrary delimiters, preserves whitespace,</span></div><div class=\"line\">  <span class=\"comment\">// and correctly escapes quotes within interpolated code.</span></div><div class=\"line\">  <span class=\"comment\">// NB: `oldSettings` only exists for backwards compatibility.</span></div><div class=\"line\">  _.template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text, settings, oldSettings</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!settings &amp;&amp; oldSettings) settings = oldSettings;</div><div class=\"line\">    settings = _.defaults(&#123;&#125;, settings, _.templateSettings);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine delimiters into one regular expression via alternation.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> matcher = <span class=\"built_in\">RegExp</span>([</div><div class=\"line\">      (settings.escape || noMatch).source,</div><div class=\"line\">      (settings.interpolate || noMatch).source,</div><div class=\"line\">      (settings.evaluate || noMatch).source</div><div class=\"line\">    ].join(<span class=\"string\">'|'</span>) + <span class=\"string\">'|$'</span>, <span class=\"string\">'g'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Compile the template source, escaping string literals appropriately.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"string\">\"__p+='\"</span>;</div><div class=\"line\">    text.replace(matcher, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">match, escape, interpolate, evaluate, offset</span>) </span>&#123;</div><div class=\"line\">      source += text.slice(index, offset).replace(escaper, escapeChar);</div><div class=\"line\">      index = offset + match.length;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">escape</span>) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"'+\\n((__t=(\"</span> + <span class=\"built_in\">escape</span> + <span class=\"string\">\"))==null?'':_.escape(__t))+\\n'\"</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (interpolate) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"'+\\n((__t=(\"</span> + interpolate + <span class=\"string\">\"))==null?'':__t)+\\n'\"</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (evaluate) &#123;</div><div class=\"line\">        source += <span class=\"string\">\"';\\n\"</span> + evaluate + <span class=\"string\">\"\\n__p+='\"</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Adobe VMs need the match returned to produce the correct offest.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> match;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    source += <span class=\"string\">\"';\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If a variable is not specified, place data values in local scope.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!settings.variable) source = <span class=\"string\">'with(obj||&#123;&#125;)&#123;\\n'</span> + source + <span class=\"string\">'&#125;\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    source = <span class=\"string\">\"var __t,__p='',__j=Array.prototype.join,\"</span> +</div><div class=\"line\">      <span class=\"string\">\"print=function()&#123;__p+=__j.call(arguments,'');&#125;;\\n\"</span> +</div><div class=\"line\">      source + <span class=\"string\">'return __p;\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> render = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(settings.variable || <span class=\"string\">'obj'</span>, <span class=\"string\">'_'</span>, source);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      e.source = source;</div><div class=\"line\">      <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> render.call(<span class=\"keyword\">this</span>, data, _);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Provide the compiled source as a convenience for precompilation.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> argument = settings.variable || <span class=\"string\">'obj'</span>;</div><div class=\"line\">    template.source = <span class=\"string\">'function('</span> + argument + <span class=\"string\">')&#123;\\n'</span> + source + <span class=\"string\">'&#125;'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> template;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add a \"chain\" function. Start chaining a wrapped Underscore object.</span></div><div class=\"line\">  _.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> instance = _(obj);</div><div class=\"line\">    instance._chain = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// OOP</span></div><div class=\"line\">  <span class=\"comment\">// ---------------</span></div><div class=\"line\">  <span class=\"comment\">// If Underscore is called as a function, it returns a wrapped object that</span></div><div class=\"line\">  <span class=\"comment\">// can be used OO-style. This wrapper holds altered versions of all the</span></div><div class=\"line\">  <span class=\"comment\">// underscore functions. Wrapped objects may be chained.</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Helper function to continue chaining intermediate results.</span></div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add your own custom functions to the Underscore object.</span></div><div class=\"line\">  _.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> func = _[name] = obj[name];</div><div class=\"line\">      _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</div><div class=\"line\">        push.apply(args, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all of the Underscore functions to the wrapper object.</span></div><div class=\"line\">  _.mixin(_);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all mutator Array functions to the wrapper.</span></div><div class=\"line\">  _.each([<span class=\"string\">'pop'</span>, <span class=\"string\">'push'</span>, <span class=\"string\">'reverse'</span>, <span class=\"string\">'shift'</span>, <span class=\"string\">'sort'</span>, <span class=\"string\">'splice'</span>, <span class=\"string\">'unshift'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> method = ArrayProto[name];</div><div class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> obj = <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">      method.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> ((name === <span class=\"string\">'shift'</span> || name === <span class=\"string\">'splice'</span>) &amp;&amp; obj.length === <span class=\"number\">0</span>) <span class=\"keyword\">delete</span> obj[<span class=\"number\">0</span>];</div><div class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, obj);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Add all accessor Array functions to the wrapper.</span></div><div class=\"line\">  _.each([<span class=\"string\">'concat'</span>, <span class=\"string\">'join'</span>, <span class=\"string\">'slice'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> method = ArrayProto[name];</div><div class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, method.apply(<span class=\"keyword\">this</span>._wrapped, <span class=\"built_in\">arguments</span>));</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Extracts the result from a wrapped and chained object.</span></div><div class=\"line\">  _.prototype.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Provide unwrapping proxy for some methods used in engine operations</span></div><div class=\"line\">  <span class=\"comment\">// such as arithmetic and JSON stringification.</span></div><div class=\"line\">  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;</div><div class=\"line\"></div><div class=\"line\">  _.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + <span class=\"keyword\">this</span>._wrapped;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// AMD registration happens at the end for compatibility with AMD loaders</span></div><div class=\"line\">  <span class=\"comment\">// that may not enforce next-turn semantics on modules. Even though general</span></div><div class=\"line\">  <span class=\"comment\">// practice for AMD registration is to be anonymous, underscore registers</span></div><div class=\"line\">  <span class=\"comment\">// as a named module because, like jQuery, it is a base library that is</span></div><div class=\"line\">  <span class=\"comment\">// popular enough to be bundled in a third party lib, but not be part of</span></div><div class=\"line\">  <span class=\"comment\">// an AMD load request. Those cases could generate an error when an</span></div><div class=\"line\">  <span class=\"comment\">// anonymous define() is called outside of a loader request.</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd) &#123;</div><div class=\"line\">    define(<span class=\"string\">'underscore'</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> _;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;.call(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Frontend Summary","subtitle":"Frontend","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# LazyMan\n\n```javascript\nfunction _LazyMan(name){\n    this.task = [];\n    var self = this;\n    var fn = (function(n){\n        var name = n;\n        return function(){\n            console.log('Hi This is ' + name + '!');\n            self.next();\n        }\n    })(name)\n\n    this.task.push(fn);\n    setTimeout(function(){\n        self.next();\n    }, 0)\n}\n\n_LazyMan.prototype.next = function(){\n    var fn = this.task.shift();\n    fn && fn();\n}\n\n_LazyMan.prototype.eat = function(name){\n    var self = this;\n    var fn = (function(name){\n        return function(){\n            console.log('Eat ' + name + '~');\n            self.next();\n        }\n    })(name)\n    this.task.push(fn);\n    return this;\n}\n\n_LazyMan.prototype.sleep = function(time){\n    var self = this;\n    var fn = (function(time){\n        return function(){\n            setTimeout(function(){\n                console.log('Wake up after ' + time + 's!');\n                self.next();\n            }, time*1000)\n        }\n    })(time);\n    this.task.push(fn);\n    return this;\n}\n\n\nfunction LazyMan(name){\n    return new _LazyMan(name);\n}\n\nLazyMan('Hank').sleep(1).eat('sss')\n\n```\n\n\n\n# 前端优化的方法\n\n> 应用优化涉及各个方面，前端优化只是冰山一角。有人说：“离开系统的性能瓶颈的前端优化都是扯蛋”，我觉得，我们各司其职，做好前端本职工作就好，不要好高骛远。\n\n- 优化目的\n        1. 用户角度：页面加载更快、操作响应更快、体验更好\n        1. 服务端角度：减少请求数、减小请求带宽\n    - 优化方法\n        1. 页面优化\n            - HTTP请求数\n                1. 从设计实现层面简化页面\n                1. 合理设置`HTTP`缓存\n                1. 资源合并与压缩(example：`CSS Sprites`)\n                1. Inline Images（将图片嵌入到页面或style文件）\n                1. Lazy Load Images\n                1. 避免重复的资源请求\n            - 资源的无阻塞加载\n                1. CSS放在HEAD中\n                1. JavaScript置底\n                1. Lazy Load Javascript（example：`AMD`）\n        1. 代码优化\n            - DOM操作优化\n                1. 减少DOM操作，减少`Reflow和Repaint`\n                1. HTML Collection（类数组集合。并不是一个静态的结果，表示的仅是特定的查询，每次访问时会重新执行查询。需要遍历 HTML Collection时，将它转为数组再访问，以提高性能。）\n            - JavaScript\n                1. 减少作用域链查找（example：缓存全局变量）\n                1. 慎用 `with、eval、Function`\n                1. 减少闭包的使用（易内存浪费，不仅仅是常驻内存，重要的是，使用不当会造成无效内存的产生）\n                1. 直接量、局部变量的使用（对象属性以及数组的访问需要更大的开销）\n                1. 减少字符串拼接`+`使用\n            - CSS选择符优化\n                1. 减少层级，多用class（浏览器解析CSS是从右往左）\n            - 资源优化\n                1. 图片格式的选择（非透明大图尽量不用png、PS保存图片为`web格式`且勾选`连续`选项）\n            -  HTML结构优化\n                1. 使用HTML5 DOCTYPE\n                1. 标签闭合、结构分离\n                1. Boolean 属性不需要赋值，如果存在则为True（example：`checked、selected`）\n                1. 语义化、标签统一整洁\n                1. 减少文本和元素混合，并作为另一元素的子元素\n                1. 避免使用`<br />、<hr />`\n\n# 运算符优先级\n\n> 优先级\t运算类型\t关联性\t运算符\n> 20\t圆括号\tn/a\t( … )\n> 19\t成员访问\t从左到右\t… . …\n>       需计算的成员访问\t从左到右\t… [ … ]\n>       new (带参数列表)\tn/a\tnew … ( … )\n> 18\t函数调用\t从左到右\t… ( … )\n>       new (无参数列表)\t从右到左\tnew …\n\n```javascript\n    function Foo() {\n        getName = function () { alert (1); };\n        return this;\n    }\n    Foo.getName = function () { alert (2);};\n    Foo.prototype.getName = function () { alert (3);};\n    var getName = function () { alert (4);};\n    function getName() { alert (5);}\n\n    //请写出以下输出结果：\n\n    //调用Foo对象的一个静态方法\n    Foo.getName();//2\n\n    // 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行\n    getName();//4\n\n    // 因为window对象上挂着foo函数，foo函数体内this同样也着向着window对象，而foo函数执行后把window对象返回给了foo的执行结果作为返回值\n    // Foo()返回window Foo()内部函数表达式覆盖getName\n    Foo().getName();//1\n\n    // 由于上一步已经改变了getName\n    getName();//1\n\n    // 由于成员访问高于new(不带参数)，()函数调用高于new(不带参数) => new (Foo.getName()) => new (alert(2)) => 2\n    new Foo.getName();//2\n\n    // new(带参数)高于函数调用，=> (new Foo()).getName() => new Foo()返回new出来的实例。上面没有getName,所以会去原型链上查找getName\n    new Foo().getName(); //3\n\n    // x => new (new Foo()).getName() => new ((new Foo()).getName()) => 3\n    new new Foo().getName();\n```\n\n```javascript\n    // 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行\n    getName();         // alert( 5 );\n    var getName = function () { alert (4);};\n    function getName() { alert (5);}\n    getName();       //alert(4);\n```\n\n# 闭包\n\n```javascript\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n            // this => window\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());//The Window\n\n　  var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var that = this;\n　　　　　　return function(){\n　　　　　　　　return that.name;\n　　　　　　};\n　　　　}\n　　};\n    alert(object.getNameFunc()());//My Object\n\n    function fun(n,o) {\n        console.log(o)\n        return {\n            fun:function(m){\n                return fun(m,n);\n            }\n        };\n    }\n\n    var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?\n    //undefined,0,0,0 fun(0, unfined) => fun(m){ return fun(m, 0) }\n\n    var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?\n    //fun(0) => undefined => fun(m){ return fun(m, 0) }\n    //fun(1) => 0 => fun(m){ return fun(m, 1) }\n    //fun(2) => 1 => fun(m){ return fun(m, 2) }\n    //fun(3) => 2 => fun(m){ return fun(m, 2) }\n\n    var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?\n    //fun(0) => undefined => fun(m){ return fun(m, 0) }\n    //fun(1) => 0 => fun(m){ return fun(m, 1) }\n    //fun(2) => 1 => fun(m){ return fun(m, 2) }\n    //fun(3) => 1 => fun(m){ return fun(m, 2) }\n```\n\n# Array\n\n> 首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值\n> 其中回调函数接受三个参数 currentValue, index, arrary;而题目中, map只传入了回调函数--parseInt.其次, parseInt 只接受两个两个参数 string,\n> radix(基数). radix的合法区间是2-36. 0或是默认是10.\n```javascript\n    [\"1\", \"2\", \"3\"].map(parseInt)//[1, NaN, NaN]\n```\n\n# double\n\n```javascript\n0.1 + 0.2 = 0.30000000000000004\nMath.round( (.1+.2)*100)/100;\n```\n\n```javascript\nvar name = 'World!';\n(function () {\n    // var name = undefined\n    if (typeof name === 'undefined') {\n        var name = 'Jack';\n        console.log('Goodbye ' + name);\n    } else {\n        console.log('Hello ' + name);\n    }\n})();\n\n```\n","source":"_posts/2017-01-19-frontend-summary.markdown","raw":"---\nlayout:     post\ntitle:      \"Frontend Summary\"\nsubtitle:   \"Frontend\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Frontend\n---\n\n# LazyMan\n\n```javascript\nfunction _LazyMan(name){\n    this.task = [];\n    var self = this;\n    var fn = (function(n){\n        var name = n;\n        return function(){\n            console.log('Hi This is ' + name + '!');\n            self.next();\n        }\n    })(name)\n\n    this.task.push(fn);\n    setTimeout(function(){\n        self.next();\n    }, 0)\n}\n\n_LazyMan.prototype.next = function(){\n    var fn = this.task.shift();\n    fn && fn();\n}\n\n_LazyMan.prototype.eat = function(name){\n    var self = this;\n    var fn = (function(name){\n        return function(){\n            console.log('Eat ' + name + '~');\n            self.next();\n        }\n    })(name)\n    this.task.push(fn);\n    return this;\n}\n\n_LazyMan.prototype.sleep = function(time){\n    var self = this;\n    var fn = (function(time){\n        return function(){\n            setTimeout(function(){\n                console.log('Wake up after ' + time + 's!');\n                self.next();\n            }, time*1000)\n        }\n    })(time);\n    this.task.push(fn);\n    return this;\n}\n\n\nfunction LazyMan(name){\n    return new _LazyMan(name);\n}\n\nLazyMan('Hank').sleep(1).eat('sss')\n\n```\n\n\n\n# 前端优化的方法\n\n> 应用优化涉及各个方面，前端优化只是冰山一角。有人说：“离开系统的性能瓶颈的前端优化都是扯蛋”，我觉得，我们各司其职，做好前端本职工作就好，不要好高骛远。\n\n- 优化目的\n        1. 用户角度：页面加载更快、操作响应更快、体验更好\n        1. 服务端角度：减少请求数、减小请求带宽\n    - 优化方法\n        1. 页面优化\n            - HTTP请求数\n                1. 从设计实现层面简化页面\n                1. 合理设置`HTTP`缓存\n                1. 资源合并与压缩(example：`CSS Sprites`)\n                1. Inline Images（将图片嵌入到页面或style文件）\n                1. Lazy Load Images\n                1. 避免重复的资源请求\n            - 资源的无阻塞加载\n                1. CSS放在HEAD中\n                1. JavaScript置底\n                1. Lazy Load Javascript（example：`AMD`）\n        1. 代码优化\n            - DOM操作优化\n                1. 减少DOM操作，减少`Reflow和Repaint`\n                1. HTML Collection（类数组集合。并不是一个静态的结果，表示的仅是特定的查询，每次访问时会重新执行查询。需要遍历 HTML Collection时，将它转为数组再访问，以提高性能。）\n            - JavaScript\n                1. 减少作用域链查找（example：缓存全局变量）\n                1. 慎用 `with、eval、Function`\n                1. 减少闭包的使用（易内存浪费，不仅仅是常驻内存，重要的是，使用不当会造成无效内存的产生）\n                1. 直接量、局部变量的使用（对象属性以及数组的访问需要更大的开销）\n                1. 减少字符串拼接`+`使用\n            - CSS选择符优化\n                1. 减少层级，多用class（浏览器解析CSS是从右往左）\n            - 资源优化\n                1. 图片格式的选择（非透明大图尽量不用png、PS保存图片为`web格式`且勾选`连续`选项）\n            -  HTML结构优化\n                1. 使用HTML5 DOCTYPE\n                1. 标签闭合、结构分离\n                1. Boolean 属性不需要赋值，如果存在则为True（example：`checked、selected`）\n                1. 语义化、标签统一整洁\n                1. 减少文本和元素混合，并作为另一元素的子元素\n                1. 避免使用`<br />、<hr />`\n\n# 运算符优先级\n\n> 优先级\t运算类型\t关联性\t运算符\n> 20\t圆括号\tn/a\t( … )\n> 19\t成员访问\t从左到右\t… . …\n>       需计算的成员访问\t从左到右\t… [ … ]\n>       new (带参数列表)\tn/a\tnew … ( … )\n> 18\t函数调用\t从左到右\t… ( … )\n>       new (无参数列表)\t从右到左\tnew …\n\n```javascript\n    function Foo() {\n        getName = function () { alert (1); };\n        return this;\n    }\n    Foo.getName = function () { alert (2);};\n    Foo.prototype.getName = function () { alert (3);};\n    var getName = function () { alert (4);};\n    function getName() { alert (5);}\n\n    //请写出以下输出结果：\n\n    //调用Foo对象的一个静态方法\n    Foo.getName();//2\n\n    // 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行\n    getName();//4\n\n    // 因为window对象上挂着foo函数，foo函数体内this同样也着向着window对象，而foo函数执行后把window对象返回给了foo的执行结果作为返回值\n    // Foo()返回window Foo()内部函数表达式覆盖getName\n    Foo().getName();//1\n\n    // 由于上一步已经改变了getName\n    getName();//1\n\n    // 由于成员访问高于new(不带参数)，()函数调用高于new(不带参数) => new (Foo.getName()) => new (alert(2)) => 2\n    new Foo.getName();//2\n\n    // new(带参数)高于函数调用，=> (new Foo()).getName() => new Foo()返回new出来的实例。上面没有getName,所以会去原型链上查找getName\n    new Foo().getName(); //3\n\n    // x => new (new Foo()).getName() => new ((new Foo()).getName()) => 3\n    new new Foo().getName();\n```\n\n```javascript\n    // 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行\n    getName();         // alert( 5 );\n    var getName = function () { alert (4);};\n    function getName() { alert (5);}\n    getName();       //alert(4);\n```\n\n# 闭包\n\n```javascript\n　　var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　return function(){\n            // this => window\n　　　　　　　　return this.name;\n　　　　　　};\n　　　　}\n　　};\n　　alert(object.getNameFunc()());//The Window\n\n　  var name = \"The Window\";\n　　var object = {\n　　　　name : \"My Object\",\n　　　　getNameFunc : function(){\n　　　　　　var that = this;\n　　　　　　return function(){\n　　　　　　　　return that.name;\n　　　　　　};\n　　　　}\n　　};\n    alert(object.getNameFunc()());//My Object\n\n    function fun(n,o) {\n        console.log(o)\n        return {\n            fun:function(m){\n                return fun(m,n);\n            }\n        };\n    }\n\n    var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?\n    //undefined,0,0,0 fun(0, unfined) => fun(m){ return fun(m, 0) }\n\n    var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?\n    //fun(0) => undefined => fun(m){ return fun(m, 0) }\n    //fun(1) => 0 => fun(m){ return fun(m, 1) }\n    //fun(2) => 1 => fun(m){ return fun(m, 2) }\n    //fun(3) => 2 => fun(m){ return fun(m, 2) }\n\n    var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?\n    //fun(0) => undefined => fun(m){ return fun(m, 0) }\n    //fun(1) => 0 => fun(m){ return fun(m, 1) }\n    //fun(2) => 1 => fun(m){ return fun(m, 2) }\n    //fun(3) => 1 => fun(m){ return fun(m, 2) }\n```\n\n# Array\n\n> 首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值\n> 其中回调函数接受三个参数 currentValue, index, arrary;而题目中, map只传入了回调函数--parseInt.其次, parseInt 只接受两个两个参数 string,\n> radix(基数). radix的合法区间是2-36. 0或是默认是10.\n```javascript\n    [\"1\", \"2\", \"3\"].map(parseInt)//[1, NaN, NaN]\n```\n\n# double\n\n```javascript\n0.1 + 0.2 = 0.30000000000000004\nMath.round( (.1+.2)*100)/100;\n```\n\n```javascript\nvar name = 'World!';\n(function () {\n    // var name = undefined\n    if (typeof name === 'undefined') {\n        var name = 'Jack';\n        console.log('Goodbye ' + name);\n    } else {\n        console.log('Hello ' + name);\n    }\n})();\n\n```\n","slug":"2017-01-19-frontend-summary","published":1,"updated":"2017-05-27T06:42:03.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75w0011s7t7vnfvsoza","content":"<h1 id=\"LazyMan\"><a href=\"#LazyMan\" class=\"headerlink\" title=\"LazyMan\"></a>LazyMan</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.task = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = n;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi This is '</span> + name + <span class=\"string\">'!'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.next();</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>.task.shift();</div><div class=\"line\">    fn &amp;&amp; fn();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Eat '</span> + name + <span class=\"string\">'~'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wake up after '</span> + time + <span class=\"string\">'s!'</span>);</div><div class=\"line\">                self.next();</div><div class=\"line\">            &#125;, time*<span class=\"number\">1000</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(time);</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LazyMan(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'Hank'</span>).sleep(<span class=\"number\">1</span>).eat(<span class=\"string\">'sss'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"前端优化的方法\"><a href=\"#前端优化的方法\" class=\"headerlink\" title=\"前端优化的方法\"></a>前端优化的方法</h1><blockquote>\n<p>应用优化涉及各个方面，前端优化只是冰山一角。有人说：“离开系统的性能瓶颈的前端优化都是扯蛋”，我觉得，我们各司其职，做好前端本职工作就好，不要好高骛远。</p>\n</blockquote>\n<ul>\n<li>优化目的<pre><code>1. 用户角度：页面加载更快、操作响应更快、体验更好\n1. 服务端角度：减少请求数、减小请求带宽\n</code></pre><ul>\n<li>优化方法<ol>\n<li>页面优化<ul>\n<li>HTTP请求数<ol>\n<li>从设计实现层面简化页面</li>\n<li>合理设置<code>HTTP</code>缓存</li>\n<li>资源合并与压缩(example：<code>CSS Sprites</code>)</li>\n<li>Inline Images（将图片嵌入到页面或style文件）</li>\n<li>Lazy Load Images</li>\n<li>避免重复的资源请求</li>\n</ol>\n</li>\n<li>资源的无阻塞加载<ol>\n<li>CSS放在HEAD中</li>\n<li>JavaScript置底</li>\n<li>Lazy Load Javascript（example：<code>AMD</code>）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>代码优化<ul>\n<li>DOM操作优化<ol>\n<li>减少DOM操作，减少<code>Reflow和Repaint</code></li>\n<li>HTML Collection（类数组集合。并不是一个静态的结果，表示的仅是特定的查询，每次访问时会重新执行查询。需要遍历 HTML Collection时，将它转为数组再访问，以提高性能。）</li>\n</ol>\n</li>\n<li>JavaScript<ol>\n<li>减少作用域链查找（example：缓存全局变量）</li>\n<li>慎用 <code>with、eval、Function</code></li>\n<li>减少闭包的使用（易内存浪费，不仅仅是常驻内存，重要的是，使用不当会造成无效内存的产生）</li>\n<li>直接量、局部变量的使用（对象属性以及数组的访问需要更大的开销）</li>\n<li>减少字符串拼接<code>+</code>使用</li>\n</ol>\n</li>\n<li>CSS选择符优化<ol>\n<li>减少层级，多用class（浏览器解析CSS是从右往左）</li>\n</ol>\n</li>\n<li>资源优化<ol>\n<li>图片格式的选择（非透明大图尽量不用png、PS保存图片为<code>web格式</code>且勾选<code>连续</code>选项）</li>\n</ol>\n</li>\n<li>HTML结构优化<ol>\n<li>使用HTML5 DOCTYPE</li>\n<li>标签闭合、结构分离</li>\n<li>Boolean 属性不需要赋值，如果存在则为True（example：<code>checked、selected</code>）</li>\n<li>语义化、标签统一整洁</li>\n<li>减少文本和元素混合，并作为另一元素的子元素</li>\n<li>避免使用<code>&lt;br /&gt;、&lt;hr /&gt;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h1><blockquote>\n<p>优先级    运算类型    关联性    运算符<br>20    圆括号    n/a    ( … )<br>19    成员访问    从左到右    … . …<br>      需计算的成员访问    从左到右    … [ … ]<br>      new (带参数列表)    n/a    new … ( … )<br>18    函数调用    从左到右    … ( … )<br>      new (无参数列表)    从右到左    new …</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">2</span>);&#125;;</div><div class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">3</span>);&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//请写出以下输出结果：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用Foo对象的一个静态方法</span></div><div class=\"line\">Foo.getName();<span class=\"comment\">//2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行</span></div><div class=\"line\">getName();<span class=\"comment\">//4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 因为window对象上挂着foo函数，foo函数体内this同样也着向着window对象，而foo函数执行后把window对象返回给了foo的执行结果作为返回值</span></div><div class=\"line\"><span class=\"comment\">// Foo()返回window Foo()内部函数表达式覆盖getName</span></div><div class=\"line\">Foo().getName();<span class=\"comment\">//1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由于上一步已经改变了getName</span></div><div class=\"line\">getName();<span class=\"comment\">//1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由于成员访问高于new(不带参数)，()函数调用高于new(不带参数) =&gt; new (Foo.getName()) =&gt; new (alert(2)) =&gt; 2</span></div><div class=\"line\"><span class=\"keyword\">new</span> Foo.getName();<span class=\"comment\">//2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// new(带参数)高于函数调用，=&gt; (new Foo()).getName() =&gt; new Foo()返回new出来的实例。上面没有getName,所以会去原型链上查找getName</span></div><div class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// x =&gt; new (new Foo()).getName() =&gt; new ((new Foo()).getName()) =&gt; 3</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行</span></div><div class=\"line\">getName();         <span class=\"comment\">// alert( 5 );</span></div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</div><div class=\"line\">getName();       <span class=\"comment\">//alert(4);</span></div></pre></td></tr></table></figure>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// this =&gt; window</span></div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">　　alert(object.getNameFunc()());<span class=\"comment\">//The Window</span></div><div class=\"line\"></div><div class=\"line\">　  <span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">alert(object.getNameFunc()());<span class=\"comment\">//My Object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n,o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(o)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">fun</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fun(m,n);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);  a.fun(<span class=\"number\">1</span>);  a.fun(<span class=\"number\">2</span>);  a.fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//undefined,0,0,0 fun(0, unfined) =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>).fun(<span class=\"number\">2</span>).fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//fun(0) =&gt; undefined =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(1) =&gt; 0 =&gt; fun(m)&#123; return fun(m, 1) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(2) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(3) =&gt; 2 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>);  c.fun(<span class=\"number\">2</span>);  c.fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//fun(0) =&gt; undefined =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(1) =&gt; 0 =&gt; fun(m)&#123; return fun(m, 1) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(2) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(3) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h1><blockquote>\n<p>首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值<br>其中回调函数接受三个参数 currentValue, index, arrary;而题目中, map只传入了回调函数–parseInt.其次, parseInt 只接受两个两个参数 string,<br>radix(基数). radix的合法区间是2-36. 0或是默认是10.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>)<span class=\"comment\">//[1, NaN, NaN]</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"double\"><a href=\"#double\" class=\"headerlink\" title=\"double\"></a>double</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> = <span class=\"number\">0.30000000000000004</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.round( (<span class=\"number\">.1</span>+<span class=\"number\">.2</span>)*<span class=\"number\">100</span>)/<span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// var name = undefined</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"LazyMan\"><a href=\"#LazyMan\" class=\"headerlink\" title=\"LazyMan\"></a>LazyMan</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.task = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = n;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi This is '</span> + name + <span class=\"string\">'!'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.next();</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>.task.shift();</div><div class=\"line\">    fn &amp;&amp; fn();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Eat '</span> + name + <span class=\"string\">'~'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wake up after '</span> + time + <span class=\"string\">'s!'</span>);</div><div class=\"line\">                self.next();</div><div class=\"line\">            &#125;, time*<span class=\"number\">1000</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(time);</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LazyMan(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'Hank'</span>).sleep(<span class=\"number\">1</span>).eat(<span class=\"string\">'sss'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"前端优化的方法\"><a href=\"#前端优化的方法\" class=\"headerlink\" title=\"前端优化的方法\"></a>前端优化的方法</h1><blockquote>\n<p>应用优化涉及各个方面，前端优化只是冰山一角。有人说：“离开系统的性能瓶颈的前端优化都是扯蛋”，我觉得，我们各司其职，做好前端本职工作就好，不要好高骛远。</p>\n</blockquote>\n<ul>\n<li>优化目的<pre><code>1. 用户角度：页面加载更快、操作响应更快、体验更好\n1. 服务端角度：减少请求数、减小请求带宽\n</code></pre><ul>\n<li>优化方法<ol>\n<li>页面优化<ul>\n<li>HTTP请求数<ol>\n<li>从设计实现层面简化页面</li>\n<li>合理设置<code>HTTP</code>缓存</li>\n<li>资源合并与压缩(example：<code>CSS Sprites</code>)</li>\n<li>Inline Images（将图片嵌入到页面或style文件）</li>\n<li>Lazy Load Images</li>\n<li>避免重复的资源请求</li>\n</ol>\n</li>\n<li>资源的无阻塞加载<ol>\n<li>CSS放在HEAD中</li>\n<li>JavaScript置底</li>\n<li>Lazy Load Javascript（example：<code>AMD</code>）</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>代码优化<ul>\n<li>DOM操作优化<ol>\n<li>减少DOM操作，减少<code>Reflow和Repaint</code></li>\n<li>HTML Collection（类数组集合。并不是一个静态的结果，表示的仅是特定的查询，每次访问时会重新执行查询。需要遍历 HTML Collection时，将它转为数组再访问，以提高性能。）</li>\n</ol>\n</li>\n<li>JavaScript<ol>\n<li>减少作用域链查找（example：缓存全局变量）</li>\n<li>慎用 <code>with、eval、Function</code></li>\n<li>减少闭包的使用（易内存浪费，不仅仅是常驻内存，重要的是，使用不当会造成无效内存的产生）</li>\n<li>直接量、局部变量的使用（对象属性以及数组的访问需要更大的开销）</li>\n<li>减少字符串拼接<code>+</code>使用</li>\n</ol>\n</li>\n<li>CSS选择符优化<ol>\n<li>减少层级，多用class（浏览器解析CSS是从右往左）</li>\n</ol>\n</li>\n<li>资源优化<ol>\n<li>图片格式的选择（非透明大图尽量不用png、PS保存图片为<code>web格式</code>且勾选<code>连续</code>选项）</li>\n</ol>\n</li>\n<li>HTML结构优化<ol>\n<li>使用HTML5 DOCTYPE</li>\n<li>标签闭合、结构分离</li>\n<li>Boolean 属性不需要赋值，如果存在则为True（example：<code>checked、selected</code>）</li>\n<li>语义化、标签统一整洁</li>\n<li>减少文本和元素混合，并作为另一元素的子元素</li>\n<li>避免使用<code>&lt;br /&gt;、&lt;hr /&gt;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h1><blockquote>\n<p>优先级    运算类型    关联性    运算符<br>20    圆括号    n/a    ( … )<br>19    成员访问    从左到右    … . …<br>      需计算的成员访问    从左到右    … [ … ]<br>      new (带参数列表)    n/a    new … ( … )<br>18    函数调用    从左到右    … ( … )<br>      new (无参数列表)    从右到左    new …</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">1</span>); &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">2</span>);&#125;;</div><div class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">3</span>);&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//请写出以下输出结果：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用Foo对象的一个静态方法</span></div><div class=\"line\">Foo.getName();<span class=\"comment\">//2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行</span></div><div class=\"line\">getName();<span class=\"comment\">//4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 因为window对象上挂着foo函数，foo函数体内this同样也着向着window对象，而foo函数执行后把window对象返回给了foo的执行结果作为返回值</span></div><div class=\"line\"><span class=\"comment\">// Foo()返回window Foo()内部函数表达式覆盖getName</span></div><div class=\"line\">Foo().getName();<span class=\"comment\">//1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由于上一步已经改变了getName</span></div><div class=\"line\">getName();<span class=\"comment\">//1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由于成员访问高于new(不带参数)，()函数调用高于new(不带参数) =&gt; new (Foo.getName()) =&gt; new (alert(2)) =&gt; 2</span></div><div class=\"line\"><span class=\"keyword\">new</span> Foo.getName();<span class=\"comment\">//2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// new(带参数)高于函数调用，=&gt; (new Foo()).getName() =&gt; new Foo()返回new出来的实例。上面没有getName,所以会去原型链上查找getName</span></div><div class=\"line\"><span class=\"keyword\">new</span> Foo().getName(); <span class=\"comment\">//3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// x =&gt; new (new Foo()).getName() =&gt; new ((new Foo()).getName()) =&gt; 3</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 解析器会率先读取函数声明，至于函数表达式，则必须等到执行到它所在的代码行，才会真正的被解释执行</span></div><div class=\"line\">getName();         <span class=\"comment\">// alert( 5 );</span></div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">4</span>);&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123; alert (<span class=\"number\">5</span>);&#125;</div><div class=\"line\">getName();       <span class=\"comment\">//alert(4);</span></div></pre></td></tr></table></figure>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// this =&gt; window</span></div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">　　alert(object.getNameFunc()());<span class=\"comment\">//The Window</span></div><div class=\"line\"></div><div class=\"line\">　  <span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</div><div class=\"line\">　　<span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">　　　　<span class=\"attr\">name</span> : <span class=\"string\">\"My Object\"</span>,</div><div class=\"line\">　　　　<span class=\"attr\">getNameFunc</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　　　　　<span class=\"keyword\">return</span> that.name;</div><div class=\"line\">　　　　　　&#125;;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;;</div><div class=\"line\">alert(object.getNameFunc()());<span class=\"comment\">//My Object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">n,o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(o)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">fun</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fun(m,n);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = fun(<span class=\"number\">0</span>);  a.fun(<span class=\"number\">1</span>);  a.fun(<span class=\"number\">2</span>);  a.fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//undefined,0,0,0 fun(0, unfined) =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>).fun(<span class=\"number\">2</span>).fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//fun(0) =&gt; undefined =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(1) =&gt; 0 =&gt; fun(m)&#123; return fun(m, 1) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(2) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(3) =&gt; 2 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c = fun(<span class=\"number\">0</span>).fun(<span class=\"number\">1</span>);  c.fun(<span class=\"number\">2</span>);  c.fun(<span class=\"number\">3</span>);<span class=\"comment\">//undefined,?,?,?</span></div><div class=\"line\"><span class=\"comment\">//fun(0) =&gt; undefined =&gt; fun(m)&#123; return fun(m, 0) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(1) =&gt; 0 =&gt; fun(m)&#123; return fun(m, 1) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(2) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div><div class=\"line\"><span class=\"comment\">//fun(3) =&gt; 1 =&gt; fun(m)&#123; return fun(m, 2) &#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h1><blockquote>\n<p>首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值<br>其中回调函数接受三个参数 currentValue, index, arrary;而题目中, map只传入了回调函数–parseInt.其次, parseInt 只接受两个两个参数 string,<br>radix(基数). radix的合法区间是2-36. 0或是默认是10.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>)<span class=\"comment\">//[1, NaN, NaN]</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"double\"><a href=\"#double\" class=\"headerlink\" title=\"double\"></a>double</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> = <span class=\"number\">0.30000000000000004</span></div><div class=\"line\"><span class=\"built_in\">Math</span>.round( (<span class=\"number\">.1</span>+<span class=\"number\">.2</span>)*<span class=\"number\">100</span>)/<span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'World!'</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// var name = undefined</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">'Jack'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Goodbye '</span> + name);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Freshman Guide","subtitle":"Guide","date":"2017-01-06T03:11:00.000Z","author":"Asher","header-img":"nodejs.jpg","header-mask":0.3,"catalog":true,"_content":"\n# 前言\n\n本文是[前老大](https://github.com/inetfuture)对工作的一些指导和要求, 我在这里做了一些整理和补充。\n作为一名开发者首先要做到的是有`责任心`, 其次是`Be Professional!`。\n\n# 必读数据\n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n- [Git merge-vs-rebase](http://mislav.net/2013/02/merge-vs-rebase/)\n- [how-to-name-things](http://slides.com/inetfuture/how-to-name-things)\n- [RESTful API](restful_api.md)\n\n- 《代码整洁之道》\n- 《深入理解计算机系统》\n- 《敏捷软件开发 : 原则、模式与实践》\n- 《TCP/IP 详解 卷1》\n- [Git](git.md)\n- [the-art-of-command-line](https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md)\n\n- [Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n- [Trello](https://trello.com)\n- [DevDocs](http://devdocs.io/)\n\n[扩展阅读](https://github.com/CraryPrimitiveMan)\n\n# 必备工具\n\n## VPN\n\n- [GreenVPN](http://gjsq.me/23186204)\n\n## Sublime Text\n\n### Package Control\n\n* Sublime Text 2\n\n```python\nimport urllib2,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\n* Sublime Text 3\n\n```python\nimport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n必备插件：Git，GitGutter，knockdown，SublimeLinter，DocBlockr，EditorConfig，Emmet，FileDiffs，SublimeCodeIntel, SidebarEnhancements, PackageSync\n\n# 做事原则、方法\n\n- 主动沟通而不是被动应付\n    - 工作上存在任何让你不爽的事时，尽量提出来，所有的问题都可以讨论、协调、缓解，甚至完全避免，长期压抑着会影响自己的工作效率和积极性，对个人和团队都不利。\n    - 对需求、开发规范、代码组织等等各方面存在任何疑问时，主动询问和讨论，不要默不作声、自作主张导致返工和延误。\n    - 自己的代码被别人 Review 时，如果觉得某段代码可能有问题或者不是最优方案，主动提出来讨论，而不是等待审查者询问。前者可以使 Review 更高效，更利于培养同事间的相互信任，后者一是效率低，同时也是一种不负责任的表现。\n    - 进度存在风险时主动知会其他人，而不是默默拖到最后一刻连累大家加班。\n    - 做变更时及时通知相关人员，否则可能会浪费队友的时间去排查问题。代码级别的问题可以通过在 GitLab 等代码管理工具上 at 对方。\n\n- 认真负责，关注细节，追求卓越\n    - 每一份需求都要理解之后再动手，感觉需求不合理或不明确的要提出来讨论，对产品要有责任心，不仅仅是“按部就班”得做事情。\n    - 提交前仔细测试自己实现的功能，检查代码细节，有交付高质量代码的责任心，而不是依赖其他成员帮你 Reivew 或者 QA 帮你发现 bug 。\n    - 代码仅仅可以工作是不够的，还要可读、易扩展、可维护、安全、高效，等等等等，要用高标准要求自己，写代码要“上心”，不要敷衍、随意。\n    - 细节不一定决定成败但却可以充分体现一个人的工作态度，请认真对待各种流程、规范，比如写英文邮件时，从语法、格式到每一个拼写、标点，再比如 Commit Message 的格式、Coding Style 等等。\n\n- 自我驱动\n    - 自觉深入学习相关技术，而不是用多少学多少，临时抱佛脚。假设你在做 IOS 开发，即便目前所有项目仍在用 Objective-C ，你也应该利用业余时间自觉去学习 Swift ，时刻准备着。\n    - 主动思考产品的走向，自觉进行知识储备、调研。\n    - 自觉重构低质量代码，改善项目流程，等等，保证项目的健康发展。\n\n- 换位思考\n    - 使用邮件、微信等工具交流时一次性提供必要的上下文，避免低效率的沟通，想一下，我这样描述对方是否可以理解并直接回复。\n    - 无论是做 Code Review 还是提交功能给 QA 测试，尽自己最大努力保证质量，做好自己分内的事，减轻队友的负担。\n    - 作为开发，想一下我该怎样为 leader 分担压力？作为 leader ，想一下我该怎样促进下属工作能力的稳步成长？\n\n- 从根本上解决问题\n    - 思考问题的原因，不要停留于表面问题的修修补补。\n\n- 用正确的方式解决问题\n    - 很多问题都有不止一种的解决办法，不要满足于你最初想到的那种，也许有更好的呢？主动去思考目前的方案可维护吗？方便吗？效率高吗？普适吗？\n    - 多看一些最佳实践（Best Practice）的资料，多看一些优秀开源项目的源代码，多了解别人怎么做的你才能及时发现自己的不足。\n    - 不要重复造轮子，尤其是使用第三方库时，也许人家已经提供了现成的解决方案，只是因为你没有仔细看文档，所以不知道。\n\n- 磨刀不误砍柴工\n    - 学习新知识要尽可能的系统、全面，不要只是为了应付当前工作片面了解。\n    - 使用第三方库、框架时应尽量通读其文档，至少要知道它可以做什么，有哪些限制，遇到具体问题后可以迅速到文档中查看细节。\n    - 常用的技术点要舍得花时间搞清楚其运行原理、内部机制，免的每次出问题都像无头苍蝇，只能瞎猜。比如 Angular.js 的 directive 编译流程是怎样的？Node.js 的异步 IO 是如何运行的？\n    - 工欲善其事，必先利其器。平时要注意效率工具的积累，包括好的代码编辑器、命令行工具、任务管理工具、各种实用小工具等等。对于你常用的编辑器或 IDE 应该花一些时间去熟练它的快捷键，寻找一些好用的插件，毕竟工作每天都要用，投入的精力绝对物超所值。\n\n# 编写整洁代码\n\n> Writing clean code requires the disciplined use of a myriad little techniques applied through a painstakingly acquired sense of \"cleanliness\". This \"code-sense\" is the key. Some of us are born with it. Some of us have to fight to acquire it. Not only does it let us see whether code is good or bad, but it also shows us the strategy for applying our discipline to transform bad code into clean code.\n\n## 基本要求\n\n- Coding Style，如果有要求，应该严格遵循，任何例外的情况需要讨论决定。\n- 可读性，要容易理解，命名要具有足够描述性，不能有歧义，代码路径、结构要清晰、简洁。\n- 一致性，包括但不限于标识符命名、错误处理、日志格式、文件组织方式、HTTP API 接口设计、UI 交互等各个方面，越是一致的系统越容易上手，越容易维护，反之则维护成本越高。\n- 健壮性，进行必要的输入验证，充分得考虑边界情况，异常处理要周全，防止内存泄露，防止竞态条件，多线程安全，等等。\n- 性能，考虑数据量大或者访问频繁时的情况，对内存、数据库的使用要高效，算法要尽量最优。\n    - 任何涉及数量的地方，在业务场景合理的前提下考虑把数量放大到最大，为最坏的情况做打算。\n    - 数据库：\n        - 操作应尽量批量进行，只查询必需的字段，减少 IO 消耗。\n        - 特别大的查询应在数据库中分页，由程序控制分批次处理，全量取出在内存中计算或者根本不考虑数据量大小是常见的低级错误。\n        - 合理使用索引。\n    - 基本优化思路：\n        - 预先筛选数据，减少不必要的计算。\n        - 缓存计算结果，减少重复计算。\n        - 使用高效数据结构，空间换时间。\n- 安全性，进行必要的权限检查，不能过度信任客户端输入。\n- DRY（Don't Repeat Yourself）原则，复制、粘贴的行为是要坚决禁止的，不知道如何复用代码的要主动与其他成员讨论。\n- 单一职责原则，一个类、文件或者模块不能做的太多，不能做不该它做的事，好的设计是只把一件事做好。\n- 开放、封闭原则，要方便扩展，要考虑到以后的需求。\n- 代码改动方式要合适，不能一味得堆砌代码，需要适时停下来进行重构。\n- 保持干净，不能存在任何无用的文件、代码，所有文档、注释需要同步更新，不能包含注释掉的代码，不能包含临时调试代码，例外情况应该添加注释说明。\n- 所有 Warning 都应该被立即修复，觉得不需要修的，讨论决定后通过修改配置文件禁用掉。\n\n## 进阶要求\n\n- 使用多态减少或转移 `if` 判断，(Video)[https://www.youtube.com/watch?v=4F72VULWFvc&index=1&list=PL693EFD059797C21E]\n\n## 提高代码可读性的技巧\n\n- 局部变量尽量就近声明。\n- return early (V1)[https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-] (V2)[http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting]\n- 相关的代码尽量按使用顺序组织在一起，尤其是添加新代码时，不要一味得添加到文件尾部。\n- 布尔变量命名应尽量采用肯定形势。\n- 避免硬编码数字、字符串，应使用常量并给它们有意义的名字。\n- 传递简单数据类型时，适当添加临时变量提高可读性。\n\n## 如何写注释\n\n- 代码的意图应该由代码自身来表达，即所谓的可读性，不应该依赖于注释说明，所以优先考虑写更可读的代码。\n- 代码意图明显的情况下，不要加注释重复说明。\n- 以下注释是合理的或者说以下情况需要写注释：\n    - 纲要性的注释，简要的描述某一个文件、某一个类或某一个流程。\n    - 确实无法从代码本身提高可读性的情况，比如复杂业务逻辑、算法。\n    - 代码的作用并不直观时，解释这样做的原因。\n    - 存在多种可选方案时，解释为什么选择现在这种。\n    - 因为某些限制而使代码不一致、不优雅或存在副作用时，应注明原因及后果。\n    - 参考了外部一些资料时，应注明链接，方便其他人查看。\n    - 临时标记注释：TODO、FIXME、HACK、OPTIMIZE、REVIEW。\n- 注释应随代码更新。\n\n# Coding Style\n\n## 前端\n\n* [Front End Style Guide](https://github.com/Aaaaaashu/Front-End-Style-Guide)\n* [Style Guide Articles](https://github.com/maban/styleguides)\n* [PrimerCSS](http://primercss.io/guidelines/)\n\n### 语言\n\n* [Coffeescript](https://github.com/polarmobile/coffeescript-style-guide)\n* [ES6](https://github.com/airbnb/javascript)\n* [ES6中文版](https://github.com/yuche/javascript)\n* [ES6中文调整版](https://github.com/adamlu/javascript-style-guide)\n* [ES5](https://github.com/airbnb/javascript/tree/master/es5)\n* [ES5中文版](https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md)\n* [CSS/SASS/LESS](https://github.com/airbnb/css)\n* [Project CSS](https://github.com/dropbox/css-style-guide)\n\n### 框架\n\n* [AngularJS](https://github.com/johnpapa/angular-styleguide)\n* [AngularJS Best Practice](https://github.com/mgechev/angularjs-style-guide)\n* [Project AngularJS](https://github.com/gocardless/angularjs-style-guide)\n\n## 后端\n\n### 语言\n\n* [PHP PSR1](http://www.php-fig.org/psr/psr-1/)\n* [PHP PSR2](http://www.php-fig.org/psr/psr-2/)\n* [Effective Go Lite](https://bingohuang.gitbooks.io/effective-go-lite-edition/content/)\n* [Effective Go](https://golang.org/doc/effective_go.html)\n* [Effective Go中文版](http://www.chingli.com/coding/effective-go/)\n* [Best Practice for Go Developer](https://medium.com/@IndianGuru/best-practices-for-a-new-go-developer-8660384302fc)\n\n# Code Review\n\n## 目的\n\n- 提高代码质量，查漏补缺。\n- 相互学习。\n- 促进项目内知识流动，防止对某个个人过分依赖。\n\n## Commit Message 规范\n\n规定格式如下：\n\n```javascript\n$(scope): $(subject)\n\n$(description)\n```\n\n- `$(scope)`：必需，取决于具体项目，一般为项目功能模块、组件的名字，用来描述本次 commit **影响的范围**，比如 https://github.com/nodejs/node/commits/master 。影响多个模块、组件可以用 `,` 隔开。后加入项目的新成员应遵循已有的 scope 约定（通过 `git log` 可以查看某个文件的提交历史），不要自己编造。使用首字母小写的驼峰命名。`bug` 、 `hotfix` 、 `task` 、 `change` 、`refactor` 等等描述的都不是影响的具体范围，而是改动类型，不能用作 scope 。除具体的模块、组件名之外，可以使用 `base` 表示基础结构、框架相关的改动。\n- `$(subject)`：必需，50 个字符左右的简要说明，首字母小写，通常是动宾结构，描述做了什么事情，动词用一般现在时，禁止出现 *update code* ， *fix bug* 等无实际意义的描述，好的例子： *select connector by sorting free memory* （不需要形如 *update about how to select connector ...* 的啰嗦写法）, *fix sucess tip can not show on IE8* （不需要形如 *fix bug of ...* 的啰嗦写法）。\n- `$(description)`：可选，详细说明，建议使用列表罗列要点。\n\n## 流程\n\n1. 提交者发起 topic 分支到目标分支的 Merge Request 。\n    - 代码变动要尽量小且专注于一个任务，不要攒的很大，或者做多个任务，要保证审查者可以较快、较容易的 Review 。\n    - 如果与目标分支有冲突，提交者应该自己使用 `git rebase` 或 `git merge`（共享分支的情况）解决。\n    - 交给别人之前一定要自己先 Review 一遍，别人只是帮你查漏补缺，对自己的代码负责，不要浪费别人的时间。\n    - 发起后，要在 GitLab 或者其它 Review 工具上 double check 变更集。\n2. 审查者 Review 代码。\n    - 对 [编写整洁的代码](#编写整洁代码) 中各项要求进行检查\n    - 在任何有疑问或建议的地方留 comment。\n    - 从中学习一些好的东西。\n    - 完成后，如果有问题需要修复，留 comment “WFF”，表示“waiting for fix”，否则进行第 4 步。\n3. 提交者响应 comments 。\n    - 确实有问题的，修复之。如果该分支未被其他人使用，应使用 `git commit --amend` 提交以减少不必要的 commit 历史。\n    - 不同意的，讨论。\n    - 完成后，留 comment “Fixed”，审查者再次检查，回到第二步。\n4. 审查者确认没有问题之后，将 Merge Request 转发给目标分支的维护者进行合并。\n\n# 调试技巧\n\n- 查看日志，比如做 PHP Web 开发要知道 Nginx，PHP-FPM，PHP 的日志文件的位置，必要的时候从中寻找线索。使用 `tail -F file1 file2` 命令可以持续监控多个文件。\n- 通过添加临时 log 语句或断点的形式检查代码路径，很多时候调试是个体力活，并没有什么难度，不要轻易放弃或寻求他人帮助。检查代码是否按预期路径执行了，如果没有，为什么？输入数据的原因吗？或者中间一步数据处理是错的？从数据进入系统开始一步步从前往后分析，用排除法逐步缩小范围，bug 必将无所遁形。另外，有时候代码路径可能牵扯到第三方库，这个时候不要畏惧，代码都是人写的，尤其开源项目通常质量较高，进去看一下，通常没你想象的那么难。\n- 确保读懂日志消息、异常信息、错误输出等，特别是英文内容，不要因为是英文不想读，结果非常明显的线索摆在你面前你却视而不见。比如常见的 git 错误，都会有相应的描述甚至建议的解决办法。再比如做 Web 开发，一个页面打不开，最起码你要先看一下 HTTP Response 是什么，状态码，body 等。如果实在看不懂，google 之。\n- 有意识的组织整理常见错误，依据过往经验快速定位问题。例如 PHP 开发时碰到 HTTP 404，基本可以排除代码逻辑问题，应该检查拼写错误、Nginx 配置、MVC 框架路由配置、文件路径等。\n- 使用第三方组件时，遇到问题要知道去查看它的 issue 列表，也许别人也遇到了同样的问题并且已经报了 Bug ，尤其是 GitHub 上的开源项目。\n\n# Research 技巧\n\n工作中难免需要学习新技术，这个过程中也有一些技巧可以实践。\n\n- 使用 Google 搜索，除非是特定于国内的东西，比如微信开发相关，不要使用百度。\n\n    百度搜索质量偏低是事实，一方面是受限于百度自身的技术，另一方面是因为中文搜索有很多垃圾站，以及低质量的转载博客。经常出现前几页都是各种垃圾站在重复同一篇文章，而且广告满天飞，排版稀烂。还有新浪、网易的博客，很多都是复制粘贴的转载，格式一团糟，原文却不知所踪。更不要提很多技术中文资料相对较少，更新不及时，翻译质量不高等等问题。\n\n    养成使用在 Google 上使用英文关键词搜索的好习惯绝对可以节省你的大量时间和精力。\n\n- 搜索时要注意时效性\n\n    取决于具体的技术，搜索出来的东西很多可能已经过时了，要注意区分，不要被过时的东西误导。快速浏览搜索结果时捎带看一下时间也是一个好习惯，有多条相似结果时当然是最新的会靠谱一点。\n\n- 掌握使用搜索引擎的一些小技巧，http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html\n- 注意搜集、整理一些高质量的网站、博客\n\n    当你研究一个新东西的时候肯定会进行很多搜索，其中有些结果可能质量很高，这时可以快速浏览一下这个网站或者博客的首页，看看是否有收藏价值，或者有没有其它相关文章值得看一下。\n\n- 阅读权威、系统的书籍\n\n    通过使用搜索引擎或者阅读博客等通常可以对某种技术有个大概了解，或者可以解决某个具体问题，但是对于较复杂的技术，系统学习是必不可少的，看书往往是最有效的方式。可以到豆瓣阅读或者各大电商网站上通过评分排名来筛选好的书籍。如果是国外书籍，尽量选择英文原版，一开始会比较吃力，熟悉了就好了。\n\n    跟筛选搜索结果一样，尽量选择较新的书籍。\n\n- 持续关注\n\n    每个人理解新事物都有一个从浅入深的过程，新学的技术最好可以不断夯实，反复咀嚼，不要停留在表面。可以通过订阅一些邮件列表、知名博客来不断补充知识盲点，学习最佳实践，反思自己的不足，以及了解技术的最新动态。\n\n# 沟通技巧\n\n- 尽量提供完整的上下文，前因后果交代清楚，尤其是对话刚开时的时候，不要急于切入重点，先确保对方了解足够的背景，避免不必要的背景交代相关的往复提问和回答。\n- 问问题时，除了问实际的问题外，最好也解释一下这个问题的来由，这个问题哪儿来的，为什么有这个问题或疑问。这样通常可以帮助回答者更能抓住问题的重点，更准确的回答。\n- 回答问题时，对于是或否的疑问句，尽量先直接了当的回答，然后有必要的话再补充或解释。\n- 回答进度估计等相关问题时，不要使用“差不多”、“快了”等模糊词汇，应该具体一点，比如“90% 都做完了，还剩xxx，下午可以完成”。\n","source":"_posts/2017-01-06-freshman-guide.markdown","raw":"---\nlayout:     post\ntitle:      \"Freshman Guide\"\nsubtitle:   \"Guide\"\ndate:       2017-01-06 11:11\nauthor:     \"Asher\"\nheader-img: \"nodejs.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Guide\n---\n\n# 前言\n\n本文是[前老大](https://github.com/inetfuture)对工作的一些指导和要求, 我在这里做了一些整理和补充。\n作为一名开发者首先要做到的是有`责任心`, 其次是`Be Professional!`。\n\n# 必读数据\n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n- [Git merge-vs-rebase](http://mislav.net/2013/02/merge-vs-rebase/)\n- [how-to-name-things](http://slides.com/inetfuture/how-to-name-things)\n- [RESTful API](restful_api.md)\n\n- 《代码整洁之道》\n- 《深入理解计算机系统》\n- 《敏捷软件开发 : 原则、模式与实践》\n- 《TCP/IP 详解 卷1》\n- [Git](git.md)\n- [the-art-of-command-line](https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md)\n\n- [Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh)\n- [Trello](https://trello.com)\n- [DevDocs](http://devdocs.io/)\n\n[扩展阅读](https://github.com/CraryPrimitiveMan)\n\n# 必备工具\n\n## VPN\n\n- [GreenVPN](http://gjsq.me/23186204)\n\n## Sublime Text\n\n### Package Control\n\n* Sublime Text 2\n\n```python\nimport urllib2,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\n* Sublime Text 3\n\n```python\nimport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n必备插件：Git，GitGutter，knockdown，SublimeLinter，DocBlockr，EditorConfig，Emmet，FileDiffs，SublimeCodeIntel, SidebarEnhancements, PackageSync\n\n# 做事原则、方法\n\n- 主动沟通而不是被动应付\n    - 工作上存在任何让你不爽的事时，尽量提出来，所有的问题都可以讨论、协调、缓解，甚至完全避免，长期压抑着会影响自己的工作效率和积极性，对个人和团队都不利。\n    - 对需求、开发规范、代码组织等等各方面存在任何疑问时，主动询问和讨论，不要默不作声、自作主张导致返工和延误。\n    - 自己的代码被别人 Review 时，如果觉得某段代码可能有问题或者不是最优方案，主动提出来讨论，而不是等待审查者询问。前者可以使 Review 更高效，更利于培养同事间的相互信任，后者一是效率低，同时也是一种不负责任的表现。\n    - 进度存在风险时主动知会其他人，而不是默默拖到最后一刻连累大家加班。\n    - 做变更时及时通知相关人员，否则可能会浪费队友的时间去排查问题。代码级别的问题可以通过在 GitLab 等代码管理工具上 at 对方。\n\n- 认真负责，关注细节，追求卓越\n    - 每一份需求都要理解之后再动手，感觉需求不合理或不明确的要提出来讨论，对产品要有责任心，不仅仅是“按部就班”得做事情。\n    - 提交前仔细测试自己实现的功能，检查代码细节，有交付高质量代码的责任心，而不是依赖其他成员帮你 Reivew 或者 QA 帮你发现 bug 。\n    - 代码仅仅可以工作是不够的，还要可读、易扩展、可维护、安全、高效，等等等等，要用高标准要求自己，写代码要“上心”，不要敷衍、随意。\n    - 细节不一定决定成败但却可以充分体现一个人的工作态度，请认真对待各种流程、规范，比如写英文邮件时，从语法、格式到每一个拼写、标点，再比如 Commit Message 的格式、Coding Style 等等。\n\n- 自我驱动\n    - 自觉深入学习相关技术，而不是用多少学多少，临时抱佛脚。假设你在做 IOS 开发，即便目前所有项目仍在用 Objective-C ，你也应该利用业余时间自觉去学习 Swift ，时刻准备着。\n    - 主动思考产品的走向，自觉进行知识储备、调研。\n    - 自觉重构低质量代码，改善项目流程，等等，保证项目的健康发展。\n\n- 换位思考\n    - 使用邮件、微信等工具交流时一次性提供必要的上下文，避免低效率的沟通，想一下，我这样描述对方是否可以理解并直接回复。\n    - 无论是做 Code Review 还是提交功能给 QA 测试，尽自己最大努力保证质量，做好自己分内的事，减轻队友的负担。\n    - 作为开发，想一下我该怎样为 leader 分担压力？作为 leader ，想一下我该怎样促进下属工作能力的稳步成长？\n\n- 从根本上解决问题\n    - 思考问题的原因，不要停留于表面问题的修修补补。\n\n- 用正确的方式解决问题\n    - 很多问题都有不止一种的解决办法，不要满足于你最初想到的那种，也许有更好的呢？主动去思考目前的方案可维护吗？方便吗？效率高吗？普适吗？\n    - 多看一些最佳实践（Best Practice）的资料，多看一些优秀开源项目的源代码，多了解别人怎么做的你才能及时发现自己的不足。\n    - 不要重复造轮子，尤其是使用第三方库时，也许人家已经提供了现成的解决方案，只是因为你没有仔细看文档，所以不知道。\n\n- 磨刀不误砍柴工\n    - 学习新知识要尽可能的系统、全面，不要只是为了应付当前工作片面了解。\n    - 使用第三方库、框架时应尽量通读其文档，至少要知道它可以做什么，有哪些限制，遇到具体问题后可以迅速到文档中查看细节。\n    - 常用的技术点要舍得花时间搞清楚其运行原理、内部机制，免的每次出问题都像无头苍蝇，只能瞎猜。比如 Angular.js 的 directive 编译流程是怎样的？Node.js 的异步 IO 是如何运行的？\n    - 工欲善其事，必先利其器。平时要注意效率工具的积累，包括好的代码编辑器、命令行工具、任务管理工具、各种实用小工具等等。对于你常用的编辑器或 IDE 应该花一些时间去熟练它的快捷键，寻找一些好用的插件，毕竟工作每天都要用，投入的精力绝对物超所值。\n\n# 编写整洁代码\n\n> Writing clean code requires the disciplined use of a myriad little techniques applied through a painstakingly acquired sense of \"cleanliness\". This \"code-sense\" is the key. Some of us are born with it. Some of us have to fight to acquire it. Not only does it let us see whether code is good or bad, but it also shows us the strategy for applying our discipline to transform bad code into clean code.\n\n## 基本要求\n\n- Coding Style，如果有要求，应该严格遵循，任何例外的情况需要讨论决定。\n- 可读性，要容易理解，命名要具有足够描述性，不能有歧义，代码路径、结构要清晰、简洁。\n- 一致性，包括但不限于标识符命名、错误处理、日志格式、文件组织方式、HTTP API 接口设计、UI 交互等各个方面，越是一致的系统越容易上手，越容易维护，反之则维护成本越高。\n- 健壮性，进行必要的输入验证，充分得考虑边界情况，异常处理要周全，防止内存泄露，防止竞态条件，多线程安全，等等。\n- 性能，考虑数据量大或者访问频繁时的情况，对内存、数据库的使用要高效，算法要尽量最优。\n    - 任何涉及数量的地方，在业务场景合理的前提下考虑把数量放大到最大，为最坏的情况做打算。\n    - 数据库：\n        - 操作应尽量批量进行，只查询必需的字段，减少 IO 消耗。\n        - 特别大的查询应在数据库中分页，由程序控制分批次处理，全量取出在内存中计算或者根本不考虑数据量大小是常见的低级错误。\n        - 合理使用索引。\n    - 基本优化思路：\n        - 预先筛选数据，减少不必要的计算。\n        - 缓存计算结果，减少重复计算。\n        - 使用高效数据结构，空间换时间。\n- 安全性，进行必要的权限检查，不能过度信任客户端输入。\n- DRY（Don't Repeat Yourself）原则，复制、粘贴的行为是要坚决禁止的，不知道如何复用代码的要主动与其他成员讨论。\n- 单一职责原则，一个类、文件或者模块不能做的太多，不能做不该它做的事，好的设计是只把一件事做好。\n- 开放、封闭原则，要方便扩展，要考虑到以后的需求。\n- 代码改动方式要合适，不能一味得堆砌代码，需要适时停下来进行重构。\n- 保持干净，不能存在任何无用的文件、代码，所有文档、注释需要同步更新，不能包含注释掉的代码，不能包含临时调试代码，例外情况应该添加注释说明。\n- 所有 Warning 都应该被立即修复，觉得不需要修的，讨论决定后通过修改配置文件禁用掉。\n\n## 进阶要求\n\n- 使用多态减少或转移 `if` 判断，(Video)[https://www.youtube.com/watch?v=4F72VULWFvc&index=1&list=PL693EFD059797C21E]\n\n## 提高代码可读性的技巧\n\n- 局部变量尽量就近声明。\n- return early (V1)[https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-] (V2)[http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting]\n- 相关的代码尽量按使用顺序组织在一起，尤其是添加新代码时，不要一味得添加到文件尾部。\n- 布尔变量命名应尽量采用肯定形势。\n- 避免硬编码数字、字符串，应使用常量并给它们有意义的名字。\n- 传递简单数据类型时，适当添加临时变量提高可读性。\n\n## 如何写注释\n\n- 代码的意图应该由代码自身来表达，即所谓的可读性，不应该依赖于注释说明，所以优先考虑写更可读的代码。\n- 代码意图明显的情况下，不要加注释重复说明。\n- 以下注释是合理的或者说以下情况需要写注释：\n    - 纲要性的注释，简要的描述某一个文件、某一个类或某一个流程。\n    - 确实无法从代码本身提高可读性的情况，比如复杂业务逻辑、算法。\n    - 代码的作用并不直观时，解释这样做的原因。\n    - 存在多种可选方案时，解释为什么选择现在这种。\n    - 因为某些限制而使代码不一致、不优雅或存在副作用时，应注明原因及后果。\n    - 参考了外部一些资料时，应注明链接，方便其他人查看。\n    - 临时标记注释：TODO、FIXME、HACK、OPTIMIZE、REVIEW。\n- 注释应随代码更新。\n\n# Coding Style\n\n## 前端\n\n* [Front End Style Guide](https://github.com/Aaaaaashu/Front-End-Style-Guide)\n* [Style Guide Articles](https://github.com/maban/styleguides)\n* [PrimerCSS](http://primercss.io/guidelines/)\n\n### 语言\n\n* [Coffeescript](https://github.com/polarmobile/coffeescript-style-guide)\n* [ES6](https://github.com/airbnb/javascript)\n* [ES6中文版](https://github.com/yuche/javascript)\n* [ES6中文调整版](https://github.com/adamlu/javascript-style-guide)\n* [ES5](https://github.com/airbnb/javascript/tree/master/es5)\n* [ES5中文版](https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md)\n* [CSS/SASS/LESS](https://github.com/airbnb/css)\n* [Project CSS](https://github.com/dropbox/css-style-guide)\n\n### 框架\n\n* [AngularJS](https://github.com/johnpapa/angular-styleguide)\n* [AngularJS Best Practice](https://github.com/mgechev/angularjs-style-guide)\n* [Project AngularJS](https://github.com/gocardless/angularjs-style-guide)\n\n## 后端\n\n### 语言\n\n* [PHP PSR1](http://www.php-fig.org/psr/psr-1/)\n* [PHP PSR2](http://www.php-fig.org/psr/psr-2/)\n* [Effective Go Lite](https://bingohuang.gitbooks.io/effective-go-lite-edition/content/)\n* [Effective Go](https://golang.org/doc/effective_go.html)\n* [Effective Go中文版](http://www.chingli.com/coding/effective-go/)\n* [Best Practice for Go Developer](https://medium.com/@IndianGuru/best-practices-for-a-new-go-developer-8660384302fc)\n\n# Code Review\n\n## 目的\n\n- 提高代码质量，查漏补缺。\n- 相互学习。\n- 促进项目内知识流动，防止对某个个人过分依赖。\n\n## Commit Message 规范\n\n规定格式如下：\n\n```javascript\n$(scope): $(subject)\n\n$(description)\n```\n\n- `$(scope)`：必需，取决于具体项目，一般为项目功能模块、组件的名字，用来描述本次 commit **影响的范围**，比如 https://github.com/nodejs/node/commits/master 。影响多个模块、组件可以用 `,` 隔开。后加入项目的新成员应遵循已有的 scope 约定（通过 `git log` 可以查看某个文件的提交历史），不要自己编造。使用首字母小写的驼峰命名。`bug` 、 `hotfix` 、 `task` 、 `change` 、`refactor` 等等描述的都不是影响的具体范围，而是改动类型，不能用作 scope 。除具体的模块、组件名之外，可以使用 `base` 表示基础结构、框架相关的改动。\n- `$(subject)`：必需，50 个字符左右的简要说明，首字母小写，通常是动宾结构，描述做了什么事情，动词用一般现在时，禁止出现 *update code* ， *fix bug* 等无实际意义的描述，好的例子： *select connector by sorting free memory* （不需要形如 *update about how to select connector ...* 的啰嗦写法）, *fix sucess tip can not show on IE8* （不需要形如 *fix bug of ...* 的啰嗦写法）。\n- `$(description)`：可选，详细说明，建议使用列表罗列要点。\n\n## 流程\n\n1. 提交者发起 topic 分支到目标分支的 Merge Request 。\n    - 代码变动要尽量小且专注于一个任务，不要攒的很大，或者做多个任务，要保证审查者可以较快、较容易的 Review 。\n    - 如果与目标分支有冲突，提交者应该自己使用 `git rebase` 或 `git merge`（共享分支的情况）解决。\n    - 交给别人之前一定要自己先 Review 一遍，别人只是帮你查漏补缺，对自己的代码负责，不要浪费别人的时间。\n    - 发起后，要在 GitLab 或者其它 Review 工具上 double check 变更集。\n2. 审查者 Review 代码。\n    - 对 [编写整洁的代码](#编写整洁代码) 中各项要求进行检查\n    - 在任何有疑问或建议的地方留 comment。\n    - 从中学习一些好的东西。\n    - 完成后，如果有问题需要修复，留 comment “WFF”，表示“waiting for fix”，否则进行第 4 步。\n3. 提交者响应 comments 。\n    - 确实有问题的，修复之。如果该分支未被其他人使用，应使用 `git commit --amend` 提交以减少不必要的 commit 历史。\n    - 不同意的，讨论。\n    - 完成后，留 comment “Fixed”，审查者再次检查，回到第二步。\n4. 审查者确认没有问题之后，将 Merge Request 转发给目标分支的维护者进行合并。\n\n# 调试技巧\n\n- 查看日志，比如做 PHP Web 开发要知道 Nginx，PHP-FPM，PHP 的日志文件的位置，必要的时候从中寻找线索。使用 `tail -F file1 file2` 命令可以持续监控多个文件。\n- 通过添加临时 log 语句或断点的形式检查代码路径，很多时候调试是个体力活，并没有什么难度，不要轻易放弃或寻求他人帮助。检查代码是否按预期路径执行了，如果没有，为什么？输入数据的原因吗？或者中间一步数据处理是错的？从数据进入系统开始一步步从前往后分析，用排除法逐步缩小范围，bug 必将无所遁形。另外，有时候代码路径可能牵扯到第三方库，这个时候不要畏惧，代码都是人写的，尤其开源项目通常质量较高，进去看一下，通常没你想象的那么难。\n- 确保读懂日志消息、异常信息、错误输出等，特别是英文内容，不要因为是英文不想读，结果非常明显的线索摆在你面前你却视而不见。比如常见的 git 错误，都会有相应的描述甚至建议的解决办法。再比如做 Web 开发，一个页面打不开，最起码你要先看一下 HTTP Response 是什么，状态码，body 等。如果实在看不懂，google 之。\n- 有意识的组织整理常见错误，依据过往经验快速定位问题。例如 PHP 开发时碰到 HTTP 404，基本可以排除代码逻辑问题，应该检查拼写错误、Nginx 配置、MVC 框架路由配置、文件路径等。\n- 使用第三方组件时，遇到问题要知道去查看它的 issue 列表，也许别人也遇到了同样的问题并且已经报了 Bug ，尤其是 GitHub 上的开源项目。\n\n# Research 技巧\n\n工作中难免需要学习新技术，这个过程中也有一些技巧可以实践。\n\n- 使用 Google 搜索，除非是特定于国内的东西，比如微信开发相关，不要使用百度。\n\n    百度搜索质量偏低是事实，一方面是受限于百度自身的技术，另一方面是因为中文搜索有很多垃圾站，以及低质量的转载博客。经常出现前几页都是各种垃圾站在重复同一篇文章，而且广告满天飞，排版稀烂。还有新浪、网易的博客，很多都是复制粘贴的转载，格式一团糟，原文却不知所踪。更不要提很多技术中文资料相对较少，更新不及时，翻译质量不高等等问题。\n\n    养成使用在 Google 上使用英文关键词搜索的好习惯绝对可以节省你的大量时间和精力。\n\n- 搜索时要注意时效性\n\n    取决于具体的技术，搜索出来的东西很多可能已经过时了，要注意区分，不要被过时的东西误导。快速浏览搜索结果时捎带看一下时间也是一个好习惯，有多条相似结果时当然是最新的会靠谱一点。\n\n- 掌握使用搜索引擎的一些小技巧，http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html\n- 注意搜集、整理一些高质量的网站、博客\n\n    当你研究一个新东西的时候肯定会进行很多搜索，其中有些结果可能质量很高，这时可以快速浏览一下这个网站或者博客的首页，看看是否有收藏价值，或者有没有其它相关文章值得看一下。\n\n- 阅读权威、系统的书籍\n\n    通过使用搜索引擎或者阅读博客等通常可以对某种技术有个大概了解，或者可以解决某个具体问题，但是对于较复杂的技术，系统学习是必不可少的，看书往往是最有效的方式。可以到豆瓣阅读或者各大电商网站上通过评分排名来筛选好的书籍。如果是国外书籍，尽量选择英文原版，一开始会比较吃力，熟悉了就好了。\n\n    跟筛选搜索结果一样，尽量选择较新的书籍。\n\n- 持续关注\n\n    每个人理解新事物都有一个从浅入深的过程，新学的技术最好可以不断夯实，反复咀嚼，不要停留在表面。可以通过订阅一些邮件列表、知名博客来不断补充知识盲点，学习最佳实践，反思自己的不足，以及了解技术的最新动态。\n\n# 沟通技巧\n\n- 尽量提供完整的上下文，前因后果交代清楚，尤其是对话刚开时的时候，不要急于切入重点，先确保对方了解足够的背景，避免不必要的背景交代相关的往复提问和回答。\n- 问问题时，除了问实际的问题外，最好也解释一下这个问题的来由，这个问题哪儿来的，为什么有这个问题或疑问。这样通常可以帮助回答者更能抓住问题的重点，更准确的回答。\n- 回答问题时，对于是或否的疑问句，尽量先直接了当的回答，然后有必要的话再补充或解释。\n- 回答进度估计等相关问题时，不要使用“差不多”、“快了”等模糊词汇，应该具体一点，比如“90% 都做完了，还剩xxx，下午可以完成”。\n","slug":"2017-01-06-freshman-guide","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75x0014s7t70kqm3b1a","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文是<a href=\"https://github.com/inetfuture\" target=\"_blank\" rel=\"external\">前老大</a>对工作的一些指导和要求, 我在这里做了一些整理和补充。<br>作为一名开发者首先要做到的是有<code>责任心</code>, 其次是<code>Be Professional!</code>。</p>\n<h1 id=\"必读数据\"><a href=\"#必读数据\" class=\"headerlink\" title=\"必读数据\"></a>必读数据</h1><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Pro Git</a></li>\n<li><a href=\"http://mislav.net/2013/02/merge-vs-rebase/\" target=\"_blank\" rel=\"external\">Git merge-vs-rebase</a></li>\n<li><a href=\"http://slides.com/inetfuture/how-to-name-things\" target=\"_blank\" rel=\"external\">how-to-name-things</a></li>\n<li><p><a href=\"restful_api.md\">RESTful API</a></p>\n</li>\n<li><p>《代码整洁之道》</p>\n</li>\n<li>《深入理解计算机系统》</li>\n<li>《敏捷软件开发 : 原则、模式与实践》</li>\n<li>《TCP/IP 详解 卷1》</li>\n<li><a href=\"git.md\">Git</a></li>\n<li><p><a href=\"https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md\" target=\"_blank\" rel=\"external\">the-art-of-command-line</a></p>\n</li>\n<li><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></p>\n</li>\n<li><a href=\"https://trello.com\" target=\"_blank\" rel=\"external\">Trello</a></li>\n<li><a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">DevDocs</a></li>\n</ul>\n<p><a href=\"https://github.com/CraryPrimitiveMan\" target=\"_blank\" rel=\"external\">扩展阅读</a></p>\n<h1 id=\"必备工具\"><a href=\"#必备工具\" class=\"headerlink\" title=\"必备工具\"></a>必备工具</h1><h2 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h2><ul>\n<li><a href=\"http://gjsq.me/23186204\" target=\"_blank\" rel=\"external\">GreenVPN</a></li>\n</ul>\n<h2 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h2><h3 id=\"Package-Control\"><a href=\"#Package-Control\" class=\"headerlink\" title=\"Package Control\"></a>Package Control</h3><ul>\n<li>Sublime Text 2</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib2,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(ipp) <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by) <span class=\"keyword\">if</span> dh == h <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>; print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"string\">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>Sublime Text 3</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>必备插件：Git，GitGutter，knockdown，SublimeLinter，DocBlockr，EditorConfig，Emmet，FileDiffs，SublimeCodeIntel, SidebarEnhancements, PackageSync</p>\n<h1 id=\"做事原则、方法\"><a href=\"#做事原则、方法\" class=\"headerlink\" title=\"做事原则、方法\"></a>做事原则、方法</h1><ul>\n<li><p>主动沟通而不是被动应付</p>\n<ul>\n<li>工作上存在任何让你不爽的事时，尽量提出来，所有的问题都可以讨论、协调、缓解，甚至完全避免，长期压抑着会影响自己的工作效率和积极性，对个人和团队都不利。</li>\n<li>对需求、开发规范、代码组织等等各方面存在任何疑问时，主动询问和讨论，不要默不作声、自作主张导致返工和延误。</li>\n<li>自己的代码被别人 Review 时，如果觉得某段代码可能有问题或者不是最优方案，主动提出来讨论，而不是等待审查者询问。前者可以使 Review 更高效，更利于培养同事间的相互信任，后者一是效率低，同时也是一种不负责任的表现。</li>\n<li>进度存在风险时主动知会其他人，而不是默默拖到最后一刻连累大家加班。</li>\n<li>做变更时及时通知相关人员，否则可能会浪费队友的时间去排查问题。代码级别的问题可以通过在 GitLab 等代码管理工具上 at 对方。</li>\n</ul>\n</li>\n<li><p>认真负责，关注细节，追求卓越</p>\n<ul>\n<li>每一份需求都要理解之后再动手，感觉需求不合理或不明确的要提出来讨论，对产品要有责任心，不仅仅是“按部就班”得做事情。</li>\n<li>提交前仔细测试自己实现的功能，检查代码细节，有交付高质量代码的责任心，而不是依赖其他成员帮你 Reivew 或者 QA 帮你发现 bug 。</li>\n<li>代码仅仅可以工作是不够的，还要可读、易扩展、可维护、安全、高效，等等等等，要用高标准要求自己，写代码要“上心”，不要敷衍、随意。</li>\n<li>细节不一定决定成败但却可以充分体现一个人的工作态度，请认真对待各种流程、规范，比如写英文邮件时，从语法、格式到每一个拼写、标点，再比如 Commit Message 的格式、Coding Style 等等。</li>\n</ul>\n</li>\n<li><p>自我驱动</p>\n<ul>\n<li>自觉深入学习相关技术，而不是用多少学多少，临时抱佛脚。假设你在做 IOS 开发，即便目前所有项目仍在用 Objective-C ，你也应该利用业余时间自觉去学习 Swift ，时刻准备着。</li>\n<li>主动思考产品的走向，自觉进行知识储备、调研。</li>\n<li>自觉重构低质量代码，改善项目流程，等等，保证项目的健康发展。</li>\n</ul>\n</li>\n<li><p>换位思考</p>\n<ul>\n<li>使用邮件、微信等工具交流时一次性提供必要的上下文，避免低效率的沟通，想一下，我这样描述对方是否可以理解并直接回复。</li>\n<li>无论是做 Code Review 还是提交功能给 QA 测试，尽自己最大努力保证质量，做好自己分内的事，减轻队友的负担。</li>\n<li>作为开发，想一下我该怎样为 leader 分担压力？作为 leader ，想一下我该怎样促进下属工作能力的稳步成长？</li>\n</ul>\n</li>\n<li><p>从根本上解决问题</p>\n<ul>\n<li>思考问题的原因，不要停留于表面问题的修修补补。</li>\n</ul>\n</li>\n<li><p>用正确的方式解决问题</p>\n<ul>\n<li>很多问题都有不止一种的解决办法，不要满足于你最初想到的那种，也许有更好的呢？主动去思考目前的方案可维护吗？方便吗？效率高吗？普适吗？</li>\n<li>多看一些最佳实践（Best Practice）的资料，多看一些优秀开源项目的源代码，多了解别人怎么做的你才能及时发现自己的不足。</li>\n<li>不要重复造轮子，尤其是使用第三方库时，也许人家已经提供了现成的解决方案，只是因为你没有仔细看文档，所以不知道。</li>\n</ul>\n</li>\n<li><p>磨刀不误砍柴工</p>\n<ul>\n<li>学习新知识要尽可能的系统、全面，不要只是为了应付当前工作片面了解。</li>\n<li>使用第三方库、框架时应尽量通读其文档，至少要知道它可以做什么，有哪些限制，遇到具体问题后可以迅速到文档中查看细节。</li>\n<li>常用的技术点要舍得花时间搞清楚其运行原理、内部机制，免的每次出问题都像无头苍蝇，只能瞎猜。比如 Angular.js 的 directive 编译流程是怎样的？Node.js 的异步 IO 是如何运行的？</li>\n<li>工欲善其事，必先利其器。平时要注意效率工具的积累，包括好的代码编辑器、命令行工具、任务管理工具、各种实用小工具等等。对于你常用的编辑器或 IDE 应该花一些时间去熟练它的快捷键，寻找一些好用的插件，毕竟工作每天都要用，投入的精力绝对物超所值。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"编写整洁代码\"><a href=\"#编写整洁代码\" class=\"headerlink\" title=\"编写整洁代码\"></a>编写整洁代码</h1><blockquote>\n<p>Writing clean code requires the disciplined use of a myriad little techniques applied through a painstakingly acquired sense of “cleanliness”. This “code-sense” is the key. Some of us are born with it. Some of us have to fight to acquire it. Not only does it let us see whether code is good or bad, but it also shows us the strategy for applying our discipline to transform bad code into clean code.</p>\n</blockquote>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>Coding Style，如果有要求，应该严格遵循，任何例外的情况需要讨论决定。</li>\n<li>可读性，要容易理解，命名要具有足够描述性，不能有歧义，代码路径、结构要清晰、简洁。</li>\n<li>一致性，包括但不限于标识符命名、错误处理、日志格式、文件组织方式、HTTP API 接口设计、UI 交互等各个方面，越是一致的系统越容易上手，越容易维护，反之则维护成本越高。</li>\n<li>健壮性，进行必要的输入验证，充分得考虑边界情况，异常处理要周全，防止内存泄露，防止竞态条件，多线程安全，等等。</li>\n<li>性能，考虑数据量大或者访问频繁时的情况，对内存、数据库的使用要高效，算法要尽量最优。<ul>\n<li>任何涉及数量的地方，在业务场景合理的前提下考虑把数量放大到最大，为最坏的情况做打算。</li>\n<li>数据库：<ul>\n<li>操作应尽量批量进行，只查询必需的字段，减少 IO 消耗。</li>\n<li>特别大的查询应在数据库中分页，由程序控制分批次处理，全量取出在内存中计算或者根本不考虑数据量大小是常见的低级错误。</li>\n<li>合理使用索引。</li>\n</ul>\n</li>\n<li>基本优化思路：<ul>\n<li>预先筛选数据，减少不必要的计算。</li>\n<li>缓存计算结果，减少重复计算。</li>\n<li>使用高效数据结构，空间换时间。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安全性，进行必要的权限检查，不能过度信任客户端输入。</li>\n<li>DRY（Don’t Repeat Yourself）原则，复制、粘贴的行为是要坚决禁止的，不知道如何复用代码的要主动与其他成员讨论。</li>\n<li>单一职责原则，一个类、文件或者模块不能做的太多，不能做不该它做的事，好的设计是只把一件事做好。</li>\n<li>开放、封闭原则，要方便扩展，要考虑到以后的需求。</li>\n<li>代码改动方式要合适，不能一味得堆砌代码，需要适时停下来进行重构。</li>\n<li>保持干净，不能存在任何无用的文件、代码，所有文档、注释需要同步更新，不能包含注释掉的代码，不能包含临时调试代码，例外情况应该添加注释说明。</li>\n<li>所有 Warning 都应该被立即修复，觉得不需要修的，讨论决定后通过修改配置文件禁用掉。</li>\n</ul>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><ul>\n<li>使用多态减少或转移 <code>if</code> 判断，(Video)[<a href=\"https://www.youtube.com/watch?v=4F72VULWFvc&amp;index=1&amp;list=PL693EFD059797C21E\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=4F72VULWFvc&amp;index=1&amp;list=PL693EFD059797C21E</a>]</li>\n</ul>\n<h2 id=\"提高代码可读性的技巧\"><a href=\"#提高代码可读性的技巧\" class=\"headerlink\" title=\"提高代码可读性的技巧\"></a>提高代码可读性的技巧</h2><ul>\n<li>局部变量尽量就近声明。</li>\n<li>return early (V1)[<a href=\"https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-\" target=\"_blank\" rel=\"external\">https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-</a>] (V2)[<a href=\"http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting\" target=\"_blank\" rel=\"external\">http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting</a>]</li>\n<li>相关的代码尽量按使用顺序组织在一起，尤其是添加新代码时，不要一味得添加到文件尾部。</li>\n<li>布尔变量命名应尽量采用肯定形势。</li>\n<li>避免硬编码数字、字符串，应使用常量并给它们有意义的名字。</li>\n<li>传递简单数据类型时，适当添加临时变量提高可读性。</li>\n</ul>\n<h2 id=\"如何写注释\"><a href=\"#如何写注释\" class=\"headerlink\" title=\"如何写注释\"></a>如何写注释</h2><ul>\n<li>代码的意图应该由代码自身来表达，即所谓的可读性，不应该依赖于注释说明，所以优先考虑写更可读的代码。</li>\n<li>代码意图明显的情况下，不要加注释重复说明。</li>\n<li>以下注释是合理的或者说以下情况需要写注释：<ul>\n<li>纲要性的注释，简要的描述某一个文件、某一个类或某一个流程。</li>\n<li>确实无法从代码本身提高可读性的情况，比如复杂业务逻辑、算法。</li>\n<li>代码的作用并不直观时，解释这样做的原因。</li>\n<li>存在多种可选方案时，解释为什么选择现在这种。</li>\n<li>因为某些限制而使代码不一致、不优雅或存在副作用时，应注明原因及后果。</li>\n<li>参考了外部一些资料时，应注明链接，方便其他人查看。</li>\n<li>临时标记注释：TODO、FIXME、HACK、OPTIMIZE、REVIEW。</li>\n</ul>\n</li>\n<li>注释应随代码更新。</li>\n</ul>\n<h1 id=\"Coding-Style\"><a href=\"#Coding-Style\" class=\"headerlink\" title=\"Coding Style\"></a>Coding Style</h1><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><ul>\n<li><a href=\"https://github.com/Aaaaaashu/Front-End-Style-Guide\" target=\"_blank\" rel=\"external\">Front End Style Guide</a></li>\n<li><a href=\"https://github.com/maban/styleguides\" target=\"_blank\" rel=\"external\">Style Guide Articles</a></li>\n<li><a href=\"http://primercss.io/guidelines/\" target=\"_blank\" rel=\"external\">PrimerCSS</a></li>\n</ul>\n<h3 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h3><ul>\n<li><a href=\"https://github.com/polarmobile/coffeescript-style-guide\" target=\"_blank\" rel=\"external\">Coffeescript</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">ES6</a></li>\n<li><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"external\">ES6中文版</a></li>\n<li><a href=\"https://github.com/adamlu/javascript-style-guide\" target=\"_blank\" rel=\"external\">ES6中文调整版</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/es5\" target=\"_blank\" rel=\"external\">ES5</a></li>\n<li><a href=\"https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md\" target=\"_blank\" rel=\"external\">ES5中文版</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"external\">CSS/SASS/LESS</a></li>\n<li><a href=\"https://github.com/dropbox/css-style-guide\" target=\"_blank\" rel=\"external\">Project CSS</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/johnpapa/angular-styleguide\" target=\"_blank\" rel=\"external\">AngularJS</a></li>\n<li><a href=\"https://github.com/mgechev/angularjs-style-guide\" target=\"_blank\" rel=\"external\">AngularJS Best Practice</a></li>\n<li><a href=\"https://github.com/gocardless/angularjs-style-guide\" target=\"_blank\" rel=\"external\">Project AngularJS</a></li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><h3 id=\"语言-1\"><a href=\"#语言-1\" class=\"headerlink\" title=\"语言\"></a>语言</h3><ul>\n<li><a href=\"http://www.php-fig.org/psr/psr-1/\" target=\"_blank\" rel=\"external\">PHP PSR1</a></li>\n<li><a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"external\">PHP PSR2</a></li>\n<li><a href=\"https://bingohuang.gitbooks.io/effective-go-lite-edition/content/\" target=\"_blank\" rel=\"external\">Effective Go Lite</a></li>\n<li><a href=\"https://golang.org/doc/effective_go.html\" target=\"_blank\" rel=\"external\">Effective Go</a></li>\n<li><a href=\"http://www.chingli.com/coding/effective-go/\" target=\"_blank\" rel=\"external\">Effective Go中文版</a></li>\n<li><a href=\"https://medium.com/@IndianGuru/best-practices-for-a-new-go-developer-8660384302fc\" target=\"_blank\" rel=\"external\">Best Practice for Go Developer</a></li>\n</ul>\n<h1 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h1><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><ul>\n<li>提高代码质量，查漏补缺。</li>\n<li>相互学习。</li>\n<li>促进项目内知识流动，防止对某个个人过分依赖。</li>\n</ul>\n<h2 id=\"Commit-Message-规范\"><a href=\"#Commit-Message-规范\" class=\"headerlink\" title=\"Commit Message 规范\"></a>Commit Message 规范</h2><p>规定格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(scope): $(subject)</div><div class=\"line\"></div><div class=\"line\">$(description)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>$(scope)</code>：必需，取决于具体项目，一般为项目功能模块、组件的名字，用来描述本次 commit <strong>影响的范围</strong>，比如 <a href=\"https://github.com/nodejs/node/commits/master\" target=\"_blank\" rel=\"external\">https://github.com/nodejs/node/commits/master</a> 。影响多个模块、组件可以用 <code>,</code> 隔开。后加入项目的新成员应遵循已有的 scope 约定（通过 <code>git log</code> 可以查看某个文件的提交历史），不要自己编造。使用首字母小写的驼峰命名。<code>bug</code> 、 <code>hotfix</code> 、 <code>task</code> 、 <code>change</code> 、<code>refactor</code> 等等描述的都不是影响的具体范围，而是改动类型，不能用作 scope 。除具体的模块、组件名之外，可以使用 <code>base</code> 表示基础结构、框架相关的改动。</li>\n<li><code>$(subject)</code>：必需，50 个字符左右的简要说明，首字母小写，通常是动宾结构，描述做了什么事情，动词用一般现在时，禁止出现 <em>update code</em> ， <em>fix bug</em> 等无实际意义的描述，好的例子： <em>select connector by sorting free memory</em> （不需要形如 <em>update about how to select connector …</em> 的啰嗦写法）, <em>fix sucess tip can not show on IE8</em> （不需要形如 <em>fix bug of …</em> 的啰嗦写法）。</li>\n<li><code>$(description)</code>：可选，详细说明，建议使用列表罗列要点。</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>提交者发起 topic 分支到目标分支的 Merge Request 。<ul>\n<li>代码变动要尽量小且专注于一个任务，不要攒的很大，或者做多个任务，要保证审查者可以较快、较容易的 Review 。</li>\n<li>如果与目标分支有冲突，提交者应该自己使用 <code>git rebase</code> 或 <code>git merge</code>（共享分支的情况）解决。</li>\n<li>交给别人之前一定要自己先 Review 一遍，别人只是帮你查漏补缺，对自己的代码负责，不要浪费别人的时间。</li>\n<li>发起后，要在 GitLab 或者其它 Review 工具上 double check 变更集。</li>\n</ul>\n</li>\n<li>审查者 Review 代码。<ul>\n<li>对 <a href=\"#编写整洁代码\">编写整洁的代码</a> 中各项要求进行检查</li>\n<li>在任何有疑问或建议的地方留 comment。</li>\n<li>从中学习一些好的东西。</li>\n<li>完成后，如果有问题需要修复，留 comment “WFF”，表示“waiting for fix”，否则进行第 4 步。</li>\n</ul>\n</li>\n<li>提交者响应 comments 。<ul>\n<li>确实有问题的，修复之。如果该分支未被其他人使用，应使用 <code>git commit --amend</code> 提交以减少不必要的 commit 历史。</li>\n<li>不同意的，讨论。</li>\n<li>完成后，留 comment “Fixed”，审查者再次检查，回到第二步。</li>\n</ul>\n</li>\n<li>审查者确认没有问题之后，将 Merge Request 转发给目标分支的维护者进行合并。</li>\n</ol>\n<h1 id=\"调试技巧\"><a href=\"#调试技巧\" class=\"headerlink\" title=\"调试技巧\"></a>调试技巧</h1><ul>\n<li>查看日志，比如做 PHP Web 开发要知道 Nginx，PHP-FPM，PHP 的日志文件的位置，必要的时候从中寻找线索。使用 <code>tail -F file1 file2</code> 命令可以持续监控多个文件。</li>\n<li>通过添加临时 log 语句或断点的形式检查代码路径，很多时候调试是个体力活，并没有什么难度，不要轻易放弃或寻求他人帮助。检查代码是否按预期路径执行了，如果没有，为什么？输入数据的原因吗？或者中间一步数据处理是错的？从数据进入系统开始一步步从前往后分析，用排除法逐步缩小范围，bug 必将无所遁形。另外，有时候代码路径可能牵扯到第三方库，这个时候不要畏惧，代码都是人写的，尤其开源项目通常质量较高，进去看一下，通常没你想象的那么难。</li>\n<li>确保读懂日志消息、异常信息、错误输出等，特别是英文内容，不要因为是英文不想读，结果非常明显的线索摆在你面前你却视而不见。比如常见的 git 错误，都会有相应的描述甚至建议的解决办法。再比如做 Web 开发，一个页面打不开，最起码你要先看一下 HTTP Response 是什么，状态码，body 等。如果实在看不懂，google 之。</li>\n<li>有意识的组织整理常见错误，依据过往经验快速定位问题。例如 PHP 开发时碰到 HTTP 404，基本可以排除代码逻辑问题，应该检查拼写错误、Nginx 配置、MVC 框架路由配置、文件路径等。</li>\n<li>使用第三方组件时，遇到问题要知道去查看它的 issue 列表，也许别人也遇到了同样的问题并且已经报了 Bug ，尤其是 GitHub 上的开源项目。</li>\n</ul>\n<h1 id=\"Research-技巧\"><a href=\"#Research-技巧\" class=\"headerlink\" title=\"Research 技巧\"></a>Research 技巧</h1><p>工作中难免需要学习新技术，这个过程中也有一些技巧可以实践。</p>\n<ul>\n<li><p>使用 Google 搜索，除非是特定于国内的东西，比如微信开发相关，不要使用百度。</p>\n<p>  百度搜索质量偏低是事实，一方面是受限于百度自身的技术，另一方面是因为中文搜索有很多垃圾站，以及低质量的转载博客。经常出现前几页都是各种垃圾站在重复同一篇文章，而且广告满天飞，排版稀烂。还有新浪、网易的博客，很多都是复制粘贴的转载，格式一团糟，原文却不知所踪。更不要提很多技术中文资料相对较少，更新不及时，翻译质量不高等等问题。</p>\n<p>  养成使用在 Google 上使用英文关键词搜索的好习惯绝对可以节省你的大量时间和精力。</p>\n</li>\n<li><p>搜索时要注意时效性</p>\n<p>  取决于具体的技术，搜索出来的东西很多可能已经过时了，要注意区分，不要被过时的东西误导。快速浏览搜索结果时捎带看一下时间也是一个好习惯，有多条相似结果时当然是最新的会靠谱一点。</p>\n</li>\n<li><p>掌握使用搜索引擎的一些小技巧，<a href=\"http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html\" target=\"_blank\" rel=\"external\">http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html</a></p>\n</li>\n<li><p>注意搜集、整理一些高质量的网站、博客</p>\n<p>  当你研究一个新东西的时候肯定会进行很多搜索，其中有些结果可能质量很高，这时可以快速浏览一下这个网站或者博客的首页，看看是否有收藏价值，或者有没有其它相关文章值得看一下。</p>\n</li>\n<li><p>阅读权威、系统的书籍</p>\n<p>  通过使用搜索引擎或者阅读博客等通常可以对某种技术有个大概了解，或者可以解决某个具体问题，但是对于较复杂的技术，系统学习是必不可少的，看书往往是最有效的方式。可以到豆瓣阅读或者各大电商网站上通过评分排名来筛选好的书籍。如果是国外书籍，尽量选择英文原版，一开始会比较吃力，熟悉了就好了。</p>\n<p>  跟筛选搜索结果一样，尽量选择较新的书籍。</p>\n</li>\n<li><p>持续关注</p>\n<p>  每个人理解新事物都有一个从浅入深的过程，新学的技术最好可以不断夯实，反复咀嚼，不要停留在表面。可以通过订阅一些邮件列表、知名博客来不断补充知识盲点，学习最佳实践，反思自己的不足，以及了解技术的最新动态。</p>\n</li>\n</ul>\n<h1 id=\"沟通技巧\"><a href=\"#沟通技巧\" class=\"headerlink\" title=\"沟通技巧\"></a>沟通技巧</h1><ul>\n<li>尽量提供完整的上下文，前因后果交代清楚，尤其是对话刚开时的时候，不要急于切入重点，先确保对方了解足够的背景，避免不必要的背景交代相关的往复提问和回答。</li>\n<li>问问题时，除了问实际的问题外，最好也解释一下这个问题的来由，这个问题哪儿来的，为什么有这个问题或疑问。这样通常可以帮助回答者更能抓住问题的重点，更准确的回答。</li>\n<li>回答问题时，对于是或否的疑问句，尽量先直接了当的回答，然后有必要的话再补充或解释。</li>\n<li>回答进度估计等相关问题时，不要使用“差不多”、“快了”等模糊词汇，应该具体一点，比如“90% 都做完了，还剩xxx，下午可以完成”。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文是<a href=\"https://github.com/inetfuture\" target=\"_blank\" rel=\"external\">前老大</a>对工作的一些指导和要求, 我在这里做了一些整理和补充。<br>作为一名开发者首先要做到的是有<code>责任心</code>, 其次是<code>Be Professional!</code>。</p>\n<h1 id=\"必读数据\"><a href=\"#必读数据\" class=\"headerlink\" title=\"必读数据\"></a>必读数据</h1><ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Pro Git</a></li>\n<li><a href=\"http://mislav.net/2013/02/merge-vs-rebase/\" target=\"_blank\" rel=\"external\">Git merge-vs-rebase</a></li>\n<li><a href=\"http://slides.com/inetfuture/how-to-name-things\" target=\"_blank\" rel=\"external\">how-to-name-things</a></li>\n<li><p><a href=\"restful_api.md\">RESTful API</a></p>\n</li>\n<li><p>《代码整洁之道》</p>\n</li>\n<li>《深入理解计算机系统》</li>\n<li>《敏捷软件开发 : 原则、模式与实践》</li>\n<li>《TCP/IP 详解 卷1》</li>\n<li><a href=\"git.md\">Git</a></li>\n<li><p><a href=\"https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md\" target=\"_blank\" rel=\"external\">the-art-of-command-line</a></p>\n</li>\n<li><p><a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">Oh My Zsh</a></p>\n</li>\n<li><a href=\"https://trello.com\" target=\"_blank\" rel=\"external\">Trello</a></li>\n<li><a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">DevDocs</a></li>\n</ul>\n<p><a href=\"https://github.com/CraryPrimitiveMan\" target=\"_blank\" rel=\"external\">扩展阅读</a></p>\n<h1 id=\"必备工具\"><a href=\"#必备工具\" class=\"headerlink\" title=\"必备工具\"></a>必备工具</h1><h2 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h2><ul>\n<li><a href=\"http://gjsq.me/23186204\" target=\"_blank\" rel=\"external\">GreenVPN</a></li>\n</ul>\n<h2 id=\"Sublime-Text\"><a href=\"#Sublime-Text\" class=\"headerlink\" title=\"Sublime Text\"></a>Sublime Text</h2><h3 id=\"Package-Control\"><a href=\"#Package-Control\" class=\"headerlink\" title=\"Package Control\"></a>Package Control</h3><ul>\n<li>Sublime Text 2</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib2,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(ipp) <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by) <span class=\"keyword\">if</span> dh == h <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>; print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"string\">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>Sublime Text 3</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class=\"string\">'1e3d39e33b79698005270310898eea76'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>必备插件：Git，GitGutter，knockdown，SublimeLinter，DocBlockr，EditorConfig，Emmet，FileDiffs，SublimeCodeIntel, SidebarEnhancements, PackageSync</p>\n<h1 id=\"做事原则、方法\"><a href=\"#做事原则、方法\" class=\"headerlink\" title=\"做事原则、方法\"></a>做事原则、方法</h1><ul>\n<li><p>主动沟通而不是被动应付</p>\n<ul>\n<li>工作上存在任何让你不爽的事时，尽量提出来，所有的问题都可以讨论、协调、缓解，甚至完全避免，长期压抑着会影响自己的工作效率和积极性，对个人和团队都不利。</li>\n<li>对需求、开发规范、代码组织等等各方面存在任何疑问时，主动询问和讨论，不要默不作声、自作主张导致返工和延误。</li>\n<li>自己的代码被别人 Review 时，如果觉得某段代码可能有问题或者不是最优方案，主动提出来讨论，而不是等待审查者询问。前者可以使 Review 更高效，更利于培养同事间的相互信任，后者一是效率低，同时也是一种不负责任的表现。</li>\n<li>进度存在风险时主动知会其他人，而不是默默拖到最后一刻连累大家加班。</li>\n<li>做变更时及时通知相关人员，否则可能会浪费队友的时间去排查问题。代码级别的问题可以通过在 GitLab 等代码管理工具上 at 对方。</li>\n</ul>\n</li>\n<li><p>认真负责，关注细节，追求卓越</p>\n<ul>\n<li>每一份需求都要理解之后再动手，感觉需求不合理或不明确的要提出来讨论，对产品要有责任心，不仅仅是“按部就班”得做事情。</li>\n<li>提交前仔细测试自己实现的功能，检查代码细节，有交付高质量代码的责任心，而不是依赖其他成员帮你 Reivew 或者 QA 帮你发现 bug 。</li>\n<li>代码仅仅可以工作是不够的，还要可读、易扩展、可维护、安全、高效，等等等等，要用高标准要求自己，写代码要“上心”，不要敷衍、随意。</li>\n<li>细节不一定决定成败但却可以充分体现一个人的工作态度，请认真对待各种流程、规范，比如写英文邮件时，从语法、格式到每一个拼写、标点，再比如 Commit Message 的格式、Coding Style 等等。</li>\n</ul>\n</li>\n<li><p>自我驱动</p>\n<ul>\n<li>自觉深入学习相关技术，而不是用多少学多少，临时抱佛脚。假设你在做 IOS 开发，即便目前所有项目仍在用 Objective-C ，你也应该利用业余时间自觉去学习 Swift ，时刻准备着。</li>\n<li>主动思考产品的走向，自觉进行知识储备、调研。</li>\n<li>自觉重构低质量代码，改善项目流程，等等，保证项目的健康发展。</li>\n</ul>\n</li>\n<li><p>换位思考</p>\n<ul>\n<li>使用邮件、微信等工具交流时一次性提供必要的上下文，避免低效率的沟通，想一下，我这样描述对方是否可以理解并直接回复。</li>\n<li>无论是做 Code Review 还是提交功能给 QA 测试，尽自己最大努力保证质量，做好自己分内的事，减轻队友的负担。</li>\n<li>作为开发，想一下我该怎样为 leader 分担压力？作为 leader ，想一下我该怎样促进下属工作能力的稳步成长？</li>\n</ul>\n</li>\n<li><p>从根本上解决问题</p>\n<ul>\n<li>思考问题的原因，不要停留于表面问题的修修补补。</li>\n</ul>\n</li>\n<li><p>用正确的方式解决问题</p>\n<ul>\n<li>很多问题都有不止一种的解决办法，不要满足于你最初想到的那种，也许有更好的呢？主动去思考目前的方案可维护吗？方便吗？效率高吗？普适吗？</li>\n<li>多看一些最佳实践（Best Practice）的资料，多看一些优秀开源项目的源代码，多了解别人怎么做的你才能及时发现自己的不足。</li>\n<li>不要重复造轮子，尤其是使用第三方库时，也许人家已经提供了现成的解决方案，只是因为你没有仔细看文档，所以不知道。</li>\n</ul>\n</li>\n<li><p>磨刀不误砍柴工</p>\n<ul>\n<li>学习新知识要尽可能的系统、全面，不要只是为了应付当前工作片面了解。</li>\n<li>使用第三方库、框架时应尽量通读其文档，至少要知道它可以做什么，有哪些限制，遇到具体问题后可以迅速到文档中查看细节。</li>\n<li>常用的技术点要舍得花时间搞清楚其运行原理、内部机制，免的每次出问题都像无头苍蝇，只能瞎猜。比如 Angular.js 的 directive 编译流程是怎样的？Node.js 的异步 IO 是如何运行的？</li>\n<li>工欲善其事，必先利其器。平时要注意效率工具的积累，包括好的代码编辑器、命令行工具、任务管理工具、各种实用小工具等等。对于你常用的编辑器或 IDE 应该花一些时间去熟练它的快捷键，寻找一些好用的插件，毕竟工作每天都要用，投入的精力绝对物超所值。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"编写整洁代码\"><a href=\"#编写整洁代码\" class=\"headerlink\" title=\"编写整洁代码\"></a>编写整洁代码</h1><blockquote>\n<p>Writing clean code requires the disciplined use of a myriad little techniques applied through a painstakingly acquired sense of “cleanliness”. This “code-sense” is the key. Some of us are born with it. Some of us have to fight to acquire it. Not only does it let us see whether code is good or bad, but it also shows us the strategy for applying our discipline to transform bad code into clean code.</p>\n</blockquote>\n<h2 id=\"基本要求\"><a href=\"#基本要求\" class=\"headerlink\" title=\"基本要求\"></a>基本要求</h2><ul>\n<li>Coding Style，如果有要求，应该严格遵循，任何例外的情况需要讨论决定。</li>\n<li>可读性，要容易理解，命名要具有足够描述性，不能有歧义，代码路径、结构要清晰、简洁。</li>\n<li>一致性，包括但不限于标识符命名、错误处理、日志格式、文件组织方式、HTTP API 接口设计、UI 交互等各个方面，越是一致的系统越容易上手，越容易维护，反之则维护成本越高。</li>\n<li>健壮性，进行必要的输入验证，充分得考虑边界情况，异常处理要周全，防止内存泄露，防止竞态条件，多线程安全，等等。</li>\n<li>性能，考虑数据量大或者访问频繁时的情况，对内存、数据库的使用要高效，算法要尽量最优。<ul>\n<li>任何涉及数量的地方，在业务场景合理的前提下考虑把数量放大到最大，为最坏的情况做打算。</li>\n<li>数据库：<ul>\n<li>操作应尽量批量进行，只查询必需的字段，减少 IO 消耗。</li>\n<li>特别大的查询应在数据库中分页，由程序控制分批次处理，全量取出在内存中计算或者根本不考虑数据量大小是常见的低级错误。</li>\n<li>合理使用索引。</li>\n</ul>\n</li>\n<li>基本优化思路：<ul>\n<li>预先筛选数据，减少不必要的计算。</li>\n<li>缓存计算结果，减少重复计算。</li>\n<li>使用高效数据结构，空间换时间。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安全性，进行必要的权限检查，不能过度信任客户端输入。</li>\n<li>DRY（Don’t Repeat Yourself）原则，复制、粘贴的行为是要坚决禁止的，不知道如何复用代码的要主动与其他成员讨论。</li>\n<li>单一职责原则，一个类、文件或者模块不能做的太多，不能做不该它做的事，好的设计是只把一件事做好。</li>\n<li>开放、封闭原则，要方便扩展，要考虑到以后的需求。</li>\n<li>代码改动方式要合适，不能一味得堆砌代码，需要适时停下来进行重构。</li>\n<li>保持干净，不能存在任何无用的文件、代码，所有文档、注释需要同步更新，不能包含注释掉的代码，不能包含临时调试代码，例外情况应该添加注释说明。</li>\n<li>所有 Warning 都应该被立即修复，觉得不需要修的，讨论决定后通过修改配置文件禁用掉。</li>\n</ul>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><ul>\n<li>使用多态减少或转移 <code>if</code> 判断，(Video)[<a href=\"https://www.youtube.com/watch?v=4F72VULWFvc&amp;index=1&amp;list=PL693EFD059797C21E\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=4F72VULWFvc&amp;index=1&amp;list=PL693EFD059797C21E</a>]</li>\n</ul>\n<h2 id=\"提高代码可读性的技巧\"><a href=\"#提高代码可读性的技巧\" class=\"headerlink\" title=\"提高代码可读性的技巧\"></a>提高代码可读性的技巧</h2><ul>\n<li>局部变量尽量就近声明。</li>\n<li>return early (V1)[<a href=\"https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-\" target=\"_blank\" rel=\"external\">https://www.airpair.com/php/posts/best-practices-for-modern-php-development#4-2-try-not-to-use-else-</a>] (V2)[<a href=\"http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting\" target=\"_blank\" rel=\"external\">http://www.codeproject.com/Articles/626403/How-and-Why-to-Avoid-Excessive-Nesting</a>]</li>\n<li>相关的代码尽量按使用顺序组织在一起，尤其是添加新代码时，不要一味得添加到文件尾部。</li>\n<li>布尔变量命名应尽量采用肯定形势。</li>\n<li>避免硬编码数字、字符串，应使用常量并给它们有意义的名字。</li>\n<li>传递简单数据类型时，适当添加临时变量提高可读性。</li>\n</ul>\n<h2 id=\"如何写注释\"><a href=\"#如何写注释\" class=\"headerlink\" title=\"如何写注释\"></a>如何写注释</h2><ul>\n<li>代码的意图应该由代码自身来表达，即所谓的可读性，不应该依赖于注释说明，所以优先考虑写更可读的代码。</li>\n<li>代码意图明显的情况下，不要加注释重复说明。</li>\n<li>以下注释是合理的或者说以下情况需要写注释：<ul>\n<li>纲要性的注释，简要的描述某一个文件、某一个类或某一个流程。</li>\n<li>确实无法从代码本身提高可读性的情况，比如复杂业务逻辑、算法。</li>\n<li>代码的作用并不直观时，解释这样做的原因。</li>\n<li>存在多种可选方案时，解释为什么选择现在这种。</li>\n<li>因为某些限制而使代码不一致、不优雅或存在副作用时，应注明原因及后果。</li>\n<li>参考了外部一些资料时，应注明链接，方便其他人查看。</li>\n<li>临时标记注释：TODO、FIXME、HACK、OPTIMIZE、REVIEW。</li>\n</ul>\n</li>\n<li>注释应随代码更新。</li>\n</ul>\n<h1 id=\"Coding-Style\"><a href=\"#Coding-Style\" class=\"headerlink\" title=\"Coding Style\"></a>Coding Style</h1><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><ul>\n<li><a href=\"https://github.com/Aaaaaashu/Front-End-Style-Guide\" target=\"_blank\" rel=\"external\">Front End Style Guide</a></li>\n<li><a href=\"https://github.com/maban/styleguides\" target=\"_blank\" rel=\"external\">Style Guide Articles</a></li>\n<li><a href=\"http://primercss.io/guidelines/\" target=\"_blank\" rel=\"external\">PrimerCSS</a></li>\n</ul>\n<h3 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h3><ul>\n<li><a href=\"https://github.com/polarmobile/coffeescript-style-guide\" target=\"_blank\" rel=\"external\">Coffeescript</a></li>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">ES6</a></li>\n<li><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"external\">ES6中文版</a></li>\n<li><a href=\"https://github.com/adamlu/javascript-style-guide\" target=\"_blank\" rel=\"external\">ES6中文调整版</a></li>\n<li><a href=\"https://github.com/airbnb/javascript/tree/master/es5\" target=\"_blank\" rel=\"external\">ES5</a></li>\n<li><a href=\"https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md\" target=\"_blank\" rel=\"external\">ES5中文版</a></li>\n<li><a href=\"https://github.com/airbnb/css\" target=\"_blank\" rel=\"external\">CSS/SASS/LESS</a></li>\n<li><a href=\"https://github.com/dropbox/css-style-guide\" target=\"_blank\" rel=\"external\">Project CSS</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><a href=\"https://github.com/johnpapa/angular-styleguide\" target=\"_blank\" rel=\"external\">AngularJS</a></li>\n<li><a href=\"https://github.com/mgechev/angularjs-style-guide\" target=\"_blank\" rel=\"external\">AngularJS Best Practice</a></li>\n<li><a href=\"https://github.com/gocardless/angularjs-style-guide\" target=\"_blank\" rel=\"external\">Project AngularJS</a></li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><h3 id=\"语言-1\"><a href=\"#语言-1\" class=\"headerlink\" title=\"语言\"></a>语言</h3><ul>\n<li><a href=\"http://www.php-fig.org/psr/psr-1/\" target=\"_blank\" rel=\"external\">PHP PSR1</a></li>\n<li><a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"external\">PHP PSR2</a></li>\n<li><a href=\"https://bingohuang.gitbooks.io/effective-go-lite-edition/content/\" target=\"_blank\" rel=\"external\">Effective Go Lite</a></li>\n<li><a href=\"https://golang.org/doc/effective_go.html\" target=\"_blank\" rel=\"external\">Effective Go</a></li>\n<li><a href=\"http://www.chingli.com/coding/effective-go/\" target=\"_blank\" rel=\"external\">Effective Go中文版</a></li>\n<li><a href=\"https://medium.com/@IndianGuru/best-practices-for-a-new-go-developer-8660384302fc\" target=\"_blank\" rel=\"external\">Best Practice for Go Developer</a></li>\n</ul>\n<h1 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h1><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><ul>\n<li>提高代码质量，查漏补缺。</li>\n<li>相互学习。</li>\n<li>促进项目内知识流动，防止对某个个人过分依赖。</li>\n</ul>\n<h2 id=\"Commit-Message-规范\"><a href=\"#Commit-Message-规范\" class=\"headerlink\" title=\"Commit Message 规范\"></a>Commit Message 规范</h2><p>规定格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(scope): $(subject)</div><div class=\"line\"></div><div class=\"line\">$(description)</div></pre></td></tr></table></figure>\n<ul>\n<li><code>$(scope)</code>：必需，取决于具体项目，一般为项目功能模块、组件的名字，用来描述本次 commit <strong>影响的范围</strong>，比如 <a href=\"https://github.com/nodejs/node/commits/master\" target=\"_blank\" rel=\"external\">https://github.com/nodejs/node/commits/master</a> 。影响多个模块、组件可以用 <code>,</code> 隔开。后加入项目的新成员应遵循已有的 scope 约定（通过 <code>git log</code> 可以查看某个文件的提交历史），不要自己编造。使用首字母小写的驼峰命名。<code>bug</code> 、 <code>hotfix</code> 、 <code>task</code> 、 <code>change</code> 、<code>refactor</code> 等等描述的都不是影响的具体范围，而是改动类型，不能用作 scope 。除具体的模块、组件名之外，可以使用 <code>base</code> 表示基础结构、框架相关的改动。</li>\n<li><code>$(subject)</code>：必需，50 个字符左右的简要说明，首字母小写，通常是动宾结构，描述做了什么事情，动词用一般现在时，禁止出现 <em>update code</em> ， <em>fix bug</em> 等无实际意义的描述，好的例子： <em>select connector by sorting free memory</em> （不需要形如 <em>update about how to select connector …</em> 的啰嗦写法）, <em>fix sucess tip can not show on IE8</em> （不需要形如 <em>fix bug of …</em> 的啰嗦写法）。</li>\n<li><code>$(description)</code>：可选，详细说明，建议使用列表罗列要点。</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>提交者发起 topic 分支到目标分支的 Merge Request 。<ul>\n<li>代码变动要尽量小且专注于一个任务，不要攒的很大，或者做多个任务，要保证审查者可以较快、较容易的 Review 。</li>\n<li>如果与目标分支有冲突，提交者应该自己使用 <code>git rebase</code> 或 <code>git merge</code>（共享分支的情况）解决。</li>\n<li>交给别人之前一定要自己先 Review 一遍，别人只是帮你查漏补缺，对自己的代码负责，不要浪费别人的时间。</li>\n<li>发起后，要在 GitLab 或者其它 Review 工具上 double check 变更集。</li>\n</ul>\n</li>\n<li>审查者 Review 代码。<ul>\n<li>对 <a href=\"#编写整洁代码\">编写整洁的代码</a> 中各项要求进行检查</li>\n<li>在任何有疑问或建议的地方留 comment。</li>\n<li>从中学习一些好的东西。</li>\n<li>完成后，如果有问题需要修复，留 comment “WFF”，表示“waiting for fix”，否则进行第 4 步。</li>\n</ul>\n</li>\n<li>提交者响应 comments 。<ul>\n<li>确实有问题的，修复之。如果该分支未被其他人使用，应使用 <code>git commit --amend</code> 提交以减少不必要的 commit 历史。</li>\n<li>不同意的，讨论。</li>\n<li>完成后，留 comment “Fixed”，审查者再次检查，回到第二步。</li>\n</ul>\n</li>\n<li>审查者确认没有问题之后，将 Merge Request 转发给目标分支的维护者进行合并。</li>\n</ol>\n<h1 id=\"调试技巧\"><a href=\"#调试技巧\" class=\"headerlink\" title=\"调试技巧\"></a>调试技巧</h1><ul>\n<li>查看日志，比如做 PHP Web 开发要知道 Nginx，PHP-FPM，PHP 的日志文件的位置，必要的时候从中寻找线索。使用 <code>tail -F file1 file2</code> 命令可以持续监控多个文件。</li>\n<li>通过添加临时 log 语句或断点的形式检查代码路径，很多时候调试是个体力活，并没有什么难度，不要轻易放弃或寻求他人帮助。检查代码是否按预期路径执行了，如果没有，为什么？输入数据的原因吗？或者中间一步数据处理是错的？从数据进入系统开始一步步从前往后分析，用排除法逐步缩小范围，bug 必将无所遁形。另外，有时候代码路径可能牵扯到第三方库，这个时候不要畏惧，代码都是人写的，尤其开源项目通常质量较高，进去看一下，通常没你想象的那么难。</li>\n<li>确保读懂日志消息、异常信息、错误输出等，特别是英文内容，不要因为是英文不想读，结果非常明显的线索摆在你面前你却视而不见。比如常见的 git 错误，都会有相应的描述甚至建议的解决办法。再比如做 Web 开发，一个页面打不开，最起码你要先看一下 HTTP Response 是什么，状态码，body 等。如果实在看不懂，google 之。</li>\n<li>有意识的组织整理常见错误，依据过往经验快速定位问题。例如 PHP 开发时碰到 HTTP 404，基本可以排除代码逻辑问题，应该检查拼写错误、Nginx 配置、MVC 框架路由配置、文件路径等。</li>\n<li>使用第三方组件时，遇到问题要知道去查看它的 issue 列表，也许别人也遇到了同样的问题并且已经报了 Bug ，尤其是 GitHub 上的开源项目。</li>\n</ul>\n<h1 id=\"Research-技巧\"><a href=\"#Research-技巧\" class=\"headerlink\" title=\"Research 技巧\"></a>Research 技巧</h1><p>工作中难免需要学习新技术，这个过程中也有一些技巧可以实践。</p>\n<ul>\n<li><p>使用 Google 搜索，除非是特定于国内的东西，比如微信开发相关，不要使用百度。</p>\n<p>  百度搜索质量偏低是事实，一方面是受限于百度自身的技术，另一方面是因为中文搜索有很多垃圾站，以及低质量的转载博客。经常出现前几页都是各种垃圾站在重复同一篇文章，而且广告满天飞，排版稀烂。还有新浪、网易的博客，很多都是复制粘贴的转载，格式一团糟，原文却不知所踪。更不要提很多技术中文资料相对较少，更新不及时，翻译质量不高等等问题。</p>\n<p>  养成使用在 Google 上使用英文关键词搜索的好习惯绝对可以节省你的大量时间和精力。</p>\n</li>\n<li><p>搜索时要注意时效性</p>\n<p>  取决于具体的技术，搜索出来的东西很多可能已经过时了，要注意区分，不要被过时的东西误导。快速浏览搜索结果时捎带看一下时间也是一个好习惯，有多条相似结果时当然是最新的会靠谱一点。</p>\n</li>\n<li><p>掌握使用搜索引擎的一些小技巧，<a href=\"http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html\" target=\"_blank\" rel=\"external\">http://www.lifehack.org/articles/technology/20-tips-use-google-search-efficiently.html</a></p>\n</li>\n<li><p>注意搜集、整理一些高质量的网站、博客</p>\n<p>  当你研究一个新东西的时候肯定会进行很多搜索，其中有些结果可能质量很高，这时可以快速浏览一下这个网站或者博客的首页，看看是否有收藏价值，或者有没有其它相关文章值得看一下。</p>\n</li>\n<li><p>阅读权威、系统的书籍</p>\n<p>  通过使用搜索引擎或者阅读博客等通常可以对某种技术有个大概了解，或者可以解决某个具体问题，但是对于较复杂的技术，系统学习是必不可少的，看书往往是最有效的方式。可以到豆瓣阅读或者各大电商网站上通过评分排名来筛选好的书籍。如果是国外书籍，尽量选择英文原版，一开始会比较吃力，熟悉了就好了。</p>\n<p>  跟筛选搜索结果一样，尽量选择较新的书籍。</p>\n</li>\n<li><p>持续关注</p>\n<p>  每个人理解新事物都有一个从浅入深的过程，新学的技术最好可以不断夯实，反复咀嚼，不要停留在表面。可以通过订阅一些邮件列表、知名博客来不断补充知识盲点，学习最佳实践，反思自己的不足，以及了解技术的最新动态。</p>\n</li>\n</ul>\n<h1 id=\"沟通技巧\"><a href=\"#沟通技巧\" class=\"headerlink\" title=\"沟通技巧\"></a>沟通技巧</h1><ul>\n<li>尽量提供完整的上下文，前因后果交代清楚，尤其是对话刚开时的时候，不要急于切入重点，先确保对方了解足够的背景，避免不必要的背景交代相关的往复提问和回答。</li>\n<li>问问题时，除了问实际的问题外，最好也解释一下这个问题的来由，这个问题哪儿来的，为什么有这个问题或疑问。这样通常可以帮助回答者更能抓住问题的重点，更准确的回答。</li>\n<li>回答问题时，对于是或否的疑问句，尽量先直接了当的回答，然后有必要的话再补充或解释。</li>\n<li>回答进度估计等相关问题时，不要使用“差不多”、“快了”等模糊词汇，应该具体一点，比如“90% 都做完了，还剩xxx，下午可以完成”。</li>\n</ul>\n"},{"layout":"post","title":"Javascript Summary","subtitle":"Javascript","date":"2016-05-19T01:30:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# [Object.defineProperty()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n- 意义与使用场景 > Object.defineProperty可以监听某个对象的属性的设置与取值，并且可以自定义相关函数。 > PS：对象初始化的值会被清空，定义初始值只能在函数内部定义\n- 语法 javascript Object.defineProperty(objName, propName, descriptor);\n- 参数\n    - objName：需要定义属性的对象。\n    - propName：需定义或修改的属性的名字。\n    - descriptor：将被定义或修改的属性的描述符。\n\n```javascript\n{\n    configurable: false, // 当且仅当configurable为true时，当前propName才能够被改变，也能够被删除。默认为 false。\n    enumerable: false, // 当且仅当enumerable为true时，当前propName才能够出现在对象的枚举属性中。默认为 false。\n    value: null, // 当前propName对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。默认为 undefined。这就是解释了为什么：”对象初始化的值会被清空，定义初始值只能在函数内部定义。“\n    writable: false // 当且仅当writable为true时，当前propName才能被赋值运算符改变。默认为 false。\n    get: function() { // getter方法。该方法返回值被用作属性值。默认为 undefined。\n        // 其他的代码…\n        return 'self define value'; // 也可以没有返回值，默认为 undefined\n    },\n    set: function(_val) { // setter方法。如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。\n        // 其他的代码…\n    }\n}\n```\n> PS: 数据描述符和存取描述符不能混合使用。比如get 和 value不可以共存。\n\n* 返回值 > 返回传入函数的对象，即第一个参数obj\n\n# 用JS求出元素的最终的background-color，不考虑元素float情况。\n\n* [Window.getComputedStyle()](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle)\n* [HTMLElement.style](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style)\n* [Element.currentStyle](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/currentStyle)\n\n\n> widow.getComputedStyle (获取css中设置的样式，'准浏览器'。返回的对象中，驼峰命名和中划线命名的都有，如：background-color和backgroundColor都有。 element.style (获取的是元素行间设置的样式) element.currentStyle (ie低版本)\n\n```javascript\n// 获取指定元素的某个CSS样式，兼容IE\nvar getStyle = function($el, _attr) {\n    if(window.getComputedStyle) {\n        return window.getComputedStyle($el, null)[_attr]\n    }\n    if($el.currentStyle) {\n        return $el.currentStyle[_attr];\n    }\n    return $el.style[_attr];\n}\n\nvar getBG = function($el) {\n    var color = getStyle($el, 'backgroundColor');\n    if(color === 'rgba(0, 0, 0, 0)' || color === 'transparent') { // 判断是否透明\n        return $el.tagName === 'HTML' ? 'rgb(255, 255, 255)' : arguments.callee($el.parentNode, 'backgroundColor');\n    } else {\n        return color;\n    }\n}\n```\n","source":"_posts/2017-01-19-javascript-summary.markdown","raw":"---\nlayout:     post\ntitle:      \"Javascript Summary\"\nsubtitle:   \"Javascript\"\ndate:       2016-05-19 09:30:00\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Javascript\n---\n\n# [Object.defineProperty()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n- 意义与使用场景 > Object.defineProperty可以监听某个对象的属性的设置与取值，并且可以自定义相关函数。 > PS：对象初始化的值会被清空，定义初始值只能在函数内部定义\n- 语法 javascript Object.defineProperty(objName, propName, descriptor);\n- 参数\n    - objName：需要定义属性的对象。\n    - propName：需定义或修改的属性的名字。\n    - descriptor：将被定义或修改的属性的描述符。\n\n```javascript\n{\n    configurable: false, // 当且仅当configurable为true时，当前propName才能够被改变，也能够被删除。默认为 false。\n    enumerable: false, // 当且仅当enumerable为true时，当前propName才能够出现在对象的枚举属性中。默认为 false。\n    value: null, // 当前propName对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。默认为 undefined。这就是解释了为什么：”对象初始化的值会被清空，定义初始值只能在函数内部定义。“\n    writable: false // 当且仅当writable为true时，当前propName才能被赋值运算符改变。默认为 false。\n    get: function() { // getter方法。该方法返回值被用作属性值。默认为 undefined。\n        // 其他的代码…\n        return 'self define value'; // 也可以没有返回值，默认为 undefined\n    },\n    set: function(_val) { // setter方法。如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。\n        // 其他的代码…\n    }\n}\n```\n> PS: 数据描述符和存取描述符不能混合使用。比如get 和 value不可以共存。\n\n* 返回值 > 返回传入函数的对象，即第一个参数obj\n\n# 用JS求出元素的最终的background-color，不考虑元素float情况。\n\n* [Window.getComputedStyle()](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle)\n* [HTMLElement.style](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style)\n* [Element.currentStyle](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/currentStyle)\n\n\n> widow.getComputedStyle (获取css中设置的样式，'准浏览器'。返回的对象中，驼峰命名和中划线命名的都有，如：background-color和backgroundColor都有。 element.style (获取的是元素行间设置的样式) element.currentStyle (ie低版本)\n\n```javascript\n// 获取指定元素的某个CSS样式，兼容IE\nvar getStyle = function($el, _attr) {\n    if(window.getComputedStyle) {\n        return window.getComputedStyle($el, null)[_attr]\n    }\n    if($el.currentStyle) {\n        return $el.currentStyle[_attr];\n    }\n    return $el.style[_attr];\n}\n\nvar getBG = function($el) {\n    var color = getStyle($el, 'backgroundColor');\n    if(color === 'rgba(0, 0, 0, 0)' || color === 'transparent') { // 判断是否透明\n        return $el.tagName === 'HTML' ? 'rgb(255, 255, 255)' : arguments.callee($el.parentNode, 'backgroundColor');\n    } else {\n        return color;\n    }\n}\n```\n","slug":"2017-01-19-javascript-summary","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d75y0016s7t7fpczjbxb","content":"<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Object.defineProperty()</a></h1><ul>\n<li>意义与使用场景 &gt; Object.defineProperty可以监听某个对象的属性的设置与取值，并且可以自定义相关函数。 &gt; PS：对象初始化的值会被清空，定义初始值只能在函数内部定义</li>\n<li>语法 javascript Object.defineProperty(objName, propName, descriptor);</li>\n<li>参数<ul>\n<li>objName：需要定义属性的对象。</li>\n<li>propName：需定义或修改的属性的名字。</li>\n<li>descriptor：将被定义或修改的属性的描述符。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 当且仅当configurable为true时，当前propName才能够被改变，也能够被删除。默认为 false。</span></div><div class=\"line\">    enumerable: <span class=\"literal\">false</span>, <span class=\"comment\">// 当且仅当enumerable为true时，当前propName才能够出现在对象的枚举属性中。默认为 false。</span></div><div class=\"line\">    value: <span class=\"literal\">null</span>, <span class=\"comment\">// 当前propName对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。默认为 undefined。这就是解释了为什么：”对象初始化的值会被清空，定义初始值只能在函数内部定义。“</span></div><div class=\"line\">    writable: <span class=\"literal\">false</span> <span class=\"comment\">// 当且仅当writable为true时，当前propName才能被赋值运算符改变。默认为 false。</span></div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// getter方法。该方法返回值被用作属性值。默认为 undefined。</span></div><div class=\"line\">        <span class=\"comment\">// 其他的代码…</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'self define value'</span>; <span class=\"comment\">// 也可以没有返回值，默认为 undefined</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_val</span>) </span>&#123; <span class=\"comment\">// setter方法。如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。</span></div><div class=\"line\">        <span class=\"comment\">// 其他的代码…</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS: 数据描述符和存取描述符不能混合使用。比如get 和 value不可以共存。</p>\n</blockquote>\n<ul>\n<li>返回值 &gt; 返回传入函数的对象，即第一个参数obj</li>\n</ul>\n<h1 id=\"用JS求出元素的最终的background-color，不考虑元素float情况。\"><a href=\"#用JS求出元素的最终的background-color，不考虑元素float情况。\" class=\"headerlink\" title=\"用JS求出元素的最终的background-color，不考虑元素float情况。\"></a>用JS求出元素的最终的background-color，不考虑元素float情况。</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle\" target=\"_blank\" rel=\"external\">Window.getComputedStyle()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style\" target=\"_blank\" rel=\"external\">HTMLElement.style</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/currentStyle\" target=\"_blank\" rel=\"external\">Element.currentStyle</a></li>\n</ul>\n<blockquote>\n<p>widow.getComputedStyle (获取css中设置的样式，’准浏览器’。返回的对象中，驼峰命名和中划线命名的都有，如：background-color和backgroundColor都有。 element.style (获取的是元素行间设置的样式) element.currentStyle (ie低版本)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取指定元素的某个CSS样式，兼容IE</span></div><div class=\"line\"><span class=\"keyword\">var</span> getStyle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el, _attr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle($el, <span class=\"literal\">null</span>)[_attr]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($el.currentStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $el.currentStyle[_attr];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $el.style[_attr];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> getBG = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> color = getStyle($el, <span class=\"string\">'backgroundColor'</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(color === <span class=\"string\">'rgba(0, 0, 0, 0)'</span> || color === <span class=\"string\">'transparent'</span>) &#123; <span class=\"comment\">// 判断是否透明</span></div><div class=\"line\">        <span class=\"keyword\">return</span> $el.tagName === <span class=\"string\">'HTML'</span> ? <span class=\"string\">'rgb(255, 255, 255)'</span> : <span class=\"built_in\">arguments</span>.callee($el.parentNode, <span class=\"string\">'backgroundColor'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty()\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Object.defineProperty()</a></h1><ul>\n<li>意义与使用场景 &gt; Object.defineProperty可以监听某个对象的属性的设置与取值，并且可以自定义相关函数。 &gt; PS：对象初始化的值会被清空，定义初始值只能在函数内部定义</li>\n<li>语法 javascript Object.defineProperty(objName, propName, descriptor);</li>\n<li>参数<ul>\n<li>objName：需要定义属性的对象。</li>\n<li>propName：需定义或修改的属性的名字。</li>\n<li>descriptor：将被定义或修改的属性的描述符。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 当且仅当configurable为true时，当前propName才能够被改变，也能够被删除。默认为 false。</span></div><div class=\"line\">    enumerable: <span class=\"literal\">false</span>, <span class=\"comment\">// 当且仅当enumerable为true时，当前propName才能够出现在对象的枚举属性中。默认为 false。</span></div><div class=\"line\">    value: <span class=\"literal\">null</span>, <span class=\"comment\">// 当前propName对应的值。可以是任何有效的JavaScript值（数值，对象，函数等）。默认为 undefined。这就是解释了为什么：”对象初始化的值会被清空，定义初始值只能在函数内部定义。“</span></div><div class=\"line\">    writable: <span class=\"literal\">false</span> <span class=\"comment\">// 当且仅当writable为true时，当前propName才能被赋值运算符改变。默认为 false。</span></div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// getter方法。该方法返回值被用作属性值。默认为 undefined。</span></div><div class=\"line\">        <span class=\"comment\">// 其他的代码…</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'self define value'</span>; <span class=\"comment\">// 也可以没有返回值，默认为 undefined</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_val</span>) </span>&#123; <span class=\"comment\">// setter方法。如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。</span></div><div class=\"line\">        <span class=\"comment\">// 其他的代码…</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS: 数据描述符和存取描述符不能混合使用。比如get 和 value不可以共存。</p>\n</blockquote>\n<ul>\n<li>返回值 &gt; 返回传入函数的对象，即第一个参数obj</li>\n</ul>\n<h1 id=\"用JS求出元素的最终的background-color，不考虑元素float情况。\"><a href=\"#用JS求出元素的最终的background-color，不考虑元素float情况。\" class=\"headerlink\" title=\"用JS求出元素的最终的background-color，不考虑元素float情况。\"></a>用JS求出元素的最终的background-color，不考虑元素float情况。</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle\" target=\"_blank\" rel=\"external\">Window.getComputedStyle()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style\" target=\"_blank\" rel=\"external\">HTMLElement.style</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/currentStyle\" target=\"_blank\" rel=\"external\">Element.currentStyle</a></li>\n</ul>\n<blockquote>\n<p>widow.getComputedStyle (获取css中设置的样式，’准浏览器’。返回的对象中，驼峰命名和中划线命名的都有，如：background-color和backgroundColor都有。 element.style (获取的是元素行间设置的样式) element.currentStyle (ie低版本)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取指定元素的某个CSS样式，兼容IE</span></div><div class=\"line\"><span class=\"keyword\">var</span> getStyle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el, _attr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.getComputedStyle($el, <span class=\"literal\">null</span>)[_attr]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($el.currentStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $el.currentStyle[_attr];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $el.style[_attr];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> getBG = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> color = getStyle($el, <span class=\"string\">'backgroundColor'</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(color === <span class=\"string\">'rgba(0, 0, 0, 0)'</span> || color === <span class=\"string\">'transparent'</span>) &#123; <span class=\"comment\">// 判断是否透明</span></div><div class=\"line\">        <span class=\"keyword\">return</span> $el.tagName === <span class=\"string\">'HTML'</span> ? <span class=\"string\">'rgb(255, 255, 255)'</span> : <span class=\"built_in\">arguments</span>.callee($el.parentNode, <span class=\"string\">'backgroundColor'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"We have a problem with promise","subtitle":"Promise","date":"2016-07-04T07:23:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n### *下面四种Promise的区别*\n\n```javascript\n    doSomething().then(() => {\n        return doSomethingElse()\n    })\n\n    doSomething().then(() => {\n        doSomethingElse()\n    })\n\n    doSomething().then(doSomethingElse())\n\n    doSomething().then(doSomethingElse)\n```\n\n## Promise的起源\n\n如果你阅读了 promises 的一些相关文献，你会发现有一个词 [金字塔问题](https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf#.ca5u6o9fl) 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。\n\nPromises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 [Callback Hell的救赎](http://youtu.be/hf1T_AONQJU) 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。\n\n> 原文关于副作用的描述并不能很直观的进行理解，建议参考 [WIKI](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。\n\n并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的*堆栈*破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。\n\nPromises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。\n\n## 新手错误\n\nPromise对于不同的人有不同的理解和观点，但是这篇文章我特质[正式标准](https://promisesaplus.com/), 在现代浏览器中暴露为window.Promise。虽然并非所有浏览器都有windows.Promise,但是可以寻找一些pollyfill,比如[Lie](https://github.com/calvinmetcalf/lie)、[bluebird](https://github.com/petkaantonov/bluebird)。\n\n### 新手错误 #1： promise版的金字塔问题\n观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个:\n\n```javascript\n    remotedb.allDocs({\n        include_docs: true,\n        attachments: true\n    }).then(function (result) {\n        var docs = result.rows;\n        docs.forEach(function(element) {\n            localdb.put(element.doc).then(function(response) {\n                alert('Pulled doc with id ' + element.doc._id + ' and added to local db.');\n            }).catch(function (err) {\n                if (err.status == 409) {\n                    localdb.get(element.doc._id).then(function (resp) {\n                        localdb.remove(resp._id, resp._rev).then(function (resp) {\n                                // et cetera...\n                        })\n                    })\n                }\n            })\n        })\n    })\n\n```\n\n是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。\n\n并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)\n\n正确的风格应该是:\n\n```javascript\n    remotedb.allDocs(...).then(function (resultOfAllDocs) {\n        return localdb.put(...)\n    }).then(function (resultOfPut) {\n        return localdb.get(...)\n    }).then(function (resultOfGet) {\n        return localdb.put(...)\n    }).catch(function (err) {\n        console.log(err)\n    })\n```\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。\n\n### 新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\n\n这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。\n\n```javascript\n    // I want to remove() all docs\n    db.allDocs({include_docs: true}).then(function (result) {\n        result.rows.forEach(function (row) {\n            db.remove(row.doc)\n        })\n    }).then(function () {\n        // I naively believe all docs have been removed() now!\n    })\n```\n\n这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！\n\n这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。\n\n简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():\n\n```javascript\n    db.allDocs({include_docs: true}).then(function (result) {\n        return Promise.all(result.rows.map(function (row) {\n            return db.remove(row.doc)\n        }))\n    }).then(function (arrayOfResults) {\n        // All docs have really been removed() now!\n    })\n```\n\n上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。\n\n并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。\n\n### 新手错误 #3： 忘记使用 .catch()\n\n这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。\n\n> 类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注\n\n为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:\n\n```javascript\n    somePromise().then(function () {\n        return anotherPromise();\n    }).then(function () {\n        return yetAnotherPromise();\n    }).catch(console.log.bind(console)); // <-- this is badass\n```\n\n即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。\n\n### 新手错误 #4：使用 “deferred”\n这是一个我经常可以看到的错误，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。\n\n简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。\n\n因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。\n\n首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.\n\n```javascript\n    $q.when(db.put(doc)).then(/* ... */); // <-- this is all the code you need\n```\n\n另一种策略是使用[构造函数声明模式](https://blog.domenic.me/the-revealing-constructor-pattern/)，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:\n\n```javascript\n    new Promise(function (resolve, reject) {\n        fs.readFile('myfile.txt', function (err, file) {\n            if (err) {\n                return reject(err);\n            }\n            resolve(file);\n        });\n    }).then(/* ... */)\n```\n完工！我们打败了可怕的 def….啊哈，抓到自己了。:)\n\n> 关于为何这是一种反模式更多的内容，请查看 Bluebird 的 [promise anti-patterns](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern) wiki 页\n\n### 新手错误 #5：使用副作用调用而非返回\n\n```javascript\n    somePromise().then(function () {\n        someOtherPromise()\n    }).then(function () {\n        // Gee, I hope someOtherPromise() has resolved!\n        // Spoiler alert: it hasn't.\n    })\n```\n\n好了，现在是时候讨论一下关于 promises 你所需要知道的一切。\n\n认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？\n\n就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？\n\n每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, ...) 的语法糖)。当我们在 then() 函数内部时：\n\n```javascript\n    somePromise().then(function () {\n        // I'm inside a then() function!\n    })\n```\n我们可以做什么呢？有三种事情：\n\nreturn 另一个 promise\nreturn 一个同步的值 (或者 undefined)\nthrow 一个同步异常\n就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。\n\n返回另一个 promise\n这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // I got a user account!\n    })\n```\n\n> 注意到我是 `return` 第二个 promise，这个 `return` 非常重要。如果我没有写 `return`，`getUserAccountById()` 就会成为一个副作用，并且下一个函数将会接收到 `undefined` 而非 `userAccount`。\n\n### 返回一个同步值 (或者 undefined)\n\n返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        if (inMemoryCache[user.id]) {\n            return inMemoryCache[user.id]    // returning a synchronous value!\n        }\n        return getUserAccountById(user.id) // returning a promise!\n    }).then(function (userAccount) {\n        // I got a user account!\n    });\n```\n\n是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。\n\n不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。\n\n出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。\n\n### 抛出同步异常\n\n谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        if (user.isLoggedOut()) {\n            throw new Error('user logged out!') // throwing a synchronous error!\n        }\n\n        if (inMemoryCache[user.id]) {\n            return inMemoryCache[user.id]       // returning a synchronous value!\n        }\n\n        return getUserAccountById(user.id)   // returning a promise!\n    }).then(function (userAccount) {\n        // I got a user account!\n    }).catch(function (err) {\n        // Boo, I got an error!\n    })\n```\n\n如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。\n\n这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。\n\n# 进阶错误\n\n好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。\n这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。\n\n### 进阶错误 #1：不知道 Promise.resolve()\n\n如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：\n\n```javascript\n    new Promise(function (resolve, reject) {\n        resolve(someSynchronousValue)\n    }).then(/* ... */)\n```\n\n你会发现使用 Promise.resolve 会更加简洁：\n\n```javascript\n    Promise.resolve(someSynchronousValue).then(/* ... */);\n```\n\n它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：\n\n```javascript\n    function somePromiseAPI() {\n        return Promise.resolve().then(function () {\n            doSomethingThatMayThrow()\n            return 'foo'\n        }).then(/* ... */)\n    }\n```\n\n切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。\n\n类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。\n\n```javascript\n    Promise.reject(new Error('some awful error'));\n```\n\n### 进阶错误 #2：catch() 与 then(null, ...) 并非完全等价\n\n之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：\n\n```javascript\n    somePromise().catch(function (err) {\n        // handle error\n    })\n\n    somePromise().then(null, function (err) {\n        // handle error\n    })\n```\n\n然而，这并不意味着下面两段代码是等价的：\n\n```javascript\n    somePromise().then(function () {\n        return someOtherPromise();\n    }).catch(function (err) {\n        // handle error\n    });\n\n    somePromise().then(function () {\n        return someOtherPromise();\n    }, function (err) {\n        // handle error\n    });\n```\n\n如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：\n\n```javascript\n    somePromise().then(function () {\n        throw new Error('oh noes')\n    }).catch(function (err) {\n        // I caught your error! :)\n    })\n\n    somePromise().then(function () {\n        throw new Error('oh noes')\n    }, function (err) {\n        // I didn't catch your error! :(\n    })\n```\n\n因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。\n\n鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：\n\n```javascript\n    it('should throw an error', function () {\n        return doSomethingThatThrows().then(function () {\n            throw new Error('I expected an error!')\n        }, function (err) {\n            should.exist(err)\n        })\n    })\n```\n\n说到这里，[Mocha](http://mochajs.org/) 和 [Chai](http://chaijs.com/) 用来测试 promise 接口时，是一对非常好的组合。 [pouchdb-plugin-seed](https://github.com/pouchdb/plugin-seed) 项目中有一些 [示例](https://github.com/pouchdb/plugin-seed/blob/master/test/test.js) 可以帮助你入门。\n\n### 进阶错误 #3：promises vs promises factories\n\n当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。\n\n你可能天真的写下这样的代码：\n\n```javascript\n    function executeSequentially(promises) {\n        var result = Promise.resolve()\n        promises.forEach(function (promise) {\n            result = result.then(promise)\n        })\n\n        return result\n    }\n```\n\n不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。\n\n其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。\n\n```javascript\n    function executeSequentially(promiseFactories) {\n        var result = Promise.resolve()\n        promiseFactories.forEach(function (promiseFactory) {\n            result = result.then(promiseFactory)\n        })\n\n        return result\n    }\n```\n\n我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：\n\n```javascript\n    function myPromiseFactory() {\n        return somethingThatCreatesAPromise();\n    }\n```\n\n为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。\n\n如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(...) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。\n\n### 进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\n\n有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // dangit, I need the \"user\" object too!\n    })\n```\n\n为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：\n\n```javascript\n    var user\n    getUserByName('nolan')\n    .then(function (result) {\n        user = result\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // okay, I have both the \"user\" and the \"userAccount\"\n    })\n```\n\n这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id).then(function (userAccount) {\n            // okay, I have both the \"user\" and the \"userAccount\"\n        })\n    })\n```\n\n…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：\n\n```javascript\n    function onGetUserAndUserAccount(user, userAccount) {\n        return doSomething(user, userAccount)\n    }\n\n    function onGetUser(user) {\n        return getUserAccountById(user.id).then(function (userAccount) {\n            return onGetUserAndUserAccount(user, userAccount)\n        })\n    }\n\n    getUserByName('nolan')\n    .then(onGetUser)\n    .then(function () {\n        // at this point, doSomething() is done, and we are back to indentation 0\n    })\n```\n\n由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：\n\n```javascript\n    putYourRightFootIn()\n    .then(putYourRightFootOut)\n    .then(putYourRightFootIn)\n    .then(shakeItAllAbout)\n```\n\n`这就是 promises 的重点。`\n\n\n### 进阶错误 #5：promises 穿透\n\n最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。\n\n你认为下面的代码会打印出什么？\n\n```javascript\n    Promise.resolve('foo')\n    .then(Promise.resolve('bar'))\n    .then(function (result) {\n        console.log(result);\n    });\n```\n\n如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！\n\n发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：\n\n```javascript\n    Promise.resolve('foo')\n    .then(null)\n    .then(function (result) {\n        console.log(result)\n    })\n```\n\n添加任意数量的 then(null)，它依然会打印 foo。\n\n这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：\n\n```javascript\n    Promise.resolve('foo').then(function () {\n        return Promise.resolve('bar')\n    }).then(function (result) {\n        console.log(result)\n    })\n```\n\n这样他就会如我们所想的打印出 bar。\n\n`因此记住：永远都是往 then() 中传递函数！`\n\n\n### 期待 async/await\n在 “[Taming the asynchronous beast with ES7](https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html)” 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。\n\n这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。\n\n从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。\n\nES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。\n\n因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”\n\n```javascript\n\n// Promise.all is good for executing many promises at once\nPromise.all([\n  promise1,\n  promise2\n]);\n\n// Promise.resolve is good for wrapping synchronous code\nPromise.resolve().then(function () {\n  if (somethingIsNotRight()) {\n    throw new Error(\"I will be rejected asynchronously!\");\n  } else {\n    return \"This string will be resolved asynchronously!\";\n  }\n});\n\n// execute some promises one after the other.\n// this takes an array of promise factories, i.e.\n// an array of functions that RETURN a promise\n// (not an array of promises themselves; those would execute immediately)\nfunction sequentialize(promiseFactories) {\n  var chain = Promise.resolve();\n  promiseFactories.forEach(function (promiseFactory) {\n    chain = chain.then(promiseFactory);\n  });\n  return chain;\n}\n\n// Promise.race is good for setting a timeout:\nPromise.race([\n  new Promise(function (resolve, reject) {\n    setTimeout(reject, 10000); // timeout after 10 secs\n  }),\n  doSomethingThatMayTakeAwhile()\n]);\n\n// Promise finally util similar to Q.finally\n// e.g. promise.then(...).catch().then(...).finally(...)\nfunction finally (promise, cb) {\n  return promise.then(function (res) {\n    var promise2 = cb();\n    if (typeof promise2.then === 'function') {\n      return promise2.then(function () {\n        return res;\n      });\n    }\n    return res;\n  }, function (reason) {\n    var promise2 = cb();\n    if (typeof promise2.then === 'function') {\n      return promise2.then(function () {\n        throw reason;\n      });\n    }\n    throw reason;\n  });\n};\n\n```\n","source":"_posts/2017-03-06-we-have-a-problem-with-promise.markdown","raw":"---\nlayout:     post\ntitle:      \"We have a problem with promise\"\nsubtitle:   \"Promise\"\ndate:       2016-07-04 15:23\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Promise\n---\n\n### *下面四种Promise的区别*\n\n```javascript\n    doSomething().then(() => {\n        return doSomethingElse()\n    })\n\n    doSomething().then(() => {\n        doSomethingElse()\n    })\n\n    doSomething().then(doSomethingElse())\n\n    doSomething().then(doSomethingElse)\n```\n\n## Promise的起源\n\n如果你阅读了 promises 的一些相关文献，你会发现有一个词 [金字塔问题](https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf#.ca5u6o9fl) 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。\n\nPromises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 [Callback Hell的救赎](http://youtu.be/hf1T_AONQJU) 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。\n\n> 原文关于副作用的描述并不能很直观的进行理解，建议参考 [WIKI](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。\n\n并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的*堆栈*破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。\n\nPromises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。\n\n## 新手错误\n\nPromise对于不同的人有不同的理解和观点，但是这篇文章我特质[正式标准](https://promisesaplus.com/), 在现代浏览器中暴露为window.Promise。虽然并非所有浏览器都有windows.Promise,但是可以寻找一些pollyfill,比如[Lie](https://github.com/calvinmetcalf/lie)、[bluebird](https://github.com/petkaantonov/bluebird)。\n\n### 新手错误 #1： promise版的金字塔问题\n观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个:\n\n```javascript\n    remotedb.allDocs({\n        include_docs: true,\n        attachments: true\n    }).then(function (result) {\n        var docs = result.rows;\n        docs.forEach(function(element) {\n            localdb.put(element.doc).then(function(response) {\n                alert('Pulled doc with id ' + element.doc._id + ' and added to local db.');\n            }).catch(function (err) {\n                if (err.status == 409) {\n                    localdb.get(element.doc._id).then(function (resp) {\n                        localdb.remove(resp._id, resp._rev).then(function (resp) {\n                                // et cetera...\n                        })\n                    })\n                }\n            })\n        })\n    })\n\n```\n\n是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。\n\n并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)\n\n正确的风格应该是:\n\n```javascript\n    remotedb.allDocs(...).then(function (resultOfAllDocs) {\n        return localdb.put(...)\n    }).then(function (resultOfPut) {\n        return localdb.get(...)\n    }).then(function (resultOfGet) {\n        return localdb.put(...)\n    }).catch(function (err) {\n        console.log(err)\n    })\n```\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。\n\n### 新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\n\n这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。\n\n```javascript\n    // I want to remove() all docs\n    db.allDocs({include_docs: true}).then(function (result) {\n        result.rows.forEach(function (row) {\n            db.remove(row.doc)\n        })\n    }).then(function () {\n        // I naively believe all docs have been removed() now!\n    })\n```\n\n这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！\n\n这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。\n\n简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():\n\n```javascript\n    db.allDocs({include_docs: true}).then(function (result) {\n        return Promise.all(result.rows.map(function (row) {\n            return db.remove(row.doc)\n        }))\n    }).then(function (arrayOfResults) {\n        // All docs have really been removed() now!\n    })\n```\n\n上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。\n\n并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。\n\n### 新手错误 #3： 忘记使用 .catch()\n\n这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。\n\n> 类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注\n\n为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:\n\n```javascript\n    somePromise().then(function () {\n        return anotherPromise();\n    }).then(function () {\n        return yetAnotherPromise();\n    }).catch(console.log.bind(console)); // <-- this is badass\n```\n\n即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。\n\n### 新手错误 #4：使用 “deferred”\n这是一个我经常可以看到的错误，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。\n\n简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。\n\n因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。\n\n首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.\n\n```javascript\n    $q.when(db.put(doc)).then(/* ... */); // <-- this is all the code you need\n```\n\n另一种策略是使用[构造函数声明模式](https://blog.domenic.me/the-revealing-constructor-pattern/)，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:\n\n```javascript\n    new Promise(function (resolve, reject) {\n        fs.readFile('myfile.txt', function (err, file) {\n            if (err) {\n                return reject(err);\n            }\n            resolve(file);\n        });\n    }).then(/* ... */)\n```\n完工！我们打败了可怕的 def….啊哈，抓到自己了。:)\n\n> 关于为何这是一种反模式更多的内容，请查看 Bluebird 的 [promise anti-patterns](https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern) wiki 页\n\n### 新手错误 #5：使用副作用调用而非返回\n\n```javascript\n    somePromise().then(function () {\n        someOtherPromise()\n    }).then(function () {\n        // Gee, I hope someOtherPromise() has resolved!\n        // Spoiler alert: it hasn't.\n    })\n```\n\n好了，现在是时候讨论一下关于 promises 你所需要知道的一切。\n\n认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？\n\n就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？\n\n每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, ...) 的语法糖)。当我们在 then() 函数内部时：\n\n```javascript\n    somePromise().then(function () {\n        // I'm inside a then() function!\n    })\n```\n我们可以做什么呢？有三种事情：\n\nreturn 另一个 promise\nreturn 一个同步的值 (或者 undefined)\nthrow 一个同步异常\n就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。\n\n返回另一个 promise\n这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // I got a user account!\n    })\n```\n\n> 注意到我是 `return` 第二个 promise，这个 `return` 非常重要。如果我没有写 `return`，`getUserAccountById()` 就会成为一个副作用，并且下一个函数将会接收到 `undefined` 而非 `userAccount`。\n\n### 返回一个同步值 (或者 undefined)\n\n返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        if (inMemoryCache[user.id]) {\n            return inMemoryCache[user.id]    // returning a synchronous value!\n        }\n        return getUserAccountById(user.id) // returning a promise!\n    }).then(function (userAccount) {\n        // I got a user account!\n    });\n```\n\n是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。\n\n不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。\n\n出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。\n\n### 抛出同步异常\n\n谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        if (user.isLoggedOut()) {\n            throw new Error('user logged out!') // throwing a synchronous error!\n        }\n\n        if (inMemoryCache[user.id]) {\n            return inMemoryCache[user.id]       // returning a synchronous value!\n        }\n\n        return getUserAccountById(user.id)   // returning a promise!\n    }).then(function (userAccount) {\n        // I got a user account!\n    }).catch(function (err) {\n        // Boo, I got an error!\n    })\n```\n\n如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。\n\n这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。\n\n# 进阶错误\n\n好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。\n这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。\n\n### 进阶错误 #1：不知道 Promise.resolve()\n\n如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：\n\n```javascript\n    new Promise(function (resolve, reject) {\n        resolve(someSynchronousValue)\n    }).then(/* ... */)\n```\n\n你会发现使用 Promise.resolve 会更加简洁：\n\n```javascript\n    Promise.resolve(someSynchronousValue).then(/* ... */);\n```\n\n它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：\n\n```javascript\n    function somePromiseAPI() {\n        return Promise.resolve().then(function () {\n            doSomethingThatMayThrow()\n            return 'foo'\n        }).then(/* ... */)\n    }\n```\n\n切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。\n\n类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。\n\n```javascript\n    Promise.reject(new Error('some awful error'));\n```\n\n### 进阶错误 #2：catch() 与 then(null, ...) 并非完全等价\n\n之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：\n\n```javascript\n    somePromise().catch(function (err) {\n        // handle error\n    })\n\n    somePromise().then(null, function (err) {\n        // handle error\n    })\n```\n\n然而，这并不意味着下面两段代码是等价的：\n\n```javascript\n    somePromise().then(function () {\n        return someOtherPromise();\n    }).catch(function (err) {\n        // handle error\n    });\n\n    somePromise().then(function () {\n        return someOtherPromise();\n    }, function (err) {\n        // handle error\n    });\n```\n\n如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：\n\n```javascript\n    somePromise().then(function () {\n        throw new Error('oh noes')\n    }).catch(function (err) {\n        // I caught your error! :)\n    })\n\n    somePromise().then(function () {\n        throw new Error('oh noes')\n    }, function (err) {\n        // I didn't catch your error! :(\n    })\n```\n\n因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。\n\n鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：\n\n```javascript\n    it('should throw an error', function () {\n        return doSomethingThatThrows().then(function () {\n            throw new Error('I expected an error!')\n        }, function (err) {\n            should.exist(err)\n        })\n    })\n```\n\n说到这里，[Mocha](http://mochajs.org/) 和 [Chai](http://chaijs.com/) 用来测试 promise 接口时，是一对非常好的组合。 [pouchdb-plugin-seed](https://github.com/pouchdb/plugin-seed) 项目中有一些 [示例](https://github.com/pouchdb/plugin-seed/blob/master/test/test.js) 可以帮助你入门。\n\n### 进阶错误 #3：promises vs promises factories\n\n当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。\n\n你可能天真的写下这样的代码：\n\n```javascript\n    function executeSequentially(promises) {\n        var result = Promise.resolve()\n        promises.forEach(function (promise) {\n            result = result.then(promise)\n        })\n\n        return result\n    }\n```\n\n不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。\n\n其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。\n\n```javascript\n    function executeSequentially(promiseFactories) {\n        var result = Promise.resolve()\n        promiseFactories.forEach(function (promiseFactory) {\n            result = result.then(promiseFactory)\n        })\n\n        return result\n    }\n```\n\n我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：\n\n```javascript\n    function myPromiseFactory() {\n        return somethingThatCreatesAPromise();\n    }\n```\n\n为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。\n\n如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(...) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。\n\n### 进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\n\n有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // dangit, I need the \"user\" object too!\n    })\n```\n\n为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：\n\n```javascript\n    var user\n    getUserByName('nolan')\n    .then(function (result) {\n        user = result\n        return getUserAccountById(user.id)\n    }).then(function (userAccount) {\n        // okay, I have both the \"user\" and the \"userAccount\"\n    })\n```\n\n这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：\n\n```javascript\n    getUserByName('nolan').then(function (user) {\n        return getUserAccountById(user.id).then(function (userAccount) {\n            // okay, I have both the \"user\" and the \"userAccount\"\n        })\n    })\n```\n\n…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：\n\n```javascript\n    function onGetUserAndUserAccount(user, userAccount) {\n        return doSomething(user, userAccount)\n    }\n\n    function onGetUser(user) {\n        return getUserAccountById(user.id).then(function (userAccount) {\n            return onGetUserAndUserAccount(user, userAccount)\n        })\n    }\n\n    getUserByName('nolan')\n    .then(onGetUser)\n    .then(function () {\n        // at this point, doSomething() is done, and we are back to indentation 0\n    })\n```\n\n由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：\n\n```javascript\n    putYourRightFootIn()\n    .then(putYourRightFootOut)\n    .then(putYourRightFootIn)\n    .then(shakeItAllAbout)\n```\n\n`这就是 promises 的重点。`\n\n\n### 进阶错误 #5：promises 穿透\n\n最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。\n\n你认为下面的代码会打印出什么？\n\n```javascript\n    Promise.resolve('foo')\n    .then(Promise.resolve('bar'))\n    .then(function (result) {\n        console.log(result);\n    });\n```\n\n如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！\n\n发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：\n\n```javascript\n    Promise.resolve('foo')\n    .then(null)\n    .then(function (result) {\n        console.log(result)\n    })\n```\n\n添加任意数量的 then(null)，它依然会打印 foo。\n\n这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：\n\n```javascript\n    Promise.resolve('foo').then(function () {\n        return Promise.resolve('bar')\n    }).then(function (result) {\n        console.log(result)\n    })\n```\n\n这样他就会如我们所想的打印出 bar。\n\n`因此记住：永远都是往 then() 中传递函数！`\n\n\n### 期待 async/await\n在 “[Taming the asynchronous beast with ES7](https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html)” 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。\n\n这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。\n\n从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。\n\nES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。\n\n因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”\n\n```javascript\n\n// Promise.all is good for executing many promises at once\nPromise.all([\n  promise1,\n  promise2\n]);\n\n// Promise.resolve is good for wrapping synchronous code\nPromise.resolve().then(function () {\n  if (somethingIsNotRight()) {\n    throw new Error(\"I will be rejected asynchronously!\");\n  } else {\n    return \"This string will be resolved asynchronously!\";\n  }\n});\n\n// execute some promises one after the other.\n// this takes an array of promise factories, i.e.\n// an array of functions that RETURN a promise\n// (not an array of promises themselves; those would execute immediately)\nfunction sequentialize(promiseFactories) {\n  var chain = Promise.resolve();\n  promiseFactories.forEach(function (promiseFactory) {\n    chain = chain.then(promiseFactory);\n  });\n  return chain;\n}\n\n// Promise.race is good for setting a timeout:\nPromise.race([\n  new Promise(function (resolve, reject) {\n    setTimeout(reject, 10000); // timeout after 10 secs\n  }),\n  doSomethingThatMayTakeAwhile()\n]);\n\n// Promise finally util similar to Q.finally\n// e.g. promise.then(...).catch().then(...).finally(...)\nfunction finally (promise, cb) {\n  return promise.then(function (res) {\n    var promise2 = cb();\n    if (typeof promise2.then === 'function') {\n      return promise2.then(function () {\n        return res;\n      });\n    }\n    return res;\n  }, function (reason) {\n    var promise2 = cb();\n    if (typeof promise2.then === 'function') {\n      return promise2.then(function () {\n        throw reason;\n      });\n    }\n    throw reason;\n  });\n};\n\n```\n","slug":"2017-03-06-we-have-a-problem-with-promise","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d7600018s7t7j8o8pwj5","content":"<h3 id=\"下面四种Promise的区别\"><a href=\"#下面四种Promise的区别\" class=\"headerlink\" title=\"下面四种Promise的区别\"></a><em>下面四种Promise的区别</em></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomethingElse()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    doSomethingElse()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse())</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse)</div></pre></td></tr></table></figure>\n<h2 id=\"Promise的起源\"><a href=\"#Promise的起源\" class=\"headerlink\" title=\"Promise的起源\"></a>Promise的起源</h2><p>如果你阅读了 promises 的一些相关文献，你会发现有一个词 <a href=\"https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf#.ca5u6o9fl\" target=\"_blank\" rel=\"external\">金字塔问题</a> 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。</p>\n<p>Promises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 <a href=\"http://youtu.be/hf1T_AONQJU\" target=\"_blank\" rel=\"external\">Callback Hell的救赎</a> 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。</p>\n<blockquote>\n<p>原文关于副作用的描述并不能很直观的进行理解，建议参考 <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science\" target=\"_blank\" rel=\"external\">WIKI</a>) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。</p>\n</blockquote>\n<p>并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的<em>堆栈</em>破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。</p>\n<p>Promises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。</p>\n<h2 id=\"新手错误\"><a href=\"#新手错误\" class=\"headerlink\" title=\"新手错误\"></a>新手错误</h2><p>Promise对于不同的人有不同的理解和观点，但是这篇文章我特质<a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"external\">正式标准</a>, 在现代浏览器中暴露为window.Promise。虽然并非所有浏览器都有windows.Promise,但是可以寻找一些pollyfill,比如<a href=\"https://github.com/calvinmetcalf/lie\" target=\"_blank\" rel=\"external\">Lie</a>、<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\">bluebird</a>。</p>\n<h3 id=\"新手错误-1：-promise版的金字塔问题\"><a href=\"#新手错误-1：-promise版的金字塔问题\" class=\"headerlink\" title=\"新手错误 #1： promise版的金字塔问题\"></a>新手错误 #1： promise版的金字塔问题</h3><p>观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remotedb.allDocs(&#123;</div><div class=\"line\">    <span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">attachments</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> docs = result.rows;</div><div class=\"line\">    docs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">        localdb.put(element.doc).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Pulled doc with id '</span> + element.doc._id + <span class=\"string\">' and added to local db.'</span>);</div><div class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err.status == <span class=\"number\">409</span>) &#123;</div><div class=\"line\">                localdb.get(element.doc._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">                    localdb.remove(resp._id, resp._rev).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">                            <span class=\"comment\">// et cetera...</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。</p>\n<p>并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)</p>\n<p>正确的风格应该是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">remotedb.allDocs(...).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfAllDocs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.put(...)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfPut</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.get(...)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfGet</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.put(...)</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。</p>\n<h3 id=\"新手错误-2：-WTF-用了-promises-后怎么用-forEach\"><a href=\"#新手错误-2：-WTF-用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\"></a>新手错误 #2： WTF, 用了 promises 后怎么用 forEach?</h3><p>这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// I want to remove() all docs</span></div><div class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    result.rows.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</div><div class=\"line\">        db.remove(row.doc)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I naively believe all docs have been removed() now!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！</p>\n<p>这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。</p>\n<p>简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(result.rows.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> db.remove(row.doc)</div><div class=\"line\">    &#125;))</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arrayOfResults</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// All docs have really been removed() now!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。</p>\n<p>并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。</p>\n<h3 id=\"新手错误-3：-忘记使用-catch\"><a href=\"#新手错误-3：-忘记使用-catch\" class=\"headerlink\" title=\"新手错误 #3： 忘记使用 .catch()\"></a>新手错误 #3： 忘记使用 .catch()</h3><p>这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。</p>\n<blockquote>\n<p>类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注</p>\n</blockquote>\n<p>为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> anotherPromise();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> yetAnotherPromise();</div><div class=\"line\">&#125;).catch(<span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)); <span class=\"comment\">// &lt;-- this is badass</span></div></pre></td></tr></table></figure>\n<p>即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。</p>\n<h3 id=\"新手错误-4：使用-“deferred”\"><a href=\"#新手错误-4：使用-“deferred”\" class=\"headerlink\" title=\"新手错误 #4：使用 “deferred”\"></a>新手错误 #4：使用 “deferred”</h3><p>这是一个我经常可以看到的错误，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。</p>\n<p>简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。</p>\n<p>因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。</p>\n<p>首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$q.when(db.put(doc)).then(<span class=\"comment\">/* ... */</span>); <span class=\"comment\">// &lt;-- this is all the code you need</span></div></pre></td></tr></table></figure>\n<p>另一种策略是使用<a href=\"https://blog.domenic.me/the-revealing-constructor-pattern/\" target=\"_blank\" rel=\"external\">构造函数声明模式</a>，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(<span class=\"string\">'myfile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, file</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> reject(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        resolve(file);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).then(<span class=\"comment\">/* ... */</span>)</div></pre></td></tr></table></figure>\n<p>完工！我们打败了可怕的 def….啊哈，抓到自己了。:)</p>\n<blockquote>\n<p>关于为何这是一种反模式更多的内容，请查看 Bluebird 的 <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\" target=\"_blank\" rel=\"external\">promise anti-patterns</a> wiki 页</p>\n</blockquote>\n<h3 id=\"新手错误-5：使用副作用调用而非返回\"><a href=\"#新手错误-5：使用副作用调用而非返回\" class=\"headerlink\" title=\"新手错误 #5：使用副作用调用而非返回\"></a>新手错误 #5：使用副作用调用而非返回</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    someOtherPromise()</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Gee, I hope someOtherPromise() has resolved!</span></div><div class=\"line\">    <span class=\"comment\">// Spoiler alert: it hasn't.</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>好了，现在是时候讨论一下关于 promises 你所需要知道的一切。</p>\n<p>认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？</p>\n<p>就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？</p>\n<p>每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, …) 的语法糖)。当我们在 then() 函数内部时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I'm inside a then() function!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>我们可以做什么呢？有三种事情：</p>\n<p>return 另一个 promise<br>return 一个同步的值 (或者 undefined)<br>throw 一个同步异常<br>就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。</p>\n<p>返回另一个 promise<br>这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意到我是 <code>return</code> 第二个 promise，这个 <code>return</code> 非常重要。如果我没有写 <code>return</code>，<code>getUserAccountById()</code> 就会成为一个副作用，并且下一个函数将会接收到 <code>undefined</code> 而非 <code>userAccount</code>。</p>\n</blockquote>\n<h3 id=\"返回一个同步值-或者-undefined\"><a href=\"#返回一个同步值-或者-undefined\" class=\"headerlink\" title=\"返回一个同步值 (或者 undefined)\"></a>返回一个同步值 (或者 undefined)</h3><p>返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (inMemoryCache[user.id]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inMemoryCache[user.id]    <span class=\"comment\">// returning a synchronous value!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id) <span class=\"comment\">// returning a promise!</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。</p>\n<p>不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。</p>\n<p>出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。</p>\n<h3 id=\"抛出同步异常\"><a href=\"#抛出同步异常\" class=\"headerlink\" title=\"抛出同步异常\"></a>抛出同步异常</h3><p>谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (user.isLoggedOut()) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'user logged out!'</span>) <span class=\"comment\">// throwing a synchronous error!</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (inMemoryCache[user.id]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inMemoryCache[user.id]       <span class=\"comment\">// returning a synchronous value!</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)   <span class=\"comment\">// returning a promise!</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Boo, I got an error!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。</p>\n<p>这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。</p>\n<h1 id=\"进阶错误\"><a href=\"#进阶错误\" class=\"headerlink\" title=\"进阶错误\"></a>进阶错误</h1><p>好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。<br>这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。</p>\n<h3 id=\"进阶错误-1：不知道-Promise-resolve\"><a href=\"#进阶错误-1：不知道-Promise-resolve\" class=\"headerlink\" title=\"进阶错误 #1：不知道 Promise.resolve()\"></a>进阶错误 #1：不知道 Promise.resolve()</h3><p>如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    resolve(someSynchronousValue)</div><div class=\"line\">&#125;).then(<span class=\"comment\">/* ... */</span>)</div></pre></td></tr></table></figure>\n<p>你会发现使用 Promise.resolve 会更加简洁：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(someSynchronousValue).then(<span class=\"comment\">/* ... */</span>);</div></pre></td></tr></table></figure>\n<p>它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">somePromiseAPI</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        doSomethingThatMayThrow()</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span></div><div class=\"line\">    &#125;).then(<span class=\"comment\">/* ... */</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。</p>\n<p>类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'some awful error'</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"进阶错误-2：catch-与-then-null-…-并非完全等价\"><a href=\"#进阶错误-2：catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"进阶错误 #2：catch() 与 then(null, …) 并非完全等价\"></a>进阶错误 #2：catch() 与 then(null, …) 并非完全等价</h3><p>之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>然而，这并不意味着下面两段代码是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> someOtherPromise();</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> someOtherPromise();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>)</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I caught your error! :)</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>)</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I didn't catch your error! :(</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。</p>\n<p>鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should throw an error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomethingThatThrows().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'I expected an error!'</span>)</div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        should.exist(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>说到这里，<a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a> 和 <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a> 用来测试 promise 接口时，是一对非常好的组合。 <a href=\"https://github.com/pouchdb/plugin-seed\" target=\"_blank\" rel=\"external\">pouchdb-plugin-seed</a> 项目中有一些 <a href=\"https://github.com/pouchdb/plugin-seed/blob/master/test/test.js\" target=\"_blank\" rel=\"external\">示例</a> 可以帮助你入门。</p>\n<h3 id=\"进阶错误-3：promises-vs-promises-factories\"><a href=\"#进阶错误-3：promises-vs-promises-factories\" class=\"headerlink\" title=\"进阶错误 #3：promises vs promises factories\"></a>进阶错误 #3：promises vs promises factories</h3><p>当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。</p>\n<p>你可能天真的写下这样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeSequentially</span>(<span class=\"params\">promises</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">    promises.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promise</span>) </span>&#123;</div><div class=\"line\">        result = result.then(promise)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。</p>\n<p>其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeSequentially</span>(<span class=\"params\">promiseFactories</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">    promiseFactories.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promiseFactory</span>) </span>&#123;</div><div class=\"line\">        result = result.then(promiseFactory)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPromiseFactory</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> somethingThatCreatesAPromise();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。</p>\n<p>如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(…) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。</p>\n<h3 id=\"进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\"><a href=\"#进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\" class=\"headerlink\" title=\"进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\"></a>进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办</h3><p>有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// dangit, I need the \"user\" object too!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user</div><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    user = result</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// okay, I have both the \"user\" and the \"userAccount\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// okay, I have both the \"user\" and the \"userAccount\"</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onGetUserAndUserAccount</span>(<span class=\"params\">user, userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomething(user, userAccount)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onGetUser</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> onGetUserAndUserAccount(user, userAccount)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>)</div><div class=\"line\">.then(onGetUser)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// at this point, doSomething() is done, and we are back to indentation 0</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">putYourRightFootIn()</div><div class=\"line\">.then(putYourRightFootOut)</div><div class=\"line\">.then(putYourRightFootIn)</div><div class=\"line\">.then(shakeItAllAbout)</div></pre></td></tr></table></figure>\n<p><code>这就是 promises 的重点。</code></p>\n<h3 id=\"进阶错误-5：promises-穿透\"><a href=\"#进阶错误-5：promises-穿透\" class=\"headerlink\" title=\"进阶错误 #5：promises 穿透\"></a>进阶错误 #5：promises 穿透</h3><p>最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。</p>\n<p>你认为下面的代码会打印出什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">.then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>))</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！</p>\n<p>发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">.then(<span class=\"literal\">null</span>)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>添加任意数量的 then(null)，它依然会打印 foo。</p>\n<p>这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样他就会如我们所想的打印出 bar。</p>\n<p><code>因此记住：永远都是往 then() 中传递函数！</code></p>\n<h3 id=\"期待-async-await\"><a href=\"#期待-async-await\" class=\"headerlink\" title=\"期待 async/await\"></a>期待 async/await</h3><p>在 “<a href=\"https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html\" target=\"_blank\" rel=\"external\">Taming the asynchronous beast with ES7</a>” 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。</p>\n<p>这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。</p>\n<p>从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。</p>\n<p>ES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。</p>\n<p>因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.all is good for executing many promises at once</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">  promise1,</div><div class=\"line\">  promise2</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.resolve is good for wrapping synchronous code</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (somethingIsNotRight()) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"I will be rejected asynchronously!\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"This string will be resolved asynchronously!\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// execute some promises one after the other.</span></div><div class=\"line\"><span class=\"comment\">// this takes an array of promise factories, i.e.</span></div><div class=\"line\"><span class=\"comment\">// an array of functions that RETURN a promise</span></div><div class=\"line\"><span class=\"comment\">// (not an array of promises themselves; those would execute immediately)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sequentialize</span>(<span class=\"params\">promiseFactories</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> chain = <span class=\"built_in\">Promise</span>.resolve();</div><div class=\"line\">  promiseFactories.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promiseFactory</span>) </span>&#123;</div><div class=\"line\">    chain = chain.then(promiseFactory);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> chain;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.race is good for setting a timeout:</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    setTimeout(reject, <span class=\"number\">10000</span>); <span class=\"comment\">// timeout after 10 secs</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  doSomethingThatMayTakeAwhile()</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise finally util similar to Q.finally</span></div><div class=\"line\"><span class=\"comment\">// e.g. promise.then(...).catch().then(...).finally(...)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">finally</span> (<span class=\"params\">promise, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise2 = cb();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise2.then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> promise2.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> res;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise2 = cb();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise2.then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> promise2.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> reason;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">throw</span> reason;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下面四种Promise的区别\"><a href=\"#下面四种Promise的区别\" class=\"headerlink\" title=\"下面四种Promise的区别\"></a><em>下面四种Promise的区别</em></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomethingElse()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">doSomething().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    doSomethingElse()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse())</div><div class=\"line\"></div><div class=\"line\">doSomething().then(doSomethingElse)</div></pre></td></tr></table></figure>\n<h2 id=\"Promise的起源\"><a href=\"#Promise的起源\" class=\"headerlink\" title=\"Promise的起源\"></a>Promise的起源</h2><p>如果你阅读了 promises 的一些相关文献，你会发现有一个词 <a href=\"https://medium.com/@wavded/managing-node-js-callback-hell-1fe03ba8baf#.ca5u6o9fl\" target=\"_blank\" rel=\"external\">金字塔问题</a> 经常出现。它描述的是大量的回调函数慢慢向右侧屏幕延伸的一种状态。</p>\n<p>Promises 的确解决了这个问题，并且不仅仅是缩进问题。就像在 <a href=\"http://youtu.be/hf1T_AONQJU\" target=\"_blank\" rel=\"external\">Callback Hell的救赎</a> 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。相反，我们的整个代码流程都是基于副作用的: 一个函数会附带调用其他函数。</p>\n<blockquote>\n<p>原文关于副作用的描述并不能很直观的进行理解，建议参考 <a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science\" target=\"_blank\" rel=\"external\">WIKI</a>) 。简单来说就是一个函数除了会返回一个值之外，还会修改函数以外的状态如全局变量等等。实际上所有异步调用都可以视为带有副作用的行为。</p>\n</blockquote>\n<p>并且实际上，回调更加恼人的是，他会将我们通常在大部分编程语言中能获得的<em>堆栈</em>破坏。编写代码时如果无法获取堆栈就像开车时没有刹车一样: 不到用的时候，你不会知道它有多重要。</p>\n<p>Promises 给予我们的就是在我们使用异步时丢失的最重要的语言基石: return, throw 以及堆栈。但是想要 promises 能够提供这些便利给你的前提是你知道如何正确的使用它们。</p>\n<h2 id=\"新手错误\"><a href=\"#新手错误\" class=\"headerlink\" title=\"新手错误\"></a>新手错误</h2><p>Promise对于不同的人有不同的理解和观点，但是这篇文章我特质<a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"external\">正式标准</a>, 在现代浏览器中暴露为window.Promise。虽然并非所有浏览器都有windows.Promise,但是可以寻找一些pollyfill,比如<a href=\"https://github.com/calvinmetcalf/lie\" target=\"_blank\" rel=\"external\">Lie</a>、<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\">bluebird</a>。</p>\n<h3 id=\"新手错误-1：-promise版的金字塔问题\"><a href=\"#新手错误-1：-promise版的金字塔问题\" class=\"headerlink\" title=\"新手错误 #1： promise版的金字塔问题\"></a>新手错误 #1： promise版的金字塔问题</h3><p>观察大家如何使用 PouchDB 这类大型的 promise 风格的API，我发现大量错误的 promise 使用形式。最常见的错误就是下面这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remotedb.allDocs(&#123;</div><div class=\"line\">    <span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">attachments</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> docs = result.rows;</div><div class=\"line\">    docs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">        localdb.put(element.doc).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">'Pulled doc with id '</span> + element.doc._id + <span class=\"string\">' and added to local db.'</span>);</div><div class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err.status == <span class=\"number\">409</span>) &#123;</div><div class=\"line\">                localdb.get(element.doc._id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">                    localdb.remove(resp._id, resp._rev).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">                            <span class=\"comment\">// et cetera...</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>是的，实际上你可以像使用回调一样使用 promises，恩，就像用打磨机去削脚趾甲一样，你确实可以这么做。</p>\n<p>并且如果你以为这样的错误只限于初学者，那么你会惊讶于我实际上是在黑莓官方开发者博客上看到上面的代码。老的回调风格的习惯难以消灭。(至开发者: 抱歉选了你的例子，但是你的例子将会有积极的教育意义)</p>\n<p>正确的风格应该是:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">remotedb.allDocs(...).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfAllDocs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.put(...)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfPut</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.get(...)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfGet</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> localdb.put(...)</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用，稍后我们在这块做更多的讨论。</p>\n<h3 id=\"新手错误-2：-WTF-用了-promises-后怎么用-forEach\"><a href=\"#新手错误-2：-WTF-用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"新手错误 #2： WTF, 用了 promises 后怎么用 forEach?\"></a>新手错误 #2： WTF, 用了 promises 后怎么用 forEach?</h3><p>这里是大多数人对于 promises 的理解开始出现偏差。一旦当他们要使用他们熟悉的 forEach() 循环 (无论是 for 循环还是 while 循环)，他们完全不知道如何将 promises 与其一起使。因此他们就会写下类似这样的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// I want to remove() all docs</span></div><div class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    result.rows.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</div><div class=\"line\">        db.remove(row.doc)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I naively believe all docs have been removed() now!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这份代码有什么问题？问题在于第一个函数实际上返回的是 undefined，这意味着第二个方法不会等待所有 documents 都执行 db.remove()。实际上他不会等待任何事情，并且可能会在任意数量的文档被删除后执行！</p>\n<p>这是一个非常隐蔽的 bug，因为如果 PouchDB 删除这些文档足够快，你的 UI 界面上显示的会完成正常，你可能会完全注意不到有什么东西有错误。这个 bug 可能会在一些古怪的竞态问题或一些特定的浏览器中暴露出来，并且到时可能几乎没有可能去定位问题。</p>\n<p>简而言之，forEach()/for/while 并非你寻找的解决方案。你需要的是 Promise.all():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(result.rows.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> db.remove(row.doc)</div><div class=\"line\">    &#125;))</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arrayOfResults</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// All docs have really been removed() now!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上面的代码是什么意思呢？大体来说，Promise.all()会以一个 promises 数组为输入，并且返回一个新的 promise。这个新的 promise 会在数组中所有的 promises 都成功返回后才返回。他是异步版的 for 循环。</p>\n<p>并且 Promise.all() 会将执行结果组成的数组返回到下一个函数，比如当你希望从 PouchDB 中获取多个对象时，会非常有用。此外一个更加有用的特效是，一旦数组中的 promise 任意一个返回错误，Promise.all() 也会返回错误。</p>\n<h3 id=\"新手错误-3：-忘记使用-catch\"><a href=\"#新手错误-3：-忘记使用-catch\" class=\"headerlink\" title=\"新手错误 #3： 忘记使用 .catch()\"></a>新手错误 #3： 忘记使用 .catch()</h3><p>这是另一个常见的错误。单纯的坚信自己的 promises 会永远不出现异常，很多开发者会忘记在他们的代码中添加一个 .catch()。然而不幸的是这也意味着，任何被抛出的异常都会被吃掉，并且你无法在 console 中观察到他们。这类问题 debug 起来会非常痛苦。</p>\n<blockquote>\n<p>类似 Bluebird 之类的 Promise 库会在这种场景抛出 UnhandledRejectionError 警示有未处理的异常，这类情况一旦发现，就会造成脚本异常，在 Node 中更会造成进程 Crash 的问题，因此正确的添加 .catch() 非常重要。 译者注</p>\n</blockquote>\n<p>为了避免这类讨厌的场景，我习惯于像下面的代码一样使用 promise:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> anotherPromise();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> yetAnotherPromise();</div><div class=\"line\">&#125;).catch(<span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>)); <span class=\"comment\">// &lt;-- this is badass</span></div></pre></td></tr></table></figure>\n<p>即使你坚信不会出现异常，添加一个 catch() 总归是更加谨慎的。如果你的假设最终被发现是错误的，它会让你的生活更加美好。</p>\n<h3 id=\"新手错误-4：使用-“deferred”\"><a href=\"#新手错误-4：使用-“deferred”\" class=\"headerlink\" title=\"新手错误 #4：使用 “deferred”\"></a>新手错误 #4：使用 “deferred”</h3><p>这是一个我经常可以看到的错误，以至于我甚至不愿意在这里重复它，就像惧怕 Beetlejuice 一样，仅仅是提到它的名字，就会召唤出来更多。</p>\n<p>简单的说，promises 拥有一个漫长并且戏剧化的历史，Javascript 社区花费了大量的时间让其走上正轨。在早期，deferred 在 Q，When，RSVP，Bluebird，Lie等等的 “优秀” 类库中被引入， jQuery 与 Angular 在使用 ES6 Promise 规范之前，都是使用这种模式编写代码。</p>\n<p>因此如果你在你的代码中使用了这个词 (我不会把这个词重复第三遍！)，你就做错了。下面是说明一下如何避免它。</p>\n<p>首先，大部分 promises 类库都会提供一个方式去包装一个第三方的 promises 对象。举例来说，Angular的 $q 模块允许你使用 $q.when 包裹非 $q 的 promises。因此 Angular 用户可以这样使用 PouchDB promises.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$q.when(db.put(doc)).then(<span class=\"comment\">/* ... */</span>); <span class=\"comment\">// &lt;-- this is all the code you need</span></div></pre></td></tr></table></figure>\n<p>另一种策略是使用<a href=\"https://blog.domenic.me/the-revealing-constructor-pattern/\" target=\"_blank\" rel=\"external\">构造函数声明模式</a>，它在用来包裹非 promise API 时非常有用。举例来说，为了包裹一个回调风格的 API 如 Node 的 fs.readFile ，你可以简单的这么做:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(<span class=\"string\">'myfile.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, file</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> reject(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        resolve(file);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).then(<span class=\"comment\">/* ... */</span>)</div></pre></td></tr></table></figure>\n<p>完工！我们打败了可怕的 def….啊哈，抓到自己了。:)</p>\n<blockquote>\n<p>关于为何这是一种反模式更多的内容，请查看 Bluebird 的 <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\" target=\"_blank\" rel=\"external\">promise anti-patterns</a> wiki 页</p>\n</blockquote>\n<h3 id=\"新手错误-5：使用副作用调用而非返回\"><a href=\"#新手错误-5：使用副作用调用而非返回\" class=\"headerlink\" title=\"新手错误 #5：使用副作用调用而非返回\"></a>新手错误 #5：使用副作用调用而非返回</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    someOtherPromise()</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Gee, I hope someOtherPromise() has resolved!</span></div><div class=\"line\">    <span class=\"comment\">// Spoiler alert: it hasn't.</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>好了，现在是时候讨论一下关于 promises 你所需要知道的一切。</p>\n<p>认真的说，这是一个一旦你理解了它，就会避免所有我提及的错误的古怪的技巧。你准备好了么？</p>\n<p>就如我前面所说，promises 的奇妙在于给予我们以前的 return 与 throw。但是在实践中这到底是怎么一回事呢？</p>\n<p>每一个 promise 都会提供给你一个 then() 函数 (或是 catch()，实际上只是 then(null, …) 的语法糖)。当我们在 then() 函数内部时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I'm inside a then() function!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>我们可以做什么呢？有三种事情：</p>\n<p>return 另一个 promise<br>return 一个同步的值 (或者 undefined)<br>throw 一个同步异常<br>就是这样。一旦你理解了这个技巧，你就理解了 promises。因此让我们逐个了解下。</p>\n<p>返回另一个 promise<br>这是一个在 promise 文档中常见的使用模式，也就是我们在上文中提到的 “composing promises”：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意到我是 <code>return</code> 第二个 promise，这个 <code>return</code> 非常重要。如果我没有写 <code>return</code>，<code>getUserAccountById()</code> 就会成为一个副作用，并且下一个函数将会接收到 <code>undefined</code> 而非 <code>userAccount</code>。</p>\n</blockquote>\n<h3 id=\"返回一个同步值-或者-undefined\"><a href=\"#返回一个同步值-或者-undefined\" class=\"headerlink\" title=\"返回一个同步值 (或者 undefined)\"></a>返回一个同步值 (或者 undefined)</h3><p>返回 undefined 通常是错误的，但是返回一个同步值实际上是将同步代码包裹为 promise 风格代码的一种非常赞的手段。举例来说，我们对 users 信息有一个内存缓存。我们可以这样做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (inMemoryCache[user.id]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inMemoryCache[user.id]    <span class=\"comment\">// returning a synchronous value!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id) <span class=\"comment\">// returning a promise!</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>是不是很赞？第二个函数不需要关心 userAccount 是从同步方法还是异步方法中获取的，并且第一个函数可以非常自由的返回一个同步或者异步值。</p>\n<p>不幸的是，有一个不便的现实是在 JavaScript 中无返回值函数在技术上是返回 undefined，这就意味着当你本意是返回某些值时，你很容易会不经意间引入副作用。</p>\n<p>出于这个原因，我个人养成了在 then() 函数内部 永远返回或抛出 的习惯。我建议你也这样做。</p>\n<h3 id=\"抛出同步异常\"><a href=\"#抛出同步异常\" class=\"headerlink\" title=\"抛出同步异常\"></a>抛出同步异常</h3><p>谈到 throw，这是让 promises 更加赞的一点。比如我们希望在用户已经登出时，抛出一个同步异常。这会非常简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (user.isLoggedOut()) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'user logged out!'</span>) <span class=\"comment\">// throwing a synchronous error!</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (inMemoryCache[user.id]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> inMemoryCache[user.id]       <span class=\"comment\">// returning a synchronous value!</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)   <span class=\"comment\">// returning a promise!</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I got a user account!</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Boo, I got an error!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果用户已经登出，我们的 catch() 会接收到一个同步异常，并且如果 后续的 promise 中出现异步异常，他也会接收到。再强调一次，这个函数并不需要关心这个异常是同步还是异步返回的。</p>\n<p>这种特性非常有用，因此它能够在开发过程中帮助定位代码问题。举例来说，如果在 then() 函数内部中的任何地方，我们执行 JSON.parse()，如果 JSON 格式是错误的，那么它就会抛出一个异常。如果是使用回调风格，这个错误很可能就会被吃掉，但是使用 promises，我们可以轻易的在 catch() 函数中处理它了。</p>\n<h1 id=\"进阶错误\"><a href=\"#进阶错误\" class=\"headerlink\" title=\"进阶错误\"></a>进阶错误</h1><p>好了，现在你已经了解了让 promises 变的超级简单的技巧，现在让我们聊一聊一些特殊场景。<br>这些错误之所以被我归类为 “进阶” ，是因为我只见过这些错误发生在对 promises 已经有相当深入了解的开发者身上。但是为了解决文章最开始的谜题，我们必须讨论一下这些错误。</p>\n<h3 id=\"进阶错误-1：不知道-Promise-resolve\"><a href=\"#进阶错误-1：不知道-Promise-resolve\" class=\"headerlink\" title=\"进阶错误 #1：不知道 Promise.resolve()\"></a>进阶错误 #1：不知道 Promise.resolve()</h3><p>如我上面所列举的，promises 在封装同步与异步代码时非常的有用。然而，如果你发现你经常写出下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    resolve(someSynchronousValue)</div><div class=\"line\">&#125;).then(<span class=\"comment\">/* ... */</span>)</div></pre></td></tr></table></figure>\n<p>你会发现使用 Promise.resolve 会更加简洁：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(someSynchronousValue).then(<span class=\"comment\">/* ... */</span>);</div></pre></td></tr></table></figure>\n<p>它在用来捕获同步异常时也极其的好用。由于它实在是好用，因此我已经养成了在我所有 promise 形式的 API 接口中这样使用它：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">somePromiseAPI</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        doSomethingThatMayThrow()</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span></div><div class=\"line\">    &#125;).then(<span class=\"comment\">/* ... */</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>切记：任何有可能 throw 同步异常的代码都是一个后续会导致几乎无法调试异常的潜在因素。但是如果你将所有代码都使用 Promise.resolve() 封装，那么你总是可以在之后使用 catch() 来捕获它。</p>\n<p>类似的，还有 Promise.reject() 你可以用来返回一个立刻返回失败的 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'some awful error'</span>));</div></pre></td></tr></table></figure>\n<h3 id=\"进阶错误-2：catch-与-then-null-…-并非完全等价\"><a href=\"#进阶错误-2：catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"进阶错误 #2：catch() 与 then(null, …) 并非完全等价\"></a>进阶错误 #2：catch() 与 then(null, …) 并非完全等价</h3><p>之前我说过 catch() 仅仅是一个语法糖。因此下面两段代码是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>然而，这并不意味着下面两段代码是等价的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> someOtherPromise();</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> someOtherPromise();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你好奇为何这两段代码并不等价，可以考虑一下如果第一个函数抛出异常会发生什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>)</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I caught your error! :)</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>)</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I didn't catch your error! :(</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>因此，当你使用 then(resolveHandler, rejectHandler) 这种形式时，rejectHandler 并不会捕获由 resolveHandler 引发的异常。</p>\n<p>鉴于此，我个人的习惯是不适用 then() 的第二个参数，而是总是使用 catch()。唯一的例外是当我写一些异步的 Mocha 测试用例时，我可能会希望用例的异常可以正确的被抛出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">it(<span class=\"string\">'should throw an error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomethingThatThrows().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'I expected an error!'</span>)</div><div class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        should.exist(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>说到这里，<a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a> 和 <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a> 用来测试 promise 接口时，是一对非常好的组合。 <a href=\"https://github.com/pouchdb/plugin-seed\" target=\"_blank\" rel=\"external\">pouchdb-plugin-seed</a> 项目中有一些 <a href=\"https://github.com/pouchdb/plugin-seed/blob/master/test/test.js\" target=\"_blank\" rel=\"external\">示例</a> 可以帮助你入门。</p>\n<h3 id=\"进阶错误-3：promises-vs-promises-factories\"><a href=\"#进阶错误-3：promises-vs-promises-factories\" class=\"headerlink\" title=\"进阶错误 #3：promises vs promises factories\"></a>进阶错误 #3：promises vs promises factories</h3><p>当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。</p>\n<p>你可能天真的写下这样的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeSequentially</span>(<span class=\"params\">promises</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">    promises.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promise</span>) </span>&#123;</div><div class=\"line\">        result = result.then(promise)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不幸的是，这份代码不会按照你的期望去执行，你传入 executeSequentially() 的 promises 依然会并行执行。</p>\n<p>其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。依照 promises 规范，一旦一个 promise 被创建，它就被执行了。因此你实际上需要的是一个 promise factories 数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeSequentially</span>(<span class=\"params\">promiseFactories</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"built_in\">Promise</span>.resolve()</div><div class=\"line\">    promiseFactories.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promiseFactory</span>) </span>&#123;</div><div class=\"line\">        result = result.then(promiseFactory)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我知道你在想什么：“这是哪个见鬼的 Java 程序猿，他为啥在说 factories？” 。实际上，一个 promises factory 是十分简单的，它仅仅是一个可以返回 promise 的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPromiseFactory</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> somethingThatCreatesAPromise();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为何这样就可以了？这是因为一个 promise factory 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。</p>\n<p>如果你查看上面的 executeSequentially() 函数，然后想象 myPromiseFactory 被包裹在 result.then(…) 之中，也许你脑中的小灯泡就会亮起。在此时此刻，对于 promise 你就算是悟道了。</p>\n<h3 id=\"进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\"><a href=\"#进阶错误-4：好了，如果我希望获得两个-promises-的结果怎么办\" class=\"headerlink\" title=\"进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办\"></a>进阶错误 #4：好了，如果我希望获得两个 promises 的结果怎么办</h3><p>有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。举例来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// dangit, I need the \"user\" object too!</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>为了成为一个优秀的 Javascript 开发者，并且避免金字塔问题，我们可能会将 user 对象存在一个更高的作用域中的变量里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user</div><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    user = result</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// okay, I have both the \"user\" and the \"userAccount\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样是没问题的，但是我个人认为这样做有些杂牌。我推荐的策略是抛弃成见，拥抱金字塔：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// okay, I have both the \"user\" and the \"userAccount\"</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>…至少暂时这样是没问题的。一旦缩进开始成为问题，你可以通过 Javascript 开发者从远古时期就开始使用的技巧，将函数抽离到一个命名函数中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onGetUserAndUserAccount</span>(<span class=\"params\">user, userAccount</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> doSomething(user, userAccount)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onGetUser</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> getUserAccountById(user.id).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userAccount</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> onGetUserAndUserAccount(user, userAccount)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getUserByName(<span class=\"string\">'nolan'</span>)</div><div class=\"line\">.then(onGetUser)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// at this point, doSomething() is done, and we are back to indentation 0</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>由于你的 promise 代码开始变得更加复杂，你可能发现自己开始将越来越多的函数抽离到命名函数中，我发现这样做，你的代码会越来越漂亮，就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">putYourRightFootIn()</div><div class=\"line\">.then(putYourRightFootOut)</div><div class=\"line\">.then(putYourRightFootIn)</div><div class=\"line\">.then(shakeItAllAbout)</div></pre></td></tr></table></figure>\n<p><code>这就是 promises 的重点。</code></p>\n<h3 id=\"进阶错误-5：promises-穿透\"><a href=\"#进阶错误-5：promises-穿透\" class=\"headerlink\" title=\"进阶错误 #5：promises 穿透\"></a>进阶错误 #5：promises 穿透</h3><p>最后，这个错误就是我开头说的 promises 谜题所影射的错误。这是一个非常稀有的用例，并且可能完全不会出现在你的代码中，但是的的确确震惊了我。</p>\n<p>你认为下面的代码会打印出什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">.then(<span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>))</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你认为它会打印出 bar，那么你就错了。它实际上打印出来的是 foo！</p>\n<p>发生这个的原因是如果你像 then() 传递的并非是一个函数（比如 promise），它实际上会将其解释为 then(null)，这就会导致前一个 promise 的结果会穿透下面。你可以自己测试一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\">.then(<span class=\"literal\">null</span>)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>添加任意数量的 then(null)，它依然会打印 foo。</p>\n<p>这实际上又回到了我之前说的 promises vs promise factories。简单的说，你可以直接传递一个 promise 到 then() 函数中，但是它并不会按照你期望的去执行。then() 是期望获取一个函数，因此你希望做的最可能是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'bar'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样他就会如我们所想的打印出 bar。</p>\n<p><code>因此记住：永远都是往 then() 中传递函数！</code></p>\n<h3 id=\"期待-async-await\"><a href=\"#期待-async-await\" class=\"headerlink\" title=\"期待 async/await\"></a>期待 async/await</h3><p>在 “<a href=\"https://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html\" target=\"_blank\" rel=\"external\">Taming the asynchronous beast with ES7</a>” 中提到的重点，在这篇文章中我探究了 ES7 的 async/await 关键字，以及它们是如何将 promises 更深度的结合入语言。不再会要求我们去编写伪同步的代码（以及一个假的 catch() 函数，虽然像，但是并非是 catch），ES7 将会允许我们使用真正的 try/catch/return 关键字，就像我们在 CS 101 上学的一样。</p>\n<p>这对于 Javascript 语言来说是一个大福音。因为即使到最后，只要我们的工具不告诉我们做错了，这些 promise 反模式依然会一直出现。</p>\n<p>从 JavaScript 的历史来看，我认为公正的评价来说 JSLint 与 JSHint 对社区的贡献是高于 JavaScript: The Good Parts 的，虽然他们包含的信息实际上是相同的。但是它们的区别在于 被告知你在你代码中犯的错误 与你去阅读一本书籍，去理解其他人犯的错误。</p>\n<p>ES7 的 async/await 的美妙在于，你的错误会被作为语法或者编译器错误提示出来，而不是运行时的 bug。不过就目前而言，了解 promise 可以做什么以及如何在 ES5 与 ES6 中正确的使用它们依然是有必要的。</p>\n<p>因此当我意识到，就像 JavaScript: The Good Parts 一样，这篇博文可能只会有非常有限的影响的时候，我希望当你发现其他人在犯同样的错误的时候，你可以将这篇博文提供给他们。因为现在依然有很多同学需要承认: “I have a problem with promises!”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.all is good for executing many promises at once</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">  promise1,</div><div class=\"line\">  promise2</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.resolve is good for wrapping synchronous code</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (somethingIsNotRight()) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"I will be rejected asynchronously!\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"This string will be resolved asynchronously!\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// execute some promises one after the other.</span></div><div class=\"line\"><span class=\"comment\">// this takes an array of promise factories, i.e.</span></div><div class=\"line\"><span class=\"comment\">// an array of functions that RETURN a promise</span></div><div class=\"line\"><span class=\"comment\">// (not an array of promises themselves; those would execute immediately)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sequentialize</span>(<span class=\"params\">promiseFactories</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> chain = <span class=\"built_in\">Promise</span>.resolve();</div><div class=\"line\">  promiseFactories.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promiseFactory</span>) </span>&#123;</div><div class=\"line\">    chain = chain.then(promiseFactory);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> chain;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise.race is good for setting a timeout:</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    setTimeout(reject, <span class=\"number\">10000</span>); <span class=\"comment\">// timeout after 10 secs</span></div><div class=\"line\">  &#125;),</div><div class=\"line\">  doSomethingThatMayTakeAwhile()</div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promise finally util similar to Q.finally</span></div><div class=\"line\"><span class=\"comment\">// e.g. promise.then(...).catch().then(...).finally(...)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">finally</span> (<span class=\"params\">promise, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise2 = cb();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise2.then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> promise2.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> res;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise2 = cb();</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> promise2.then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> promise2.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> reason;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">throw</span> reason;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Functional Program","subtitle":"Functional","date":"2017-03-09T07:03:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"// https://github.com/shfshanyue/fp-jargon-zh#arity\n\n# Arity\n\n函数参数的个数。来自于单词 unary, binary, ternary 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，一个带有两个参数的函数被称为二元函数或者它的 arity 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 dyadic。同样地，带有可变数量参数的函数被称为 variadic，而二元函数只能带两个参数。\n\n```javascript\n    const sum = (a, b) => a + b\n    const arity = sum.length\n\n    console.log('arity: ', arity)\n```\n\n# 高阶函数 (Higher-Order Function/HOF)\n\n以函数为参数或/和返回值\n\n```javascript\n\n    const filter = (predicate, xs) => xs.filter(predicte)\n    const is = (type) => (x) => Object(x) instanceof type\n    filter(is(Number), [0, '1', 2, null])\n\n```\n\n# 偏函数 (Partial Function)\n\n对原始函数预设参数作为一个新的函数\n\n```javascript\n\n    const partical = (f, ...args) => (...moreArgs) => f(...args, ...moreArgs)\n\n    const add3 = (a, b, c) => a + b + c\n\n    const fivePlus = partical(add3, 2, 3)\n\n    fivePlus(4)\n\n    // 也可以使用Function.prototype.bind实现偏函数\n    const add1More = add3.bind(null, 2, 3)\n\n```\n\n# 柯里化 (Currying)\n\n讲一个多元函数转变为一元函数的过程。每当函数被调用时，它仅仅接收一个 参数并且返回带有一个参数的函数，直接传递完所有的参数。\n\n```javascript\n\n    const sum = (a, b) => a + b\n    const curriedSum = (a) => (b) => a + b\n\n    curriedSum(3)(4)\n\n    const add2 = curriedSum(2)\n    add2(10)\n\n```\n\n# 自动柯里化 (Auto Currying)\n\n`lodash`, `understore`和`ramda`有`curry`函数可以自动完成柯里化\n\n```javascript\n\n    const add = (x, y) => x + y\n    const curriedAdd = _.curry(add)\n\n    curriedAdd(1, 2)\n    curriedAdd(1)(2)\n    curriedAdd(1)\n\n```\n\n### 进一步阅读\n\n- [Favoring Curry](http://fr.umio.us/favoring-curry/)\n- [Hey Underscore, You're Doing It Wrong!](https://www.youtube.com/watch?v=m3svKOdZijA)\n\n# 函数组合 (Function Composing)\n\n接收多个函数作为参数，从右到左，一个函数的输入为另一个函数的输出\n\n```javascript\n\n    const compose = (f, g) => (a) => f(g(a))\n    const floorAndToString = compose((val) => val.toString(), Math.floor)\n    floorAndToString(12.12)\n\n```\n\nContinuation\n\n在一个程序执行的任意时刻, 尚未执行的代码成为Continuation.\n\n```javascript\n\n    const printAsString = (num) => console.log(`Given ${num}`)\n\n    const addOneAndContinue = (num, cc) => {\n        const result = num + 1\n        cc(result)\n    }\n\n    andOneAndContinue(2, printAsString)\n\n```\n\nContinuation 在异步编程中很常见, 比如当程序需要接收到数据才能继续执行。请求的相应同城作为代码的剩余执行部分，一旦接收到数据，对数据的处理被作为Continuation.\n\n```javascript\n\n    const continueProgramWith = (data) => {}\n    readFileAsync('path/to/file', (response, error) => {\n        if (error) {\n            return\n        }\n\n        continueProgramWith(response)\n    })\n\n```\n\n# 纯函数 (Purity)\n输出仅由输入决定，且不产生副作用。\n\n```javascript\n\n    const greet = (name) => `hello, ${name}`\n    greet('world')\n\n```\n\n以一下代码不是纯函数：\n\n```javascript\n\n    window.name = 'Brianne'\n    const greet = () => `Hi, ${window.name}` //函数依赖外部状态。\n\n```\n\n```javascript\n\n    let greeting\n\n    const greet = (name) => {\n        greeting = `Hi, ${name}`\n    }\n\n    greet('Brianne')\n    greeting\n\n```\n\n# 副作用(Side effects)\n如果函数与外部可变状态进行交互，则它是有副作用的。\n\n```javascript\n\n    const differentEveryTime = new Date()\n    console.log('IO is a side effect!')\n\n```\n\n# 幂等行(Idempotent)\n如果一个函数执行多次皆返回相同的结果，则它是幂等性的。\n\n```javascript\n\n    f(f(x)) = f(x)\n    Math.abs(Math.abs(10))\n    sort(sort(sort([2, 1])))\n\n```\n\n# Point-Free 风格(Point-Free Style)\n定义函数时，不显式的支出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫Tacit programming。\n\n```javascript\n\n    const map = (fn) => (list) => list.map(fn)\n    const add = (a) => (b) => a + b\n\n    const incrementAll = (numbers) => map(add(1))(numbers)\n    const incrementAll2 = map(add(1))\n\n```\n\n# 谓词 (Predicate)\n\n根据输入返回true或false. 通常用在Array.prototype.filter的回调函数中。\n\n```javascript\n\n    const predicate = (a) => a > 2\n    [1, 2, 3, 4].filter(predicate)\n\n```\n\n# 契约 (Contracts)\n\n契约保证了函数或者表达式在运行时的行为。当违反了契约时，将跑出一个错误。\n\n```javascript\n\n    const contract  = (input) => {\n        if (typeof input === 'number') return true\n\n        throw new Error('Contract Violated: expected int -> int')\n    }\n\n    const addOne = (num) => contract(num) && num + 1\n\n    addOne(2)\n    addOne('hello')\n\n```\n\n# 范畴 (Category)\n\n在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。\n\n一个有效的范畴遵从以下三个原则：\n\n- 必有一个 identity 态射，使得 map 一个对象是它自身。a 是范畴里的一个对象时，必有一个函数使 a -> a。\n- 态射必是可组合的。a，b，c 是范畴里的对象，f 是态射 a -> b，g 是 b -> c 态射。g(f(x)) 一定与 (g ● f)(x)\n- 组合满足结合律。f ● (g ● h) 与 (f ● g) ● h 是等价的。\n\n这些准则是非常抽象的，范畴论对与发现组合的新方法是伟大的。\n\n进一步阅读\n\n[Category Theory for Programmers](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/)\n\n# 值 (Value)\n\n赋值给变量的值称作Value\n\n```javascript\n\n    5\n    Object.freeze({name: 'John', age: 30})\n    ;(a) => a\n    ;[1]\n    undefined\n\n```\n\n# 常量 (Constant)\n\n一旦定义不可重新赋值。\n\n```javascript\n\n    const five = 5\n    const john = Object.freeze({name: 'John', age: 30})\n\n```\n\n常量是[引用透明](https://github.com/shfshanyue/fp-jargon-zh#referential-transparency)的，因此它们可以被它们所代表的值替代而不影响结果。\n\n对于以上两个常量，以下语句总会返回 true。\n\n```javascript\n\n    john.age + five === ({name: 'John', age: 30}).age + (5)\n\n```\n\n# 函子 (Functor)\n\n一个实现了map 函数的对象，map 会遍历对象中的每个值并生成一个新的对象。遵守两个准则\n\n### 一致性 (Preserves identity)\n\nobject.map(x => x) ≍ object\n### 组合性 (Composable)\n\nobject.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数\n在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。\n\n```javascript\n\n    const f = x => x + 1\n    const g = x => x * 2\n\n    ;[1, 2, 3].map(x => f(g(x)))\n    ;[1, 2, 3].map(g).map(f)\n\n```\n\n# Pointed Functor\n\n一个实现了 of 函数的对象。\n\nES2015 添加了 Array.of，使 Array 成为了 Pointed Functor。\n\n```javascript\n\n    Array.of(1)\n\n```\n\n# Lift\n\n\n# 引用透明性 (Referential Transparency)\n\n一个表达式能够被它的值替代而不改变程序的行为成为引用透明。\n\n```javascript\n\n    const greet = () => 'hello, world.'\n\n```\n\n# 匿名函数 (Lambda)\n\n匿名函数被视作一个值\n\n```javascript\n\n    ;(function (a) {\n        return a + 1\n    })\n\n    ;(a) => a + 1\n\n```\n\n匿名函数通常作为高阶函数的参数\n\n```javascript\n\n    [1, 2].map((a) => a + 1)\n\n```\n\n可以把 Lambda 赋值给一个变量\n\n```javascript\n\n    const add1 = (a) => a + 1\n\n```\n\n# Lambda Caculus\n\n数学的一个分支，使用函数创造 [通过计算模型](https://en.wikipedia.org/wiki/Lambda_calculus)\n\n\n# 惰性求值 (Lazy evaluation)\n\n按需求值机制，只有当需要计算所得值时才会计算\n\n```javascript\n    const rand = function* () {\n        while (true) {\n            yield Math.random()\n        }\n    }\n\n    const randIter = rand()\n    randIter.next()\n```\n\n# Monoid\n\n一个对象拥有一个函数用来连接相同类型的对象。\n\n数值加法是一个简单的 Monoid\n```javascript\n1 + 1   // 2\n```\n以上示例中，数值是对象而 + 是函数。\n\n与另一个值结合而不会改变它的值必须存在，称为 identity。\n\n加法的 identity 值为 0:\n```javascript\n1 + 0   // 1\n```\n需要满足结合律\n```javascript\n1 + (2 + 3) === (1 + 2) + 3 // true\n```\n数组的结合也是 Monoid\n```javascript\n;[1, 2].concat([3, 4])\n```\nidentity 值为空数组\n\n;[1, 2].concat([])\nidentity 与 compose 函数能够组成 monoid\n```javascript\nconst identity = (a) => a\nconst compose = (f, g) => (x) => f(g(x))\n```\n\nfoo 是只带一个参数的任意函数\n```javascript\ncompose(foo, identity) ≍ compose(identity, foo) ≍ foo\n```\n\n# Monad\n\n拥有 of 和 chain 函数的对象。chain 很像 map， 除了用来铺平嵌套数据。\n\n```javascript\n\n    Array.prototype.chain = function (f) {\n        return this.reduce((acc, it) => acc.concat(f(it)), [])\n    }\n\n    // ['cat', 'dog', 'fish', 'bird']\n    ;Array.of('cat,dog', 'fish,bird').chain(s => s.split(','))\n\n    // [['cat', 'dog'], ['fish', 'bird']]\n    ;Array.of('cat,dog', 'fish,bird').map(s => s.split(','))\n\n```\n\n在有些语言中，of 也称为 return，chain 也称为 flatmap 与 bind。\n\n# Comonad\n\n拥有 extract 与 extend 函数的对象。\n\n```javascript\n\n    const CoIdentity = (v) => ({\n        val: v,\n        extract () {\n            return this.val\n        },\n        extend (f) {\n            return CoIdentity(f(this))\n        }\n    })\n\n    CoIdentity(1).extract()\n    CoIdentity(1).extend(x => x.extract() + 1)   # CoIdentity(2)\n\n```\n\n# Applicative Functor\n\n一个拥有 ap 函数的对象。\n\n```javascript\n\n    // 实现\n    Array.prototype.ap = function (xs) {\n        return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n    }\n\n    // 示例\n    ;[(a) => a + 1].ap([1]) // [2]\n\n```\n\n如果你有两个对象，并需要对他们的元素执行一个二元函数\n\n```javascript\n\n    // Arrays that you want to combine\n    const arg1 = [1, 3]\n    const arg2 = [4, 5]\n\n    // combining function - must be curried for this to work\n    const add = (x) => (y) => x + y\n\n    const partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n\n```\n\n由此得到了一个函数数组，并且可以调用 ap 函数得到结果\n\n```javascript\n\n    partiallyAppliedAdds.ap(arg2) // [5, 6, 7, 8]\n\n```\n\n# Applicative Functor\n\n一个拥有 ap 函数的对象。\n\n```javascript\n\n    // 实现\n    Array.prototype.ap = function (xs) {\n        return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n    }\n\n    // 示例\n    ;[(a) => a + 1].ap([1]) // [2]\n\n```\n\n如果你有两个对象，并需要对他们的元素执行一个二元函数\n\n```javascript\n\n    // Arrays that you want to combine\n    const arg1 = [1, 3]\n    const arg2 = [4, 5]\n\n    // combining function - must be curried for this to work\n    const add = (x) => (y) => x + y\n\n    const partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n\n```\n\n# 态射 (Morphism)\n\n一个变形的函数。\n\n# 自同态 (Endomorphism)\n\n输入输出是相同类型的函数。\n\n```javascript\n\n    // uppercase :: String -> String\n    const uppercase = (str) => str.toUpperCase()\n\n    // decrement :: Number -> Number\n    const decrement = (x) => x - 1\n\n```\n\n# 同构 (Isomorphism)\n\n不用类型对象的变形，保持结构并且不丢失数据。\n\n例如，一个二维坐标既可以表示为数组 [2, 3]，也可以表示为对象 {x: 2, y: 3}。\n\n```javascript\n    // 提供函数在两种类型间互相转换\n    const pairToCoords = (pair) => ({x: pair[0], y: pair[1]})\n\n    const coordsToPair = (coords) => [coords.x, coords.y]\n\n    coordsToPair(pairToCoords([1, 2])) // [1, 2]\n\n    pairToCoords(coordsToPair({x: 1, y: 2})) // {x: 1, y: 2}\n```\n\n# Setoid\n\n拥有 equals 函数的对象。equals 可以用来和其它对象比较。\n\n```javascript\n\n    Array.prototype.equals = function (arr) {\n    const len = this.length\n    if (len !== arr.length) {\n    return false\n    }\n    for (let i = 0; i < len; i++) {\n    if (this[i] !== arr[i]) {\n      return false\n    }\n    }\n    return true\n    }\n\n    ;[1, 2].equals([1, 2])   // true\n    ;[1, 2].equals([3, 4])   // false\n\n```\n\n# 半群 (Semigroup)\n\nAn object that has a concat function that combines it with another object of the same type.\n\n```javascript\n\n    ;[1].concat([2]) // [1, 2]\n\n```\n\n# Foldable\n\nAn object that has a reduce function that can transform that object into some other type.\n\n```javascript\n\n    const sum = list => list.reduce((account, value) => account + value, 0)\n    sum([1, 2, 3])\n\n```\n\n# Traversbale\nTODO\n\n# Type Signatures\n\nOften functions in JavaScript will include comments that indicate the types of their arguments and return values.\n\nThere's quite a bit of variance across the community but they often follow the following patterns:\n\n```javascript\n\n    // functionName :: firstArgType -> secondArgType -> returnType\n\n    // add :: Number -> Number -> Number\n    const add = (x) => (y) => x + y\n\n    // increment :: Number -> Number\n    const increment = (x) => x + 1\n\n```\n\nIf a function accepts another function as an argument it is wrapped in parentheses.\n\n```javascript\n\n    // call :: (a -> b) -> a -> b\n    const call = (f) => (x) => f(x)\n\n```\n\nThe letters a, b, c, d are used to signify that the argument can be of any type. The following version of map takes a function that transforms a value of some type a into another type b, an array of values of type a, and returns an array of values of type b.\n\n```javascript\n\n    // map :: (a -> b) -> [a] -> [b]\n    const map = (f) => (list) => list.map(f)\n\n```\n\nFurther reading\n\n- [Ramda's type signatures](https://github.com/ramda/ramda/wiki/Type-Signatures)\n- [Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#whats-your-type)\n- [What is Hindley-Milner?](http://stackoverflow.com/questions/399312/what-is-hindley-milner/399392#399392) on Stack Overflow\n\n# Union type\n\nA union type is the combination of two types together into another one.\n\nJS doesn't have static types but let's say we invent a type NumOrString which is a sum of String and Number.\n\nThe + operator in JS works on strings and numbers so we can use this new type to describe its inputs and outputs:\n\n```javascript\n\n    // add :: (NumOrString, NumOrString) -> NumOrString\n    const add = (a, b) => a + b\n\n    add(1, 2) // Returns number 3\n    add('Foo', 2) // Returns string \"Foo2\"\n    add('Foo', 'Bar') // Returns string \"FooBar\"\n\n```\n\nUnion types are also known as algebraic types, tagged unions, or sum types.\n\nThere's a couple libraries in JS which help with defining and using union types.\n- [union-type](https://github.com/paldepind/union-type)\n- [daggy](https://github.com/fantasyland/daggy)\n\n# Product type\n\nA product type combines types together in a way you're probably more familiar with:\n\n```javascript\n\n    // point :: (Number, Number) -> {x: Number, y: Number}\n    const point = (x, y) => ({x: x, y: y})\n\n```\n\nIt's called a product because the total possible values of the data structure is the product of the different values.\n\nSee also [Set theory](https://en.wikipedia.org/wiki/Set_theory).\n\n# Option\n\nOption is a union type with two cases often called Some and None.\n\nOption is useful for composing functions that might not return a value.\n\n```javascript\n\n// Naive definition\n\n    const Some = (v) => ({\n        val: v,\n        map (f) {\n            return Some(f(this.val))\n        },\n        chain (f) {\n            return f(this.val)\n        }\n    })\n\n    const None = () => ({\n        map (f) {\n            return this\n        },\n        chain (f) {\n            return this\n        }\n    })\n\n    // maybeProp :: (String, {a}) -> Option a\n    const maybeProp = (key, obj) => typeof obj[key] === 'undefined' ? None() : Some(obj[key])\n\n```\n\nUse `chain` to sequence functions that return `Options`\n\n```javascript\n\n    // getItem :: Cart -> Option CartItem\n    const getItem = (cart) => maybeProp('item', cart)\n\n    // getPrice :: Item -> Option Number\n    const getPrice = (item) => maybeProp('price', item)\n\n    // getNestedPrice :: cart -> Option a\n    const getNestedPrice = (cart) => getItem(obj).chain(getPrice)\n\n    getNestedPrice({}) // None()\n    getNestedPrice({item: {foo: 1}}) // None()\n    getNestedPrice({item: {price: 9.99}}) // Some(9.99)\n\n```\n\n`Option` is also known as `Maybe`. `Some` is sometimes called `Just`. `None` is sometimes called `Nothing`.\n\n# Functional Programming Libraries in JavaScript\n\n- [mori](https://github.com/swannodette/mori)\n- [Immutable](https://github.com/facebook/immutable-js/)\n- [Ramda](https://github.com/ramda/ramda)\n- [Folktale](http://folktalejs.org/)\n- [monet.js](https://cwmyers.github.io/monet.js/)\n- [lodash](https://github.com/lodash/lodash)\n- [Underscore.js](https://github.com/jashkenas/underscore)\n- [Lazy.js](https://github.com/dtao/lazy.js)\n- [maryamyriameliamurphies.js](https://github.com/sjsyrek/maryamyriameliamurphies.js)\n- [Haskell in ES6](https://github.com/casualjavascript/haskell-in-es6)\n","source":"_posts/2017-03-09-functional-program.markdown","raw":"---\nlayout:     post\ntitle:      \"Functional Program\"\nsubtitle:   \"Functional\"\ndate:       2017-03-09 15:03\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Functional\n---\n// https://github.com/shfshanyue/fp-jargon-zh#arity\n\n# Arity\n\n函数参数的个数。来自于单词 unary, binary, ternary 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，一个带有两个参数的函数被称为二元函数或者它的 arity 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 dyadic。同样地，带有可变数量参数的函数被称为 variadic，而二元函数只能带两个参数。\n\n```javascript\n    const sum = (a, b) => a + b\n    const arity = sum.length\n\n    console.log('arity: ', arity)\n```\n\n# 高阶函数 (Higher-Order Function/HOF)\n\n以函数为参数或/和返回值\n\n```javascript\n\n    const filter = (predicate, xs) => xs.filter(predicte)\n    const is = (type) => (x) => Object(x) instanceof type\n    filter(is(Number), [0, '1', 2, null])\n\n```\n\n# 偏函数 (Partial Function)\n\n对原始函数预设参数作为一个新的函数\n\n```javascript\n\n    const partical = (f, ...args) => (...moreArgs) => f(...args, ...moreArgs)\n\n    const add3 = (a, b, c) => a + b + c\n\n    const fivePlus = partical(add3, 2, 3)\n\n    fivePlus(4)\n\n    // 也可以使用Function.prototype.bind实现偏函数\n    const add1More = add3.bind(null, 2, 3)\n\n```\n\n# 柯里化 (Currying)\n\n讲一个多元函数转变为一元函数的过程。每当函数被调用时，它仅仅接收一个 参数并且返回带有一个参数的函数，直接传递完所有的参数。\n\n```javascript\n\n    const sum = (a, b) => a + b\n    const curriedSum = (a) => (b) => a + b\n\n    curriedSum(3)(4)\n\n    const add2 = curriedSum(2)\n    add2(10)\n\n```\n\n# 自动柯里化 (Auto Currying)\n\n`lodash`, `understore`和`ramda`有`curry`函数可以自动完成柯里化\n\n```javascript\n\n    const add = (x, y) => x + y\n    const curriedAdd = _.curry(add)\n\n    curriedAdd(1, 2)\n    curriedAdd(1)(2)\n    curriedAdd(1)\n\n```\n\n### 进一步阅读\n\n- [Favoring Curry](http://fr.umio.us/favoring-curry/)\n- [Hey Underscore, You're Doing It Wrong!](https://www.youtube.com/watch?v=m3svKOdZijA)\n\n# 函数组合 (Function Composing)\n\n接收多个函数作为参数，从右到左，一个函数的输入为另一个函数的输出\n\n```javascript\n\n    const compose = (f, g) => (a) => f(g(a))\n    const floorAndToString = compose((val) => val.toString(), Math.floor)\n    floorAndToString(12.12)\n\n```\n\nContinuation\n\n在一个程序执行的任意时刻, 尚未执行的代码成为Continuation.\n\n```javascript\n\n    const printAsString = (num) => console.log(`Given ${num}`)\n\n    const addOneAndContinue = (num, cc) => {\n        const result = num + 1\n        cc(result)\n    }\n\n    andOneAndContinue(2, printAsString)\n\n```\n\nContinuation 在异步编程中很常见, 比如当程序需要接收到数据才能继续执行。请求的相应同城作为代码的剩余执行部分，一旦接收到数据，对数据的处理被作为Continuation.\n\n```javascript\n\n    const continueProgramWith = (data) => {}\n    readFileAsync('path/to/file', (response, error) => {\n        if (error) {\n            return\n        }\n\n        continueProgramWith(response)\n    })\n\n```\n\n# 纯函数 (Purity)\n输出仅由输入决定，且不产生副作用。\n\n```javascript\n\n    const greet = (name) => `hello, ${name}`\n    greet('world')\n\n```\n\n以一下代码不是纯函数：\n\n```javascript\n\n    window.name = 'Brianne'\n    const greet = () => `Hi, ${window.name}` //函数依赖外部状态。\n\n```\n\n```javascript\n\n    let greeting\n\n    const greet = (name) => {\n        greeting = `Hi, ${name}`\n    }\n\n    greet('Brianne')\n    greeting\n\n```\n\n# 副作用(Side effects)\n如果函数与外部可变状态进行交互，则它是有副作用的。\n\n```javascript\n\n    const differentEveryTime = new Date()\n    console.log('IO is a side effect!')\n\n```\n\n# 幂等行(Idempotent)\n如果一个函数执行多次皆返回相同的结果，则它是幂等性的。\n\n```javascript\n\n    f(f(x)) = f(x)\n    Math.abs(Math.abs(10))\n    sort(sort(sort([2, 1])))\n\n```\n\n# Point-Free 风格(Point-Free Style)\n定义函数时，不显式的支出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫Tacit programming。\n\n```javascript\n\n    const map = (fn) => (list) => list.map(fn)\n    const add = (a) => (b) => a + b\n\n    const incrementAll = (numbers) => map(add(1))(numbers)\n    const incrementAll2 = map(add(1))\n\n```\n\n# 谓词 (Predicate)\n\n根据输入返回true或false. 通常用在Array.prototype.filter的回调函数中。\n\n```javascript\n\n    const predicate = (a) => a > 2\n    [1, 2, 3, 4].filter(predicate)\n\n```\n\n# 契约 (Contracts)\n\n契约保证了函数或者表达式在运行时的行为。当违反了契约时，将跑出一个错误。\n\n```javascript\n\n    const contract  = (input) => {\n        if (typeof input === 'number') return true\n\n        throw new Error('Contract Violated: expected int -> int')\n    }\n\n    const addOne = (num) => contract(num) && num + 1\n\n    addOne(2)\n    addOne('hello')\n\n```\n\n# 范畴 (Category)\n\n在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。\n\n一个有效的范畴遵从以下三个原则：\n\n- 必有一个 identity 态射，使得 map 一个对象是它自身。a 是范畴里的一个对象时，必有一个函数使 a -> a。\n- 态射必是可组合的。a，b，c 是范畴里的对象，f 是态射 a -> b，g 是 b -> c 态射。g(f(x)) 一定与 (g ● f)(x)\n- 组合满足结合律。f ● (g ● h) 与 (f ● g) ● h 是等价的。\n\n这些准则是非常抽象的，范畴论对与发现组合的新方法是伟大的。\n\n进一步阅读\n\n[Category Theory for Programmers](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/)\n\n# 值 (Value)\n\n赋值给变量的值称作Value\n\n```javascript\n\n    5\n    Object.freeze({name: 'John', age: 30})\n    ;(a) => a\n    ;[1]\n    undefined\n\n```\n\n# 常量 (Constant)\n\n一旦定义不可重新赋值。\n\n```javascript\n\n    const five = 5\n    const john = Object.freeze({name: 'John', age: 30})\n\n```\n\n常量是[引用透明](https://github.com/shfshanyue/fp-jargon-zh#referential-transparency)的，因此它们可以被它们所代表的值替代而不影响结果。\n\n对于以上两个常量，以下语句总会返回 true。\n\n```javascript\n\n    john.age + five === ({name: 'John', age: 30}).age + (5)\n\n```\n\n# 函子 (Functor)\n\n一个实现了map 函数的对象，map 会遍历对象中的每个值并生成一个新的对象。遵守两个准则\n\n### 一致性 (Preserves identity)\n\nobject.map(x => x) ≍ object\n### 组合性 (Composable)\n\nobject.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数\n在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。\n\n```javascript\n\n    const f = x => x + 1\n    const g = x => x * 2\n\n    ;[1, 2, 3].map(x => f(g(x)))\n    ;[1, 2, 3].map(g).map(f)\n\n```\n\n# Pointed Functor\n\n一个实现了 of 函数的对象。\n\nES2015 添加了 Array.of，使 Array 成为了 Pointed Functor。\n\n```javascript\n\n    Array.of(1)\n\n```\n\n# Lift\n\n\n# 引用透明性 (Referential Transparency)\n\n一个表达式能够被它的值替代而不改变程序的行为成为引用透明。\n\n```javascript\n\n    const greet = () => 'hello, world.'\n\n```\n\n# 匿名函数 (Lambda)\n\n匿名函数被视作一个值\n\n```javascript\n\n    ;(function (a) {\n        return a + 1\n    })\n\n    ;(a) => a + 1\n\n```\n\n匿名函数通常作为高阶函数的参数\n\n```javascript\n\n    [1, 2].map((a) => a + 1)\n\n```\n\n可以把 Lambda 赋值给一个变量\n\n```javascript\n\n    const add1 = (a) => a + 1\n\n```\n\n# Lambda Caculus\n\n数学的一个分支，使用函数创造 [通过计算模型](https://en.wikipedia.org/wiki/Lambda_calculus)\n\n\n# 惰性求值 (Lazy evaluation)\n\n按需求值机制，只有当需要计算所得值时才会计算\n\n```javascript\n    const rand = function* () {\n        while (true) {\n            yield Math.random()\n        }\n    }\n\n    const randIter = rand()\n    randIter.next()\n```\n\n# Monoid\n\n一个对象拥有一个函数用来连接相同类型的对象。\n\n数值加法是一个简单的 Monoid\n```javascript\n1 + 1   // 2\n```\n以上示例中，数值是对象而 + 是函数。\n\n与另一个值结合而不会改变它的值必须存在，称为 identity。\n\n加法的 identity 值为 0:\n```javascript\n1 + 0   // 1\n```\n需要满足结合律\n```javascript\n1 + (2 + 3) === (1 + 2) + 3 // true\n```\n数组的结合也是 Monoid\n```javascript\n;[1, 2].concat([3, 4])\n```\nidentity 值为空数组\n\n;[1, 2].concat([])\nidentity 与 compose 函数能够组成 monoid\n```javascript\nconst identity = (a) => a\nconst compose = (f, g) => (x) => f(g(x))\n```\n\nfoo 是只带一个参数的任意函数\n```javascript\ncompose(foo, identity) ≍ compose(identity, foo) ≍ foo\n```\n\n# Monad\n\n拥有 of 和 chain 函数的对象。chain 很像 map， 除了用来铺平嵌套数据。\n\n```javascript\n\n    Array.prototype.chain = function (f) {\n        return this.reduce((acc, it) => acc.concat(f(it)), [])\n    }\n\n    // ['cat', 'dog', 'fish', 'bird']\n    ;Array.of('cat,dog', 'fish,bird').chain(s => s.split(','))\n\n    // [['cat', 'dog'], ['fish', 'bird']]\n    ;Array.of('cat,dog', 'fish,bird').map(s => s.split(','))\n\n```\n\n在有些语言中，of 也称为 return，chain 也称为 flatmap 与 bind。\n\n# Comonad\n\n拥有 extract 与 extend 函数的对象。\n\n```javascript\n\n    const CoIdentity = (v) => ({\n        val: v,\n        extract () {\n            return this.val\n        },\n        extend (f) {\n            return CoIdentity(f(this))\n        }\n    })\n\n    CoIdentity(1).extract()\n    CoIdentity(1).extend(x => x.extract() + 1)   # CoIdentity(2)\n\n```\n\n# Applicative Functor\n\n一个拥有 ap 函数的对象。\n\n```javascript\n\n    // 实现\n    Array.prototype.ap = function (xs) {\n        return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n    }\n\n    // 示例\n    ;[(a) => a + 1].ap([1]) // [2]\n\n```\n\n如果你有两个对象，并需要对他们的元素执行一个二元函数\n\n```javascript\n\n    // Arrays that you want to combine\n    const arg1 = [1, 3]\n    const arg2 = [4, 5]\n\n    // combining function - must be curried for this to work\n    const add = (x) => (y) => x + y\n\n    const partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n\n```\n\n由此得到了一个函数数组，并且可以调用 ap 函数得到结果\n\n```javascript\n\n    partiallyAppliedAdds.ap(arg2) // [5, 6, 7, 8]\n\n```\n\n# Applicative Functor\n\n一个拥有 ap 函数的对象。\n\n```javascript\n\n    // 实现\n    Array.prototype.ap = function (xs) {\n        return this.reduce((acc, f) => acc.concat(xs.map(f)), [])\n    }\n\n    // 示例\n    ;[(a) => a + 1].ap([1]) // [2]\n\n```\n\n如果你有两个对象，并需要对他们的元素执行一个二元函数\n\n```javascript\n\n    // Arrays that you want to combine\n    const arg1 = [1, 3]\n    const arg2 = [4, 5]\n\n    // combining function - must be curried for this to work\n    const add = (x) => (y) => x + y\n\n    const partiallyAppliedAdds = [add].ap(arg1) // [(y) => 1 + y, (y) => 3 + y]\n\n```\n\n# 态射 (Morphism)\n\n一个变形的函数。\n\n# 自同态 (Endomorphism)\n\n输入输出是相同类型的函数。\n\n```javascript\n\n    // uppercase :: String -> String\n    const uppercase = (str) => str.toUpperCase()\n\n    // decrement :: Number -> Number\n    const decrement = (x) => x - 1\n\n```\n\n# 同构 (Isomorphism)\n\n不用类型对象的变形，保持结构并且不丢失数据。\n\n例如，一个二维坐标既可以表示为数组 [2, 3]，也可以表示为对象 {x: 2, y: 3}。\n\n```javascript\n    // 提供函数在两种类型间互相转换\n    const pairToCoords = (pair) => ({x: pair[0], y: pair[1]})\n\n    const coordsToPair = (coords) => [coords.x, coords.y]\n\n    coordsToPair(pairToCoords([1, 2])) // [1, 2]\n\n    pairToCoords(coordsToPair({x: 1, y: 2})) // {x: 1, y: 2}\n```\n\n# Setoid\n\n拥有 equals 函数的对象。equals 可以用来和其它对象比较。\n\n```javascript\n\n    Array.prototype.equals = function (arr) {\n    const len = this.length\n    if (len !== arr.length) {\n    return false\n    }\n    for (let i = 0; i < len; i++) {\n    if (this[i] !== arr[i]) {\n      return false\n    }\n    }\n    return true\n    }\n\n    ;[1, 2].equals([1, 2])   // true\n    ;[1, 2].equals([3, 4])   // false\n\n```\n\n# 半群 (Semigroup)\n\nAn object that has a concat function that combines it with another object of the same type.\n\n```javascript\n\n    ;[1].concat([2]) // [1, 2]\n\n```\n\n# Foldable\n\nAn object that has a reduce function that can transform that object into some other type.\n\n```javascript\n\n    const sum = list => list.reduce((account, value) => account + value, 0)\n    sum([1, 2, 3])\n\n```\n\n# Traversbale\nTODO\n\n# Type Signatures\n\nOften functions in JavaScript will include comments that indicate the types of their arguments and return values.\n\nThere's quite a bit of variance across the community but they often follow the following patterns:\n\n```javascript\n\n    // functionName :: firstArgType -> secondArgType -> returnType\n\n    // add :: Number -> Number -> Number\n    const add = (x) => (y) => x + y\n\n    // increment :: Number -> Number\n    const increment = (x) => x + 1\n\n```\n\nIf a function accepts another function as an argument it is wrapped in parentheses.\n\n```javascript\n\n    // call :: (a -> b) -> a -> b\n    const call = (f) => (x) => f(x)\n\n```\n\nThe letters a, b, c, d are used to signify that the argument can be of any type. The following version of map takes a function that transforms a value of some type a into another type b, an array of values of type a, and returns an array of values of type b.\n\n```javascript\n\n    // map :: (a -> b) -> [a] -> [b]\n    const map = (f) => (list) => list.map(f)\n\n```\n\nFurther reading\n\n- [Ramda's type signatures](https://github.com/ramda/ramda/wiki/Type-Signatures)\n- [Mostly Adequate Guide](https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#whats-your-type)\n- [What is Hindley-Milner?](http://stackoverflow.com/questions/399312/what-is-hindley-milner/399392#399392) on Stack Overflow\n\n# Union type\n\nA union type is the combination of two types together into another one.\n\nJS doesn't have static types but let's say we invent a type NumOrString which is a sum of String and Number.\n\nThe + operator in JS works on strings and numbers so we can use this new type to describe its inputs and outputs:\n\n```javascript\n\n    // add :: (NumOrString, NumOrString) -> NumOrString\n    const add = (a, b) => a + b\n\n    add(1, 2) // Returns number 3\n    add('Foo', 2) // Returns string \"Foo2\"\n    add('Foo', 'Bar') // Returns string \"FooBar\"\n\n```\n\nUnion types are also known as algebraic types, tagged unions, or sum types.\n\nThere's a couple libraries in JS which help with defining and using union types.\n- [union-type](https://github.com/paldepind/union-type)\n- [daggy](https://github.com/fantasyland/daggy)\n\n# Product type\n\nA product type combines types together in a way you're probably more familiar with:\n\n```javascript\n\n    // point :: (Number, Number) -> {x: Number, y: Number}\n    const point = (x, y) => ({x: x, y: y})\n\n```\n\nIt's called a product because the total possible values of the data structure is the product of the different values.\n\nSee also [Set theory](https://en.wikipedia.org/wiki/Set_theory).\n\n# Option\n\nOption is a union type with two cases often called Some and None.\n\nOption is useful for composing functions that might not return a value.\n\n```javascript\n\n// Naive definition\n\n    const Some = (v) => ({\n        val: v,\n        map (f) {\n            return Some(f(this.val))\n        },\n        chain (f) {\n            return f(this.val)\n        }\n    })\n\n    const None = () => ({\n        map (f) {\n            return this\n        },\n        chain (f) {\n            return this\n        }\n    })\n\n    // maybeProp :: (String, {a}) -> Option a\n    const maybeProp = (key, obj) => typeof obj[key] === 'undefined' ? None() : Some(obj[key])\n\n```\n\nUse `chain` to sequence functions that return `Options`\n\n```javascript\n\n    // getItem :: Cart -> Option CartItem\n    const getItem = (cart) => maybeProp('item', cart)\n\n    // getPrice :: Item -> Option Number\n    const getPrice = (item) => maybeProp('price', item)\n\n    // getNestedPrice :: cart -> Option a\n    const getNestedPrice = (cart) => getItem(obj).chain(getPrice)\n\n    getNestedPrice({}) // None()\n    getNestedPrice({item: {foo: 1}}) // None()\n    getNestedPrice({item: {price: 9.99}}) // Some(9.99)\n\n```\n\n`Option` is also known as `Maybe`. `Some` is sometimes called `Just`. `None` is sometimes called `Nothing`.\n\n# Functional Programming Libraries in JavaScript\n\n- [mori](https://github.com/swannodette/mori)\n- [Immutable](https://github.com/facebook/immutable-js/)\n- [Ramda](https://github.com/ramda/ramda)\n- [Folktale](http://folktalejs.org/)\n- [monet.js](https://cwmyers.github.io/monet.js/)\n- [lodash](https://github.com/lodash/lodash)\n- [Underscore.js](https://github.com/jashkenas/underscore)\n- [Lazy.js](https://github.com/dtao/lazy.js)\n- [maryamyriameliamurphies.js](https://github.com/sjsyrek/maryamyriameliamurphies.js)\n- [Haskell in ES6](https://github.com/casualjavascript/haskell-in-es6)\n","slug":"2017-03-09-functional-program","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d762001as7t71ho26ynp","content":"<p>// <a href=\"https://github.com/shfshanyue/fp-jargon-zh#arity\" target=\"_blank\" rel=\"external\">https://github.com/shfshanyue/fp-jargon-zh#arity</a></p>\n<h1 id=\"Arity\"><a href=\"#Arity\" class=\"headerlink\" title=\"Arity\"></a>Arity</h1><p>函数参数的个数。来自于单词 unary, binary, ternary 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，一个带有两个参数的函数被称为二元函数或者它的 arity 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 dyadic。同样地，带有可变数量参数的函数被称为 variadic，而二元函数只能带两个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"><span class=\"keyword\">const</span> arity = sum.length</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'arity: '</span>, arity)</div></pre></td></tr></table></figure>\n<h1 id=\"高阶函数-Higher-Order-Function-HOF\"><a href=\"#高阶函数-Higher-Order-Function-HOF\" class=\"headerlink\" title=\"高阶函数 (Higher-Order Function/HOF)\"></a>高阶函数 (Higher-Order Function/HOF)</h1><p>以函数为参数或/和返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\">(<span class=\"params\">predicate, xs</span>) =&gt;</span> xs.filter(predicte)</div><div class=\"line\"><span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> (x) =&gt; <span class=\"built_in\">Object</span>(x) <span class=\"keyword\">instanceof</span> type</div><div class=\"line\">filter(is(<span class=\"built_in\">Number</span>), [<span class=\"number\">0</span>, <span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"literal\">null</span>])</div></pre></td></tr></table></figure>\n<h1 id=\"偏函数-Partial-Function\"><a href=\"#偏函数-Partial-Function\" class=\"headerlink\" title=\"偏函数 (Partial Function)\"></a>偏函数 (Partial Function)</h1><p>对原始函数预设参数作为一个新的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partical = <span class=\"function\">(<span class=\"params\">f, ...args</span>) =&gt;</span> (...moreArgs) =&gt; f(...args, ...moreArgs)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add3 = <span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> a + b + c</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fivePlus = partical(add3, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">fivePlus(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以使用Function.prototype.bind实现偏函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> add1More = add3.bind(<span class=\"literal\">null</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化 (Currying)\"></a>柯里化 (Currying)</h1><p>讲一个多元函数转变为一元函数的过程。每当函数被调用时，它仅仅接收一个 参数并且返回带有一个参数的函数，直接传递完所有的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"><span class=\"keyword\">const</span> curriedSum = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> (b) =&gt; a + b</div><div class=\"line\"></div><div class=\"line\">curriedSum(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add2 = curriedSum(<span class=\"number\">2</span>)</div><div class=\"line\">add2(<span class=\"number\">10</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"自动柯里化-Auto-Currying\"><a href=\"#自动柯里化-Auto-Currying\" class=\"headerlink\" title=\"自动柯里化 (Auto Currying)\"></a>自动柯里化 (Auto Currying)</h1><p><code>lodash</code>, <code>understore</code>和<code>ramda</code>有<code>curry</code>函数可以自动完成柯里化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y</div><div class=\"line\"><span class=\"keyword\">const</span> curriedAdd = _.curry(add)</div><div class=\"line\"></div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"进一步阅读\"><a href=\"#进一步阅读\" class=\"headerlink\" title=\"进一步阅读\"></a>进一步阅读</h3><ul>\n<li><a href=\"http://fr.umio.us/favoring-curry/\" target=\"_blank\" rel=\"external\">Favoring Curry</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=m3svKOdZijA\" target=\"_blank\" rel=\"external\">Hey Underscore, You’re Doing It Wrong!</a></li>\n</ul>\n<h1 id=\"函数组合-Function-Composing\"><a href=\"#函数组合-Function-Composing\" class=\"headerlink\" title=\"函数组合 (Function Composing)\"></a>函数组合 (Function Composing)</h1><p>接收多个函数作为参数，从右到左，一个函数的输入为另一个函数的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (a) =&gt; f(g(a))</div><div class=\"line\"><span class=\"keyword\">const</span> floorAndToString = compose(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val.toString(), <span class=\"built_in\">Math</span>.floor)</div><div class=\"line\">floorAndToString(<span class=\"number\">12.12</span>)</div></pre></td></tr></table></figure>\n<p>Continuation</p>\n<p>在一个程序执行的任意时刻, 尚未执行的代码成为Continuation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> printAsString = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Given <span class=\"subst\">$&#123;num&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addOneAndContinue = <span class=\"function\">(<span class=\"params\">num, cc</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = num + <span class=\"number\">1</span></div><div class=\"line\">    cc(result)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">andOneAndContinue(<span class=\"number\">2</span>, printAsString)</div></pre></td></tr></table></figure>\n<p>Continuation 在异步编程中很常见, 比如当程序需要接收到数据才能继续执行。请求的相应同城作为代码的剩余执行部分，一旦接收到数据，对数据的处理被作为Continuation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> continueProgramWith = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;&#125;</div><div class=\"line\">readFileAsync(<span class=\"string\">'path/to/file'</span>, (response, error) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    continueProgramWith(response)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"纯函数-Purity\"><a href=\"#纯函数-Purity\" class=\"headerlink\" title=\"纯函数 (Purity)\"></a>纯函数 (Purity)</h1><p>输出仅由输入决定，且不产生副作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`hello, <span class=\"subst\">$&#123;name&#125;</span>`</span></div><div class=\"line\">greet(<span class=\"string\">'world'</span>)</div></pre></td></tr></table></figure>\n<p>以一下代码不是纯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'Brianne'</span></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`Hi, <span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.name&#125;</span>`</span> <span class=\"comment\">//函数依赖外部状态。</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> greeting</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</div><div class=\"line\">    greeting = <span class=\"string\">`Hi, <span class=\"subst\">$&#123;name&#125;</span>`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">greet(<span class=\"string\">'Brianne'</span>)</div><div class=\"line\">greeting</div></pre></td></tr></table></figure>\n<h1 id=\"副作用-Side-effects\"><a href=\"#副作用-Side-effects\" class=\"headerlink\" title=\"副作用(Side effects)\"></a>副作用(Side effects)</h1><p>如果函数与外部可变状态进行交互，则它是有副作用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> differentEveryTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'IO is a side effect!'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"幂等行-Idempotent\"><a href=\"#幂等行-Idempotent\" class=\"headerlink\" title=\"幂等行(Idempotent)\"></a>幂等行(Idempotent)</h1><p>如果一个函数执行多次皆返回相同的结果，则它是幂等性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">f(f(x)) = f(x)</div><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"built_in\">Math</span>.abs(<span class=\"number\">10</span>))</div><div class=\"line\">sort(sort(sort([<span class=\"number\">2</span>, <span class=\"number\">1</span>])))</div></pre></td></tr></table></figure>\n<h1 id=\"Point-Free-风格-Point-Free-Style\"><a href=\"#Point-Free-风格-Point-Free-Style\" class=\"headerlink\" title=\"Point-Free 风格(Point-Free Style)\"></a>Point-Free 风格(Point-Free Style)</h1><p>定义函数时，不显式的支出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫Tacit programming。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> (list) =&gt; list.map(fn)</div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> (b) =&gt; a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> incrementAll = <span class=\"function\">(<span class=\"params\">numbers</span>) =&gt;</span> map(add(<span class=\"number\">1</span>))(numbers)</div><div class=\"line\"><span class=\"keyword\">const</span> incrementAll2 = map(add(<span class=\"number\">1</span>))</div></pre></td></tr></table></figure>\n<h1 id=\"谓词-Predicate\"><a href=\"#谓词-Predicate\" class=\"headerlink\" title=\"谓词 (Predicate)\"></a>谓词 (Predicate)</h1><p>根据输入返回true或false. 通常用在Array.prototype.filter的回调函数中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> predicate = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a &gt; <span class=\"number\">2</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].filter(predicate)</div></pre></td></tr></table></figure>\n<h1 id=\"契约-Contracts\"><a href=\"#契约-Contracts\" class=\"headerlink\" title=\"契约 (Contracts)\"></a>契约 (Contracts)</h1><p>契约保证了函数或者表达式在运行时的行为。当违反了契约时，将跑出一个错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> contract  = <span class=\"function\">(<span class=\"params\">input</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> input === <span class=\"string\">'number'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Contract Violated: expected int -&gt; int'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> contract(num) &amp;&amp; num + <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">addOne(<span class=\"number\">2</span>)</div><div class=\"line\">addOne(<span class=\"string\">'hello'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"范畴-Category\"><a href=\"#范畴-Category\" class=\"headerlink\" title=\"范畴 (Category)\"></a>范畴 (Category)</h1><p>在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。</p>\n<p>一个有效的范畴遵从以下三个原则：</p>\n<ul>\n<li>必有一个 identity 态射，使得 map 一个对象是它自身。a 是范畴里的一个对象时，必有一个函数使 a -&gt; a。</li>\n<li>态射必是可组合的。a，b，c 是范畴里的对象，f 是态射 a -&gt; b，g 是 b -&gt; c 态射。g(f(x)) 一定与 (g ● f)(x)</li>\n<li>组合满足结合律。f ● (g ● h) 与 (f ● g) ● h 是等价的。</li>\n</ul>\n<p>这些准则是非常抽象的，范畴论对与发现组合的新方法是伟大的。</p>\n<p>进一步阅读</p>\n<p><a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\" target=\"_blank\" rel=\"external\">Category Theory for Programmers</a></p>\n<h1 id=\"值-Value\"><a href=\"#值-Value\" class=\"headerlink\" title=\"值 (Value)\"></a>值 (Value)</h1><p>赋值给变量的值称作Value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.freeze(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;)</div><div class=\"line\">;<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a</div><div class=\"line\">;[<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"literal\">undefined</span></div></pre></td></tr></table></figure>\n<h1 id=\"常量-Constant\"><a href=\"#常量-Constant\" class=\"headerlink\" title=\"常量 (Constant)\"></a>常量 (Constant)</h1><p>一旦定义不可重新赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> five = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">const</span> john = <span class=\"built_in\">Object</span>.freeze(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;)</div></pre></td></tr></table></figure>\n<p>常量是<a href=\"https://github.com/shfshanyue/fp-jargon-zh#referential-transparency\" target=\"_blank\" rel=\"external\">引用透明</a>的，因此它们可以被它们所代表的值替代而不影响结果。</p>\n<p>对于以上两个常量，以下语句总会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">john.age + five === (&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;).age + (<span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"函子-Functor\"><a href=\"#函子-Functor\" class=\"headerlink\" title=\"函子 (Functor)\"></a>函子 (Functor)</h1><p>一个实现了map 函数的对象，map 会遍历对象中的每个值并生成一个新的对象。遵守两个准则</p>\n<h3 id=\"一致性-Preserves-identity\"><a href=\"#一致性-Preserves-identity\" class=\"headerlink\" title=\"一致性 (Preserves identity)\"></a>一致性 (Preserves identity)</h3><p>object.map(x =&gt; x) ≍ object</p>\n<h3 id=\"组合性-Composable\"><a href=\"#组合性-Composable\" class=\"headerlink\" title=\"组合性 (Composable)\"></a>组合性 (Composable)</h3><p>object.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数<br>在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> g = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)))</div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(g).map(f)</div></pre></td></tr></table></figure>\n<h1 id=\"Pointed-Functor\"><a href=\"#Pointed-Functor\" class=\"headerlink\" title=\"Pointed Functor\"></a>Pointed Functor</h1><p>一个实现了 of 函数的对象。</p>\n<p>ES2015 添加了 Array.of，使 Array 成为了 Pointed Functor。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Lift\"><a href=\"#Lift\" class=\"headerlink\" title=\"Lift\"></a>Lift</h1><h1 id=\"引用透明性-Referential-Transparency\"><a href=\"#引用透明性-Referential-Transparency\" class=\"headerlink\" title=\"引用透明性 (Referential Transparency)\"></a>引用透明性 (Referential Transparency)</h1><p>一个表达式能够被它的值替代而不改变程序的行为成为引用透明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'hello, world.'</span></div></pre></td></tr></table></figure>\n<h1 id=\"匿名函数-Lambda\"><a href=\"#匿名函数-Lambda\" class=\"headerlink\" title=\"匿名函数 (Lambda)\"></a>匿名函数 (Lambda)</h1><p>匿名函数被视作一个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">;<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>匿名函数通常作为高阶函数的参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].map(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<p>可以把 Lambda 赋值给一个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h1 id=\"Lambda-Caculus\"><a href=\"#Lambda-Caculus\" class=\"headerlink\" title=\"Lambda Caculus\"></a>Lambda Caculus</h1><p>数学的一个分支，使用函数创造 <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\" target=\"_blank\" rel=\"external\">通过计算模型</a></p>\n<h1 id=\"惰性求值-Lazy-evaluation\"><a href=\"#惰性求值-Lazy-evaluation\" class=\"headerlink\" title=\"惰性求值 (Lazy evaluation)\"></a>惰性求值 (Lazy evaluation)</h1><p>按需求值机制，只有当需要计算所得值时才会计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> rand = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"built_in\">Math</span>.random()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> randIter = rand()</div><div class=\"line\">randIter.next()</div></pre></td></tr></table></figure>\n<h1 id=\"Monoid\"><a href=\"#Monoid\" class=\"headerlink\" title=\"Monoid\"></a>Monoid</h1><p>一个对象拥有一个函数用来连接相同类型的对象。</p>\n<p>数值加法是一个简单的 Monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">1</span>   <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>以上示例中，数值是对象而 + 是函数。</p>\n<p>与另一个值结合而不会改变它的值必须存在，称为 identity。</p>\n<p>加法的 identity 值为 0:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">0</span>   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>需要满足结合律<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">2</span> + <span class=\"number\">3</span>) === (<span class=\"number\">1</span> + <span class=\"number\">2</span>) + <span class=\"number\">3</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>数组的结合也是 Monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</div></pre></td></tr></table></figure></p>\n<p>identity 值为空数组</p>\n<p>;[1, 2].concat([])<br>identity 与 compose 函数能够组成 monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> identity = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a</div><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (x) =&gt; f(g(x))</div></pre></td></tr></table></figure></p>\n<p>foo 是只带一个参数的任意函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compose(foo, identity) ≍ compose(identity, foo) ≍ foo</div></pre></td></tr></table></figure></p>\n<h1 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h1><p>拥有 of 和 chain 函数的对象。chain 很像 map， 除了用来铺平嵌套数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.chain = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, it</span>) =&gt;</span> acc.concat(f(it)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ['cat', 'dog', 'fish', 'bird']</span></div><div class=\"line\">;<span class=\"built_in\">Array</span>.of(<span class=\"string\">'cat,dog'</span>, <span class=\"string\">'fish,bird'</span>).chain(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">','</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// [['cat', 'dog'], ['fish', 'bird']]</span></div><div class=\"line\">;<span class=\"built_in\">Array</span>.of(<span class=\"string\">'cat,dog'</span>, <span class=\"string\">'fish,bird'</span>).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">','</span>))</div></pre></td></tr></table></figure>\n<p>在有些语言中，of 也称为 return，chain 也称为 flatmap 与 bind。</p>\n<h1 id=\"Comonad\"><a href=\"#Comonad\" class=\"headerlink\" title=\"Comonad\"></a>Comonad</h1><p>拥有 extract 与 extend 函数的对象。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">const CoIdentity = (v) =&gt; (&#123;</div><div class=\"line\">    val: v,</div><div class=\"line\">    extract () &#123;</div><div class=\"line\">        return this.val</div><div class=\"line\">    &#125;,</div><div class=\"line\">    extend (f) &#123;</div><div class=\"line\">        return CoIdentity(f(this))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">CoIdentity(1).extract()</div><div class=\"line\">CoIdentity(1).extend(x =&gt; x.extract() + 1)   # CoIdentity(2)</div></pre></td></tr></table></figure>\n<h1 id=\"Applicative-Functor\"><a href=\"#Applicative-Functor\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p>一个拥有 ap 函数的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.ap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, f</span>) =&gt;</span> acc.concat(xs.map(f)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 示例</span></div><div class=\"line\">;[<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>].ap([<span class=\"number\">1</span>]) <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure>\n<p>如果你有两个对象，并需要对他们的元素执行一个二元函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Arrays that you want to combine</span></div><div class=\"line\"><span class=\"keyword\">const</span> arg1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">const</span> arg2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// combining function - must be curried for this to work</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partiallyAppliedAdds = [add].ap(arg1) <span class=\"comment\">// [(y) =&gt; 1 + y, (y) =&gt; 3 + y]</span></div></pre></td></tr></table></figure>\n<p>由此得到了一个函数数组，并且可以调用 ap 函数得到结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">partiallyAppliedAdds.ap(arg2) <span class=\"comment\">// [5, 6, 7, 8]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Applicative-Functor-1\"><a href=\"#Applicative-Functor-1\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p>一个拥有 ap 函数的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.ap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, f</span>) =&gt;</span> acc.concat(xs.map(f)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 示例</span></div><div class=\"line\">;[<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>].ap([<span class=\"number\">1</span>]) <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure>\n<p>如果你有两个对象，并需要对他们的元素执行一个二元函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Arrays that you want to combine</span></div><div class=\"line\"><span class=\"keyword\">const</span> arg1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">const</span> arg2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// combining function - must be curried for this to work</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partiallyAppliedAdds = [add].ap(arg1) <span class=\"comment\">// [(y) =&gt; 1 + y, (y) =&gt; 3 + y]</span></div></pre></td></tr></table></figure>\n<h1 id=\"态射-Morphism\"><a href=\"#态射-Morphism\" class=\"headerlink\" title=\"态射 (Morphism)\"></a>态射 (Morphism)</h1><p>一个变形的函数。</p>\n<h1 id=\"自同态-Endomorphism\"><a href=\"#自同态-Endomorphism\" class=\"headerlink\" title=\"自同态 (Endomorphism)\"></a>自同态 (Endomorphism)</h1><p>输入输出是相同类型的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// uppercase :: String -&gt; String</span></div><div class=\"line\"><span class=\"keyword\">const</span> uppercase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> str.toUpperCase()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// decrement :: Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> decrement = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x - <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h1 id=\"同构-Isomorphism\"><a href=\"#同构-Isomorphism\" class=\"headerlink\" title=\"同构 (Isomorphism)\"></a>同构 (Isomorphism)</h1><p>不用类型对象的变形，保持结构并且不丢失数据。</p>\n<p>例如，一个二维坐标既可以表示为数组 [2, 3]，也可以表示为对象 {x: 2, y: 3}。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 提供函数在两种类型间互相转换</span></div><div class=\"line\"><span class=\"keyword\">const</span> pairToCoords = <span class=\"function\">(<span class=\"params\">pair</span>) =&gt;</span> (&#123;<span class=\"attr\">x</span>: pair[<span class=\"number\">0</span>], <span class=\"attr\">y</span>: pair[<span class=\"number\">1</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> coordsToPair = <span class=\"function\">(<span class=\"params\">coords</span>) =&gt;</span> [coords.x, coords.y]</div><div class=\"line\"></div><div class=\"line\">coordsToPair(pairToCoords([<span class=\"number\">1</span>, <span class=\"number\">2</span>])) <span class=\"comment\">// [1, 2]</span></div><div class=\"line\"></div><div class=\"line\">pairToCoords(coordsToPair(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;)) <span class=\"comment\">// &#123;x: 1, y: 2&#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Setoid\"><a href=\"#Setoid\" class=\"headerlink\" title=\"Setoid\"></a>Setoid</h1><p>拥有 equals 函数的对象。equals 可以用来和其它对象比较。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> len = <span class=\"keyword\">this</span>.length</div><div class=\"line\"><span class=\"keyword\">if</span> (len !== arr.length) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] !== arr[i]) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].equals([<span class=\"number\">1</span>, <span class=\"number\">2</span>])   <span class=\"comment\">// true</span></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].equals([<span class=\"number\">3</span>, <span class=\"number\">4</span>])   <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h1 id=\"半群-Semigroup\"><a href=\"#半群-Semigroup\" class=\"headerlink\" title=\"半群 (Semigroup)\"></a>半群 (Semigroup)</h1><p>An object that has a concat function that combines it with another object of the same type.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>].concat([<span class=\"number\">2</span>]) <span class=\"comment\">// [1, 2]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Foldable\"><a href=\"#Foldable\" class=\"headerlink\" title=\"Foldable\"></a>Foldable</h1><p>An object that has a reduce function that can transform that object into some other type.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> list.reduce(<span class=\"function\">(<span class=\"params\">account, value</span>) =&gt;</span> account + value, <span class=\"number\">0</span>)</div><div class=\"line\">sum([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<h1 id=\"Traversbale\"><a href=\"#Traversbale\" class=\"headerlink\" title=\"Traversbale\"></a>Traversbale</h1><p>TODO</p>\n<h1 id=\"Type-Signatures\"><a href=\"#Type-Signatures\" class=\"headerlink\" title=\"Type Signatures\"></a>Type Signatures</h1><p>Often functions in JavaScript will include comments that indicate the types of their arguments and return values.</p>\n<p>There’s quite a bit of variance across the community but they often follow the following patterns:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// functionName :: firstArgType -&gt; secondArgType -&gt; returnType</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// add :: Number -&gt; Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// increment :: Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> increment = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>If a function accepts another function as an argument it is wrapped in parentheses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// call :: (a -&gt; b) -&gt; a -&gt; b</span></div><div class=\"line\"><span class=\"keyword\">const</span> call = <span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> (x) =&gt; f(x)</div></pre></td></tr></table></figure>\n<p>The letters a, b, c, d are used to signify that the argument can be of any type. The following version of map takes a function that transforms a value of some type a into another type b, an array of values of type a, and returns an array of values of type b.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map :: (a -&gt; b) -&gt; [a] -&gt; [b]</span></div><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> (list) =&gt; list.map(f)</div></pre></td></tr></table></figure>\n<p>Further reading</p>\n<ul>\n<li><a href=\"https://github.com/ramda/ramda/wiki/Type-Signatures\" target=\"_blank\" rel=\"external\">Ramda’s type signatures</a></li>\n<li><a href=\"https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#whats-your-type\" target=\"_blank\" rel=\"external\">Mostly Adequate Guide</a></li>\n<li><a href=\"http://stackoverflow.com/questions/399312/what-is-hindley-milner/399392#399392\" target=\"_blank\" rel=\"external\">What is Hindley-Milner?</a> on Stack Overflow</li>\n</ul>\n<h1 id=\"Union-type\"><a href=\"#Union-type\" class=\"headerlink\" title=\"Union type\"></a>Union type</h1><p>A union type is the combination of two types together into another one.</p>\n<p>JS doesn’t have static types but let’s say we invent a type NumOrString which is a sum of String and Number.</p>\n<p>The + operator in JS works on strings and numbers so we can use this new type to describe its inputs and outputs:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// add :: (NumOrString, NumOrString) -&gt; NumOrString</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Returns number 3</span></div><div class=\"line\">add(<span class=\"string\">'Foo'</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Returns string \"Foo2\"</span></div><div class=\"line\">add(<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>) <span class=\"comment\">// Returns string \"FooBar\"</span></div></pre></td></tr></table></figure>\n<p>Union types are also known as algebraic types, tagged unions, or sum types.</p>\n<p>There’s a couple libraries in JS which help with defining and using union types.</p>\n<ul>\n<li><a href=\"https://github.com/paldepind/union-type\" target=\"_blank\" rel=\"external\">union-type</a></li>\n<li><a href=\"https://github.com/fantasyland/daggy\" target=\"_blank\" rel=\"external\">daggy</a></li>\n</ul>\n<h1 id=\"Product-type\"><a href=\"#Product-type\" class=\"headerlink\" title=\"Product type\"></a>Product type</h1><p>A product type combines types together in a way you’re probably more familiar with:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// point :: (Number, Number) -&gt; &#123;x: Number, y: Number&#125;</span></div><div class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> (&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;)</div></pre></td></tr></table></figure>\n<p>It’s called a product because the total possible values of the data structure is the product of the different values.</p>\n<p>See also <a href=\"https://en.wikipedia.org/wiki/Set_theory\" target=\"_blank\" rel=\"external\">Set theory</a>.</p>\n<h1 id=\"Option\"><a href=\"#Option\" class=\"headerlink\" title=\"Option\"></a>Option</h1><p>Option is a union type with two cases often called Some and None.</p>\n<p>Option is useful for composing functions that might not return a value.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Naive definition</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> Some = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> (&#123;</div><div class=\"line\">        <span class=\"attr\">val</span>: v,</div><div class=\"line\">        map (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Some(f(<span class=\"keyword\">this</span>.val))</div><div class=\"line\">        &#125;,</div><div class=\"line\">        chain (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> f(<span class=\"keyword\">this</span>.val)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> None = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">        map (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        chain (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// maybeProp :: (String, &#123;a&#125;) -&gt; Option a</span></div><div class=\"line\">    <span class=\"keyword\">const</span> maybeProp = <span class=\"function\">(<span class=\"params\">key, obj</span>) =&gt;</span> <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'undefined'</span> ? None() : Some(obj[key])</div></pre></td></tr></table></figure>\n<p>Use <code>chain</code> to sequence functions that return <code>Options</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getItem :: Cart -&gt; Option CartItem</span></div><div class=\"line\"><span class=\"keyword\">const</span> getItem = <span class=\"function\">(<span class=\"params\">cart</span>) =&gt;</span> maybeProp(<span class=\"string\">'item'</span>, cart)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getPrice :: Item -&gt; Option Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> getPrice = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> maybeProp(<span class=\"string\">'price'</span>, item)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getNestedPrice :: cart -&gt; Option a</span></div><div class=\"line\"><span class=\"keyword\">const</span> getNestedPrice = <span class=\"function\">(<span class=\"params\">cart</span>) =&gt;</span> getItem(obj).chain(getPrice)</div><div class=\"line\"></div><div class=\"line\">getNestedPrice(&#123;&#125;) <span class=\"comment\">// None()</span></div><div class=\"line\">getNestedPrice(&#123;<span class=\"attr\">item</span>: &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;&#125;) <span class=\"comment\">// None()</span></div><div class=\"line\">getNestedPrice(&#123;<span class=\"attr\">item</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">9.99</span>&#125;&#125;) <span class=\"comment\">// Some(9.99)</span></div></pre></td></tr></table></figure>\n<p><code>Option</code> is also known as <code>Maybe</code>. <code>Some</code> is sometimes called <code>Just</code>. <code>None</code> is sometimes called <code>Nothing</code>.</p>\n<h1 id=\"Functional-Programming-Libraries-in-JavaScript\"><a href=\"#Functional-Programming-Libraries-in-JavaScript\" class=\"headerlink\" title=\"Functional Programming Libraries in JavaScript\"></a>Functional Programming Libraries in JavaScript</h1><ul>\n<li><a href=\"https://github.com/swannodette/mori\" target=\"_blank\" rel=\"external\">mori</a></li>\n<li><a href=\"https://github.com/facebook/immutable-js/\" target=\"_blank\" rel=\"external\">Immutable</a></li>\n<li><a href=\"https://github.com/ramda/ramda\" target=\"_blank\" rel=\"external\">Ramda</a></li>\n<li><a href=\"http://folktalejs.org/\" target=\"_blank\" rel=\"external\">Folktale</a></li>\n<li><a href=\"https://cwmyers.github.io/monet.js/\" target=\"_blank\" rel=\"external\">monet.js</a></li>\n<li><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"external\">lodash</a></li>\n<li><a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"external\">Underscore.js</a></li>\n<li><a href=\"https://github.com/dtao/lazy.js\" target=\"_blank\" rel=\"external\">Lazy.js</a></li>\n<li><a href=\"https://github.com/sjsyrek/maryamyriameliamurphies.js\" target=\"_blank\" rel=\"external\">maryamyriameliamurphies.js</a></li>\n<li><a href=\"https://github.com/casualjavascript/haskell-in-es6\" target=\"_blank\" rel=\"external\">Haskell in ES6</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>// <a href=\"https://github.com/shfshanyue/fp-jargon-zh#arity\" target=\"_blank\" rel=\"external\">https://github.com/shfshanyue/fp-jargon-zh#arity</a></p>\n<h1 id=\"Arity\"><a href=\"#Arity\" class=\"headerlink\" title=\"Arity\"></a>Arity</h1><p>函数参数的个数。来自于单词 unary, binary, ternary 等等。这个单词是由 -ary 与 -ity 两个后缀拼接而成。例如，一个带有两个参数的函数被称为二元函数或者它的 arity 是2。它也被那些更喜欢希腊词根而非拉丁词根的人称为 dyadic。同样地，带有可变数量参数的函数被称为 variadic，而二元函数只能带两个参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"><span class=\"keyword\">const</span> arity = sum.length</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'arity: '</span>, arity)</div></pre></td></tr></table></figure>\n<h1 id=\"高阶函数-Higher-Order-Function-HOF\"><a href=\"#高阶函数-Higher-Order-Function-HOF\" class=\"headerlink\" title=\"高阶函数 (Higher-Order Function/HOF)\"></a>高阶函数 (Higher-Order Function/HOF)</h1><p>以函数为参数或/和返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> filter = <span class=\"function\">(<span class=\"params\">predicate, xs</span>) =&gt;</span> xs.filter(predicte)</div><div class=\"line\"><span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> (x) =&gt; <span class=\"built_in\">Object</span>(x) <span class=\"keyword\">instanceof</span> type</div><div class=\"line\">filter(is(<span class=\"built_in\">Number</span>), [<span class=\"number\">0</span>, <span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"literal\">null</span>])</div></pre></td></tr></table></figure>\n<h1 id=\"偏函数-Partial-Function\"><a href=\"#偏函数-Partial-Function\" class=\"headerlink\" title=\"偏函数 (Partial Function)\"></a>偏函数 (Partial Function)</h1><p>对原始函数预设参数作为一个新的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partical = <span class=\"function\">(<span class=\"params\">f, ...args</span>) =&gt;</span> (...moreArgs) =&gt; f(...args, ...moreArgs)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add3 = <span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> a + b + c</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fivePlus = partical(add3, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">fivePlus(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以使用Function.prototype.bind实现偏函数</span></div><div class=\"line\"><span class=\"keyword\">const</span> add1More = add3.bind(<span class=\"literal\">null</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"柯里化-Currying\"><a href=\"#柯里化-Currying\" class=\"headerlink\" title=\"柯里化 (Currying)\"></a>柯里化 (Currying)</h1><p>讲一个多元函数转变为一元函数的过程。每当函数被调用时，它仅仅接收一个 参数并且返回带有一个参数的函数，直接传递完所有的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"><span class=\"keyword\">const</span> curriedSum = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> (b) =&gt; a + b</div><div class=\"line\"></div><div class=\"line\">curriedSum(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add2 = curriedSum(<span class=\"number\">2</span>)</div><div class=\"line\">add2(<span class=\"number\">10</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"自动柯里化-Auto-Currying\"><a href=\"#自动柯里化-Auto-Currying\" class=\"headerlink\" title=\"自动柯里化 (Auto Currying)\"></a>自动柯里化 (Auto Currying)</h1><p><code>lodash</code>, <code>understore</code>和<code>ramda</code>有<code>curry</code>函数可以自动完成柯里化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y</div><div class=\"line\"><span class=\"keyword\">const</span> curriedAdd = _.curry(add)</div><div class=\"line\"></div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\">curriedAdd(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"进一步阅读\"><a href=\"#进一步阅读\" class=\"headerlink\" title=\"进一步阅读\"></a>进一步阅读</h3><ul>\n<li><a href=\"http://fr.umio.us/favoring-curry/\" target=\"_blank\" rel=\"external\">Favoring Curry</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=m3svKOdZijA\" target=\"_blank\" rel=\"external\">Hey Underscore, You’re Doing It Wrong!</a></li>\n</ul>\n<h1 id=\"函数组合-Function-Composing\"><a href=\"#函数组合-Function-Composing\" class=\"headerlink\" title=\"函数组合 (Function Composing)\"></a>函数组合 (Function Composing)</h1><p>接收多个函数作为参数，从右到左，一个函数的输入为另一个函数的输出</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (a) =&gt; f(g(a))</div><div class=\"line\"><span class=\"keyword\">const</span> floorAndToString = compose(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val.toString(), <span class=\"built_in\">Math</span>.floor)</div><div class=\"line\">floorAndToString(<span class=\"number\">12.12</span>)</div></pre></td></tr></table></figure>\n<p>Continuation</p>\n<p>在一个程序执行的任意时刻, 尚未执行的代码成为Continuation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> printAsString = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`Given <span class=\"subst\">$&#123;num&#125;</span>`</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addOneAndContinue = <span class=\"function\">(<span class=\"params\">num, cc</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> result = num + <span class=\"number\">1</span></div><div class=\"line\">    cc(result)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">andOneAndContinue(<span class=\"number\">2</span>, printAsString)</div></pre></td></tr></table></figure>\n<p>Continuation 在异步编程中很常见, 比如当程序需要接收到数据才能继续执行。请求的相应同城作为代码的剩余执行部分，一旦接收到数据，对数据的处理被作为Continuation.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> continueProgramWith = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;&#125;</div><div class=\"line\">readFileAsync(<span class=\"string\">'path/to/file'</span>, (response, error) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    continueProgramWith(response)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"纯函数-Purity\"><a href=\"#纯函数-Purity\" class=\"headerlink\" title=\"纯函数 (Purity)\"></a>纯函数 (Purity)</h1><p>输出仅由输入决定，且不产生副作用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`hello, <span class=\"subst\">$&#123;name&#125;</span>`</span></div><div class=\"line\">greet(<span class=\"string\">'world'</span>)</div></pre></td></tr></table></figure>\n<p>以一下代码不是纯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.name = <span class=\"string\">'Brianne'</span></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">`Hi, <span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.name&#125;</span>`</span> <span class=\"comment\">//函数依赖外部状态。</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> greeting</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</div><div class=\"line\">    greeting = <span class=\"string\">`Hi, <span class=\"subst\">$&#123;name&#125;</span>`</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">greet(<span class=\"string\">'Brianne'</span>)</div><div class=\"line\">greeting</div></pre></td></tr></table></figure>\n<h1 id=\"副作用-Side-effects\"><a href=\"#副作用-Side-effects\" class=\"headerlink\" title=\"副作用(Side effects)\"></a>副作用(Side effects)</h1><p>如果函数与外部可变状态进行交互，则它是有副作用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> differentEveryTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'IO is a side effect!'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"幂等行-Idempotent\"><a href=\"#幂等行-Idempotent\" class=\"headerlink\" title=\"幂等行(Idempotent)\"></a>幂等行(Idempotent)</h1><p>如果一个函数执行多次皆返回相同的结果，则它是幂等性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">f(f(x)) = f(x)</div><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"built_in\">Math</span>.abs(<span class=\"number\">10</span>))</div><div class=\"line\">sort(sort(sort([<span class=\"number\">2</span>, <span class=\"number\">1</span>])))</div></pre></td></tr></table></figure>\n<h1 id=\"Point-Free-风格-Point-Free-Style\"><a href=\"#Point-Free-风格-Point-Free-Style\" class=\"headerlink\" title=\"Point-Free 风格(Point-Free Style)\"></a>Point-Free 风格(Point-Free Style)</h1><p>定义函数时，不显式的支出函数所带参数。这种风格通常需要柯里化或者高阶函数。也叫Tacit programming。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> (list) =&gt; list.map(fn)</div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> (b) =&gt; a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> incrementAll = <span class=\"function\">(<span class=\"params\">numbers</span>) =&gt;</span> map(add(<span class=\"number\">1</span>))(numbers)</div><div class=\"line\"><span class=\"keyword\">const</span> incrementAll2 = map(add(<span class=\"number\">1</span>))</div></pre></td></tr></table></figure>\n<h1 id=\"谓词-Predicate\"><a href=\"#谓词-Predicate\" class=\"headerlink\" title=\"谓词 (Predicate)\"></a>谓词 (Predicate)</h1><p>根据输入返回true或false. 通常用在Array.prototype.filter的回调函数中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> predicate = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a &gt; <span class=\"number\">2</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].filter(predicate)</div></pre></td></tr></table></figure>\n<h1 id=\"契约-Contracts\"><a href=\"#契约-Contracts\" class=\"headerlink\" title=\"契约 (Contracts)\"></a>契约 (Contracts)</h1><p>契约保证了函数或者表达式在运行时的行为。当违反了契约时，将跑出一个错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> contract  = <span class=\"function\">(<span class=\"params\">input</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> input === <span class=\"string\">'number'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Contract Violated: expected int -&gt; int'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addOne = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> contract(num) &amp;&amp; num + <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">addOne(<span class=\"number\">2</span>)</div><div class=\"line\">addOne(<span class=\"string\">'hello'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"范畴-Category\"><a href=\"#范畴-Category\" class=\"headerlink\" title=\"范畴 (Category)\"></a>范畴 (Category)</h1><p>在范畴论中，范畴是指对象集合及它们之间的态射 (morphism)。在编程中，数据类型作为对象，函数作为态射。</p>\n<p>一个有效的范畴遵从以下三个原则：</p>\n<ul>\n<li>必有一个 identity 态射，使得 map 一个对象是它自身。a 是范畴里的一个对象时，必有一个函数使 a -&gt; a。</li>\n<li>态射必是可组合的。a，b，c 是范畴里的对象，f 是态射 a -&gt; b，g 是 b -&gt; c 态射。g(f(x)) 一定与 (g ● f)(x)</li>\n<li>组合满足结合律。f ● (g ● h) 与 (f ● g) ● h 是等价的。</li>\n</ul>\n<p>这些准则是非常抽象的，范畴论对与发现组合的新方法是伟大的。</p>\n<p>进一步阅读</p>\n<p><a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\" target=\"_blank\" rel=\"external\">Category Theory for Programmers</a></p>\n<h1 id=\"值-Value\"><a href=\"#值-Value\" class=\"headerlink\" title=\"值 (Value)\"></a>值 (Value)</h1><p>赋值给变量的值称作Value</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.freeze(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;)</div><div class=\"line\">;<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a</div><div class=\"line\">;[<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"literal\">undefined</span></div></pre></td></tr></table></figure>\n<h1 id=\"常量-Constant\"><a href=\"#常量-Constant\" class=\"headerlink\" title=\"常量 (Constant)\"></a>常量 (Constant)</h1><p>一旦定义不可重新赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> five = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">const</span> john = <span class=\"built_in\">Object</span>.freeze(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;)</div></pre></td></tr></table></figure>\n<p>常量是<a href=\"https://github.com/shfshanyue/fp-jargon-zh#referential-transparency\" target=\"_blank\" rel=\"external\">引用透明</a>的，因此它们可以被它们所代表的值替代而不影响结果。</p>\n<p>对于以上两个常量，以下语句总会返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">john.age + five === (&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;).age + (<span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"函子-Functor\"><a href=\"#函子-Functor\" class=\"headerlink\" title=\"函子 (Functor)\"></a>函子 (Functor)</h1><p>一个实现了map 函数的对象，map 会遍历对象中的每个值并生成一个新的对象。遵守两个准则</p>\n<h3 id=\"一致性-Preserves-identity\"><a href=\"#一致性-Preserves-identity\" class=\"headerlink\" title=\"一致性 (Preserves identity)\"></a>一致性 (Preserves identity)</h3><p>object.map(x =&gt; x) ≍ object</p>\n<h3 id=\"组合性-Composable\"><a href=\"#组合性-Composable\" class=\"headerlink\" title=\"组合性 (Composable)\"></a>组合性 (Composable)</h3><p>object.map(compose(f, g)) ≍ object.map(g).map(f)  // f, g 为任意函数<br>在 javascript 中一个常见的函子是 Array, 因为它遵守因子的两个准则。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">const</span> g = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)))</div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(g).map(f)</div></pre></td></tr></table></figure>\n<h1 id=\"Pointed-Functor\"><a href=\"#Pointed-Functor\" class=\"headerlink\" title=\"Pointed Functor\"></a>Pointed Functor</h1><p>一个实现了 of 函数的对象。</p>\n<p>ES2015 添加了 Array.of，使 Array 成为了 Pointed Functor。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Lift\"><a href=\"#Lift\" class=\"headerlink\" title=\"Lift\"></a>Lift</h1><h1 id=\"引用透明性-Referential-Transparency\"><a href=\"#引用透明性-Referential-Transparency\" class=\"headerlink\" title=\"引用透明性 (Referential Transparency)\"></a>引用透明性 (Referential Transparency)</h1><p>一个表达式能够被它的值替代而不改变程序的行为成为引用透明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> greet = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'hello, world.'</span></div></pre></td></tr></table></figure>\n<h1 id=\"匿名函数-Lambda\"><a href=\"#匿名函数-Lambda\" class=\"headerlink\" title=\"匿名函数 (Lambda)\"></a>匿名函数 (Lambda)</h1><p>匿名函数被视作一个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + <span class=\"number\">1</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">;<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>匿名函数通常作为高阶函数的参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].map(<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<p>可以把 Lambda 赋值给一个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h1 id=\"Lambda-Caculus\"><a href=\"#Lambda-Caculus\" class=\"headerlink\" title=\"Lambda Caculus\"></a>Lambda Caculus</h1><p>数学的一个分支，使用函数创造 <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\" target=\"_blank\" rel=\"external\">通过计算模型</a></p>\n<h1 id=\"惰性求值-Lazy-evaluation\"><a href=\"#惰性求值-Lazy-evaluation\" class=\"headerlink\" title=\"惰性求值 (Lazy evaluation)\"></a>惰性求值 (Lazy evaluation)</h1><p>按需求值机制，只有当需要计算所得值时才会计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> rand = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"built_in\">Math</span>.random()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> randIter = rand()</div><div class=\"line\">randIter.next()</div></pre></td></tr></table></figure>\n<h1 id=\"Monoid\"><a href=\"#Monoid\" class=\"headerlink\" title=\"Monoid\"></a>Monoid</h1><p>一个对象拥有一个函数用来连接相同类型的对象。</p>\n<p>数值加法是一个简单的 Monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">1</span>   <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>以上示例中，数值是对象而 + 是函数。</p>\n<p>与另一个值结合而不会改变它的值必须存在，称为 identity。</p>\n<p>加法的 identity 值为 0:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">0</span>   <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>需要满足结合律<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">2</span> + <span class=\"number\">3</span>) === (<span class=\"number\">1</span> + <span class=\"number\">2</span>) + <span class=\"number\">3</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>数组的结合也是 Monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat([<span class=\"number\">3</span>, <span class=\"number\">4</span>])</div></pre></td></tr></table></figure></p>\n<p>identity 值为空数组</p>\n<p>;[1, 2].concat([])<br>identity 与 compose 函数能够组成 monoid<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> identity = <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a</div><div class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (x) =&gt; f(g(x))</div></pre></td></tr></table></figure></p>\n<p>foo 是只带一个参数的任意函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compose(foo, identity) ≍ compose(identity, foo) ≍ foo</div></pre></td></tr></table></figure></p>\n<h1 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h1><p>拥有 of 和 chain 函数的对象。chain 很像 map， 除了用来铺平嵌套数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.chain = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, it</span>) =&gt;</span> acc.concat(f(it)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ['cat', 'dog', 'fish', 'bird']</span></div><div class=\"line\">;<span class=\"built_in\">Array</span>.of(<span class=\"string\">'cat,dog'</span>, <span class=\"string\">'fish,bird'</span>).chain(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">','</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// [['cat', 'dog'], ['fish', 'bird']]</span></div><div class=\"line\">;<span class=\"built_in\">Array</span>.of(<span class=\"string\">'cat,dog'</span>, <span class=\"string\">'fish,bird'</span>).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.split(<span class=\"string\">','</span>))</div></pre></td></tr></table></figure>\n<p>在有些语言中，of 也称为 return，chain 也称为 flatmap 与 bind。</p>\n<h1 id=\"Comonad\"><a href=\"#Comonad\" class=\"headerlink\" title=\"Comonad\"></a>Comonad</h1><p>拥有 extract 与 extend 函数的对象。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">const CoIdentity = (v) =&gt; (&#123;</div><div class=\"line\">    val: v,</div><div class=\"line\">    extract () &#123;</div><div class=\"line\">        return this.val</div><div class=\"line\">    &#125;,</div><div class=\"line\">    extend (f) &#123;</div><div class=\"line\">        return CoIdentity(f(this))</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">CoIdentity(1).extract()</div><div class=\"line\">CoIdentity(1).extend(x =&gt; x.extract() + 1)   # CoIdentity(2)</div></pre></td></tr></table></figure>\n<h1 id=\"Applicative-Functor\"><a href=\"#Applicative-Functor\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p>一个拥有 ap 函数的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.ap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, f</span>) =&gt;</span> acc.concat(xs.map(f)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 示例</span></div><div class=\"line\">;[<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>].ap([<span class=\"number\">1</span>]) <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure>\n<p>如果你有两个对象，并需要对他们的元素执行一个二元函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Arrays that you want to combine</span></div><div class=\"line\"><span class=\"keyword\">const</span> arg1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">const</span> arg2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// combining function - must be curried for this to work</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partiallyAppliedAdds = [add].ap(arg1) <span class=\"comment\">// [(y) =&gt; 1 + y, (y) =&gt; 3 + y]</span></div></pre></td></tr></table></figure>\n<p>由此得到了一个函数数组，并且可以调用 ap 函数得到结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">partiallyAppliedAdds.ap(arg2) <span class=\"comment\">// [5, 6, 7, 8]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Applicative-Functor-1\"><a href=\"#Applicative-Functor-1\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p>一个拥有 ap 函数的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.ap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">acc, f</span>) =&gt;</span> acc.concat(xs.map(f)), [])</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 示例</span></div><div class=\"line\">;[<span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a + <span class=\"number\">1</span>].ap([<span class=\"number\">1</span>]) <span class=\"comment\">// [2]</span></div></pre></td></tr></table></figure>\n<p>如果你有两个对象，并需要对他们的元素执行一个二元函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Arrays that you want to combine</span></div><div class=\"line\"><span class=\"keyword\">const</span> arg1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">const</span> arg2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// combining function - must be curried for this to work</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> partiallyAppliedAdds = [add].ap(arg1) <span class=\"comment\">// [(y) =&gt; 1 + y, (y) =&gt; 3 + y]</span></div></pre></td></tr></table></figure>\n<h1 id=\"态射-Morphism\"><a href=\"#态射-Morphism\" class=\"headerlink\" title=\"态射 (Morphism)\"></a>态射 (Morphism)</h1><p>一个变形的函数。</p>\n<h1 id=\"自同态-Endomorphism\"><a href=\"#自同态-Endomorphism\" class=\"headerlink\" title=\"自同态 (Endomorphism)\"></a>自同态 (Endomorphism)</h1><p>输入输出是相同类型的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// uppercase :: String -&gt; String</span></div><div class=\"line\"><span class=\"keyword\">const</span> uppercase = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> str.toUpperCase()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// decrement :: Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> decrement = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x - <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h1 id=\"同构-Isomorphism\"><a href=\"#同构-Isomorphism\" class=\"headerlink\" title=\"同构 (Isomorphism)\"></a>同构 (Isomorphism)</h1><p>不用类型对象的变形，保持结构并且不丢失数据。</p>\n<p>例如，一个二维坐标既可以表示为数组 [2, 3]，也可以表示为对象 {x: 2, y: 3}。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 提供函数在两种类型间互相转换</span></div><div class=\"line\"><span class=\"keyword\">const</span> pairToCoords = <span class=\"function\">(<span class=\"params\">pair</span>) =&gt;</span> (&#123;<span class=\"attr\">x</span>: pair[<span class=\"number\">0</span>], <span class=\"attr\">y</span>: pair[<span class=\"number\">1</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> coordsToPair = <span class=\"function\">(<span class=\"params\">coords</span>) =&gt;</span> [coords.x, coords.y]</div><div class=\"line\"></div><div class=\"line\">coordsToPair(pairToCoords([<span class=\"number\">1</span>, <span class=\"number\">2</span>])) <span class=\"comment\">// [1, 2]</span></div><div class=\"line\"></div><div class=\"line\">pairToCoords(coordsToPair(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;)) <span class=\"comment\">// &#123;x: 1, y: 2&#125;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Setoid\"><a href=\"#Setoid\" class=\"headerlink\" title=\"Setoid\"></a>Setoid</h1><p>拥有 equals 函数的对象。equals 可以用来和其它对象比较。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.equals = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">const</span> len = <span class=\"keyword\">this</span>.length</div><div class=\"line\"><span class=\"keyword\">if</span> (len !== arr.length) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>[i] !== arr[i]) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].equals([<span class=\"number\">1</span>, <span class=\"number\">2</span>])   <span class=\"comment\">// true</span></div><div class=\"line\">;[<span class=\"number\">1</span>, <span class=\"number\">2</span>].equals([<span class=\"number\">3</span>, <span class=\"number\">4</span>])   <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<h1 id=\"半群-Semigroup\"><a href=\"#半群-Semigroup\" class=\"headerlink\" title=\"半群 (Semigroup)\"></a>半群 (Semigroup)</h1><p>An object that has a concat function that combines it with another object of the same type.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">;[<span class=\"number\">1</span>].concat([<span class=\"number\">2</span>]) <span class=\"comment\">// [1, 2]</span></div></pre></td></tr></table></figure>\n<h1 id=\"Foldable\"><a href=\"#Foldable\" class=\"headerlink\" title=\"Foldable\"></a>Foldable</h1><p>An object that has a reduce function that can transform that object into some other type.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\"><span class=\"params\">list</span> =&gt;</span> list.reduce(<span class=\"function\">(<span class=\"params\">account, value</span>) =&gt;</span> account + value, <span class=\"number\">0</span>)</div><div class=\"line\">sum([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div></pre></td></tr></table></figure>\n<h1 id=\"Traversbale\"><a href=\"#Traversbale\" class=\"headerlink\" title=\"Traversbale\"></a>Traversbale</h1><p>TODO</p>\n<h1 id=\"Type-Signatures\"><a href=\"#Type-Signatures\" class=\"headerlink\" title=\"Type Signatures\"></a>Type Signatures</h1><p>Often functions in JavaScript will include comments that indicate the types of their arguments and return values.</p>\n<p>There’s quite a bit of variance across the community but they often follow the following patterns:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// functionName :: firstArgType -&gt; secondArgType -&gt; returnType</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// add :: Number -&gt; Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> (y) =&gt; x + y</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// increment :: Number -&gt; Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> increment = <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>If a function accepts another function as an argument it is wrapped in parentheses.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// call :: (a -&gt; b) -&gt; a -&gt; b</span></div><div class=\"line\"><span class=\"keyword\">const</span> call = <span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> (x) =&gt; f(x)</div></pre></td></tr></table></figure>\n<p>The letters a, b, c, d are used to signify that the argument can be of any type. The following version of map takes a function that transforms a value of some type a into another type b, an array of values of type a, and returns an array of values of type b.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map :: (a -&gt; b) -&gt; [a] -&gt; [b]</span></div><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> (list) =&gt; list.map(f)</div></pre></td></tr></table></figure>\n<p>Further reading</p>\n<ul>\n<li><a href=\"https://github.com/ramda/ramda/wiki/Type-Signatures\" target=\"_blank\" rel=\"external\">Ramda’s type signatures</a></li>\n<li><a href=\"https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch7.html#whats-your-type\" target=\"_blank\" rel=\"external\">Mostly Adequate Guide</a></li>\n<li><a href=\"http://stackoverflow.com/questions/399312/what-is-hindley-milner/399392#399392\" target=\"_blank\" rel=\"external\">What is Hindley-Milner?</a> on Stack Overflow</li>\n</ul>\n<h1 id=\"Union-type\"><a href=\"#Union-type\" class=\"headerlink\" title=\"Union type\"></a>Union type</h1><p>A union type is the combination of two types together into another one.</p>\n<p>JS doesn’t have static types but let’s say we invent a type NumOrString which is a sum of String and Number.</p>\n<p>The + operator in JS works on strings and numbers so we can use this new type to describe its inputs and outputs:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// add :: (NumOrString, NumOrString) -&gt; NumOrString</span></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Returns number 3</span></div><div class=\"line\">add(<span class=\"string\">'Foo'</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Returns string \"Foo2\"</span></div><div class=\"line\">add(<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>) <span class=\"comment\">// Returns string \"FooBar\"</span></div></pre></td></tr></table></figure>\n<p>Union types are also known as algebraic types, tagged unions, or sum types.</p>\n<p>There’s a couple libraries in JS which help with defining and using union types.</p>\n<ul>\n<li><a href=\"https://github.com/paldepind/union-type\" target=\"_blank\" rel=\"external\">union-type</a></li>\n<li><a href=\"https://github.com/fantasyland/daggy\" target=\"_blank\" rel=\"external\">daggy</a></li>\n</ul>\n<h1 id=\"Product-type\"><a href=\"#Product-type\" class=\"headerlink\" title=\"Product type\"></a>Product type</h1><p>A product type combines types together in a way you’re probably more familiar with:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// point :: (Number, Number) -&gt; &#123;x: Number, y: Number&#125;</span></div><div class=\"line\"><span class=\"keyword\">const</span> point = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> (&#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;)</div></pre></td></tr></table></figure>\n<p>It’s called a product because the total possible values of the data structure is the product of the different values.</p>\n<p>See also <a href=\"https://en.wikipedia.org/wiki/Set_theory\" target=\"_blank\" rel=\"external\">Set theory</a>.</p>\n<h1 id=\"Option\"><a href=\"#Option\" class=\"headerlink\" title=\"Option\"></a>Option</h1><p>Option is a union type with two cases often called Some and None.</p>\n<p>Option is useful for composing functions that might not return a value.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Naive definition</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> Some = <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> (&#123;</div><div class=\"line\">        <span class=\"attr\">val</span>: v,</div><div class=\"line\">        map (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Some(f(<span class=\"keyword\">this</span>.val))</div><div class=\"line\">        &#125;,</div><div class=\"line\">        chain (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> f(<span class=\"keyword\">this</span>.val)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> None = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">        map (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        chain (f) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// maybeProp :: (String, &#123;a&#125;) -&gt; Option a</span></div><div class=\"line\">    <span class=\"keyword\">const</span> maybeProp = <span class=\"function\">(<span class=\"params\">key, obj</span>) =&gt;</span> <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'undefined'</span> ? None() : Some(obj[key])</div></pre></td></tr></table></figure>\n<p>Use <code>chain</code> to sequence functions that return <code>Options</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getItem :: Cart -&gt; Option CartItem</span></div><div class=\"line\"><span class=\"keyword\">const</span> getItem = <span class=\"function\">(<span class=\"params\">cart</span>) =&gt;</span> maybeProp(<span class=\"string\">'item'</span>, cart)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getPrice :: Item -&gt; Option Number</span></div><div class=\"line\"><span class=\"keyword\">const</span> getPrice = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> maybeProp(<span class=\"string\">'price'</span>, item)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// getNestedPrice :: cart -&gt; Option a</span></div><div class=\"line\"><span class=\"keyword\">const</span> getNestedPrice = <span class=\"function\">(<span class=\"params\">cart</span>) =&gt;</span> getItem(obj).chain(getPrice)</div><div class=\"line\"></div><div class=\"line\">getNestedPrice(&#123;&#125;) <span class=\"comment\">// None()</span></div><div class=\"line\">getNestedPrice(&#123;<span class=\"attr\">item</span>: &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;&#125;) <span class=\"comment\">// None()</span></div><div class=\"line\">getNestedPrice(&#123;<span class=\"attr\">item</span>: &#123;<span class=\"attr\">price</span>: <span class=\"number\">9.99</span>&#125;&#125;) <span class=\"comment\">// Some(9.99)</span></div></pre></td></tr></table></figure>\n<p><code>Option</code> is also known as <code>Maybe</code>. <code>Some</code> is sometimes called <code>Just</code>. <code>None</code> is sometimes called <code>Nothing</code>.</p>\n<h1 id=\"Functional-Programming-Libraries-in-JavaScript\"><a href=\"#Functional-Programming-Libraries-in-JavaScript\" class=\"headerlink\" title=\"Functional Programming Libraries in JavaScript\"></a>Functional Programming Libraries in JavaScript</h1><ul>\n<li><a href=\"https://github.com/swannodette/mori\" target=\"_blank\" rel=\"external\">mori</a></li>\n<li><a href=\"https://github.com/facebook/immutable-js/\" target=\"_blank\" rel=\"external\">Immutable</a></li>\n<li><a href=\"https://github.com/ramda/ramda\" target=\"_blank\" rel=\"external\">Ramda</a></li>\n<li><a href=\"http://folktalejs.org/\" target=\"_blank\" rel=\"external\">Folktale</a></li>\n<li><a href=\"https://cwmyers.github.io/monet.js/\" target=\"_blank\" rel=\"external\">monet.js</a></li>\n<li><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"external\">lodash</a></li>\n<li><a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"external\">Underscore.js</a></li>\n<li><a href=\"https://github.com/dtao/lazy.js\" target=\"_blank\" rel=\"external\">Lazy.js</a></li>\n<li><a href=\"https://github.com/sjsyrek/maryamyriameliamurphies.js\" target=\"_blank\" rel=\"external\">maryamyriameliamurphies.js</a></li>\n<li><a href=\"https://github.com/casualjavascript/haskell-in-es6\" target=\"_blank\" rel=\"external\">Haskell in ES6</a></li>\n</ul>\n"},{"layout":"post","title":"下一代 Web 应用模型 —— Progressive Web App","subtitle":"The Next Generation Application Model For The Web - Progressive Web App","date":"2017-02-09T04:00:00.000Z","author":"Hux","header-img":"img/post-bg-nextgen-web-pwa.jpg","header-mask":0.3,"catalog":true,"_content":"\n\n\n> 本文首发于[《程序员》](http://geek.csdn.net/news/detail/135595)，发布于 [Hux Blog](https://huangxuan.me)、[前端外刊评论](https://zhuanlan.zhihu.com/FrontendMagazine)，转载请保留链接 ;)\n\n\n## 下一代 Web 应用？\n\n近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。\n\n包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 web 应用需求的前端框架及其生态，也涌现出了像[同构 JavaScript][1]与[通用 JavaScript 应用][2]这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 web 应用架构方式，可以说是百花齐放。\n\n但是，Web 应用在移动时代并没有达到其在桌面设备上流行的程度。究其原因，尽管上述的各种方案已经充分利用了现有的 JavaScript 计算能力、CSS 布局能力、HTTP 缓存与浏览器 API 对当代基于 [Ajax][3] 与[响应式设计][4]的 web 应用模型的性能与体验带来了工程角度的巨大突破，我们仍然无法在不借助原生程序辅助浏览器的前提下突破 web 平台本身对 web 应用固有的桎梏：**客户端软件（即网页）需要下载所带来的网络延迟；与 Web 应用依赖浏览器作为入口所带来的体验问题。**\n\n![](/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg)\n*Web 与原生应用在移动平台上的使用时长对比 [图片来源: Google][i2]*\n\n在桌面设备上，由于网络条件稳定，屏幕尺寸充分，交互方式趋向于多任务，这两点造成的负面影响对比 web 应用免于安装、随叫随到、无需更新等优点，瑕不掩瑜。但是在移动时代，脆弱的网络连接与全新的人机交互方式使得这两个问题被无限放大，严重制约了 web 应用在移动平台的发展。在用户眼里，原生应用不会出现「白屏」，清一色都摆在主屏幕上；而 web 应用则是浏览器这个应用中的应用，使用起来并不方便，而且加载也比原生应用要慢。\n\nProgressive Web Apps（以下简称 PWA）以及构成 PWA 的一系列关键技术的出现，终于让我们看到了彻底解决这两个平台级别问题的曙光：能够显著提高应用加载速度、甚至让 web 应用可以在离线环境使用的 Service Worker 与 Cache Storage；用于描述 web 应用元数据（metadata）、让 web 应用能够像原生应用一样被添加到主屏、全屏执行的 Web App Manifest；以及进一步提高 web 应用与操作系统集成能力，让 web 应用能在未被激活时发起推送通知的 Push API 与 Notification API 等等。\n\n将这些技术组合在一起会是怎样的效果呢？「印度阿里巴巴」 —— [Flipkart][17] 在 2015 年一度关闭了自己的移动端网站，却在年底发布了现在最为人津津乐道的 PWA 案例 *FlipKart Lite*，成为世界上第一个支撑大规模业务的 PWA。发布的一周后它就亮相于 [Chrome Dev Summit 2015][15] 上，笔者当时就被惊艳到了。为了方便各媒介上的读者观看，笔者做了几幅图方便给大家介绍：\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg)\n*图片来源: Hux & [Medium.com][i3]*\n\n当浏览器发现用户[需要][16] Flipkart Lite 时，它就会提示用户「嘿，你可以把它添加至主屏哦」（用户也可以手动添加）。这样，Flipkart Lite 就会像原生应用一样在主屏上留下一个自定义的 icon 作为入口；与一般的书签不同，当用户点击 icon 时，Flipkat Lite 将直接全屏打开，不再受困于浏览器的 UI 中，而且有自己的启动屏效果。\n\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg)\n*图片来源: Hux & [Medium.com][i3]*\n\n更强大的是，在无法访问网络时，Flipkart Lite 可以像原生应用一样照常执行，还会很骚气的变成黑白色；不但如此，曾经访问过的商品都会被缓存下来得以在离线时继续访问。在商品降价、促销等时刻，Flipkart Lite 会像原生应用一样发起推送通知，吸引用户回到应用。\n\n**无需担心网络延迟；有着独立入口与独立的保活机制。**之前两个问题的一并解决，宣告着 web 应用在移动设备上的浴火重生：满足 PWA 模型的 web 应用，将逐渐成为移动操作系统的一等公民，并将向原生应用发起挑战与「复仇」。\n\n更令笔者兴奋的是，就在今年 11 月的 [Chrome Dev Summit 2016][18] 上，Chrome 的工程 VP Darin Fisher 介绍了 Chrome 团队正在做的一些实验：把「添加至主屏」重命名为「安装」，被安装的 PWA 不再仅以 widget 的形式显示在桌面上，而是真正做到与所有原生应用平级，一样被收纳进应用抽屉（App Drawer）里，一样出现在系统设置中 🎉🎉🎉。\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg)\n*图片来源: Hux & [@adityapunjani][i4]*\n\n图中从左到右分别为：类似原生应用的安装界面；被收纳在应用抽屉里的 Flipkart Lite 与 Hux Blog；设置界面中并列出现的 Flipkart 原生应用与 Flipkart Lite PWA （可以看到 PWA 巨大的体积优势）\n\n**笔者相信，PWA 模型将继约 20 年前横空出世的 Ajax 与约 10 年前风靡移动互联网的响应式设计之后，掀起 web 应用模型的第三次根本性革命，将 web 应用带进一个全新的时代。**\n\n## PWA 关键技术的前世今生\n\n### [Web App Manifest][spec1]\n\nWeb App Manifest，即通过一个清单文件向浏览器暴露 web 应用的元数据，包括名字、icon 的 URL 等，以备浏览器使用，比如在添加至主屏或推送通知时暴露给操作系统，从而增强 web 应用与操作系统的集成能力。\n\n让 web 应用在移动设备上的体验更接近原生应用的尝试其实早在 2008 年的 [iOS 1.1.3 与 iOS 2.1.0 ][q37]时就开始了，它们分别为 web 应用增加了对自定义 icon 和全屏打开的支持。\n\n![](/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif)\n*图片来源: [appleinsider.com][i1]*\n\n但是很快，随着越来越多的私有平台通过 `<meta>`/`<link>` 标签来为 web 应用添加「私货」，`<head>` 很快就被塞满了：\n\n```html\n<!-- Add to homescreen for Safari on iOS -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-title\" content=\"Lighten\">\n\n<!-- Add to homescreen for Chrome on Android -->\n<meta name=\"mobile-web-app-capable\" content=\"yes\">\n<mate name=\"theme-color\" content=\"#000000\">\n\n<!-- Icons for iOS and Android Chrome M31~M38 -->\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"images/touch/apple-touch-icon-144x144-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"images/touch/apple-touch-icon-114x114-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"images/touch/apple-touch-icon-72x72-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"images/touch/apple-touch-icon-57x57-precomposed.png\">\n\n<!-- Icon for Android Chrome, recommended -->\n<link rel=\"shortcut icon\" sizes=\"196x196\" href=\"images/touch/touch-icon-196x196.png\">\n\n<!-- Tile icon for Win8 (144x144 + tile color) -->\n<meta name=\"msapplication-TileImage\" content=\"images/touch/ms-touch-icon-144x144-precomposed.png\">\n<meta name=\"msapplication-TileColor\" content=\"#3372DF\">\n\n<!-- Generic Icon -->\n<link rel=\"shortcut icon\" href=\"images/touch/touch-icon-57x57.png\">\n```\n\n显然，这种做法并不优雅：分散又重复的元数据定义多余且难以维持同步，与 html 耦合在一起也加重了浏览器检查元数据未来变动的成本。与此同时，社区里开始出现使用 manifest 文件以中心化地描述元数据的方案，比如 [Chrome Extension、 Chrome Hosted Web Apps (2010)][12] 与 [Firefox OS App Manifest (2011)][13] 使用 JSON；[Cordova][19] 与 [Windows Pinned Site][20] 使用 XML；\n\n2013 年，W3C WebApps 工作组开始对基于 JSON 的 Manifest 进行标准化，于同年年底发布[第一份公开 Working Draft][14]，并逐渐演化成为今天的 W3C Web App Manifest：\n\n```json\n{\n  \"short_name\": \"Manifest Sample\",\n  \"name\": \"Web Application Manifest Sample\",\n  \"icons\": [{\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n   }],\n  \"scope\": \"/sample/\",\n  \"start_url\": \"/sample/index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"landscape\"\n  \"theme_color\": \"#000\",\n  \"background_color\": \"#fff\",\n}\n```\n```html\n<!-- document -->\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n诸如 `name`、`icons`、`display` 都是我们比较熟悉的，而大部分新增的成员则为 web 应用带来了一系列以前 web 应用想做却做不到（或在之前只能靠 hack）的新特性：\n\n- `scope`：定义了 web 应用的浏览作用域，比如作用域外的 URL 就会打开浏览器而不会在当前 PWA 里继续浏览。\n- `start_url`：定义了一个 PWA 的入口页面。比如说你添加 [Hux Blog][21] 的任何一个文章到主屏，从主屏打开时都会访问 [Hux Blog][21] 的主页。\n- `orientation`：终于，我们可以锁定屏幕旋转了（喜极而泣…）\n- `theme_color`/`background_color`：主题色与背景色，用于配置一些可定制的操作系统 UI 以提高用户体验，比如 Android 的状态栏、任务栏等。\n\n这个清单的成员还有很多，比如用于声明「对应原生应用」的 `related_applications` 等等，本文就不一一列举了。作为 PWA 的「户口本」，承载着 web 应用与操作系统集成能力的重任，Web App Manifest 还将在日后不断扩展，以满足 web 应用高速演化的需要。\n\n\n\n### [Service Worker][spec2]\n\n我们原有的整个 Web 应用模型，都是构建在「用户能上网」的前提之下的，所以一离线就只能玩小恐龙了。其实，对于「让 web 应用离线执行」这件事，Service Worker 至少是 web 社区的第三次尝试了。\n\n故事可以追溯到 2007 年的 [Google Gears][48]：为了让自家的 Gmail、Youtube、Google Reader 等 web 应用可以在本地存储数据与离线执行，Google 开发了一个浏览器拓展来增强 web 应用。Google Gears 支持 IE 6、Safari 3、Firefox 1.5 等浏览器；要知道，那一年 Chrome 都还没出生呢。\n\n在 Gears API 中，我们通过向 LocalServer 模块提交一个缓存文件清单来实现离线支持：\n\n```javascript\n// Somewhere in your javascript\nvar localServer = google.gears.factory.create(\"bata.localserver\");\nvar store = localServer.createManagedStore(STORE_NAME);\nstore.manifestUrl = \"manifest.json\"\n```\n```json\n// manifest.json - 假设 JSON 有注释\n{\n　　\"betaManifestVersion\":　1,\n　　\"version\": 　\"1.0\",\n　　\"entries\":　[　\n　　　　{　\"url\": 　\"index.html\"},\n　　　　{　\"url\": 　\"main.js\"}\n　　]\n}\n```\n\n是不是感到很熟悉？好像 [HTML5 规范][spec11]中的 Application Cache 也是类似的东西？\n\n```html\n<html manifest=\"cache.appcache\">\n```\n```\nCACHE MANIFEST\n\nCACHE:\nindex.html\nmain.js\n```\n\n是的，Gears 的 LocalServer 就是后来大家所熟知的 App Cache 的前身，大约从 [2008][spec10] 年开始 W3C 就开始尝试将 Gears 进行标准化了；除了 LocalServer，Gears 中用于提供并行计算能力的 WorkerPool 模块与用于提供本地数据库与 SQL 支持的 Database 模块也分别是日后 Web Worker 与 Web SQL Database（后被废弃）的前身。\n\nHTML5 App Cache 作为第二波「让 web 应用离线执行」的尝试，确实也服务了比如 Google Doc、尤雨溪早年作品 HTML5 Clear、以及一直用 web 应用作为自己 iOS 应用的 FT.com（Financial Times）等不少 web 应用。那么，还有 Service Worker 什么事呢？  \n\n是啊，如果 App Cache 没有被设计得[烂到完全不可编程、无法清理缓存、几乎没有路由机制、出了 Bug 一点救都没有][s12]，可能就真没 Service Worker 什么事了。[App Cache 已经在前不久定稿的 HTML5.1 中被拿掉了，W3C 为了挽救 web 世界真是不惜把自己的脸都打肿了……][s13]\n\n时至今日，我们终于迎来了 Service Worker 的曙光。简单来说，Service Worker 是一个可编程的 Web Worker，它就像一个位于浏览器与网络之间的客户端代理，可以拦截、处理、响应流经的 HTTP 请求；配合随之引入 Cache Storage API，你可以自由管理 HTTP 请求文件粒度的缓存，这使得 Service Worker 可以从缓存中向 web 应用提供资源，即使是在离线的环境下。\n\n\n![](/img/in-post/post-nextgen-web-pwa/sw-sw.png)\n*Service Worker 就像一个运行在客户端的代理*\n\n比如说，我们可以给网页 `foo.html` 注册这么一个 Service Worker，它将劫持由 `foo.html` 发起的一切 HTTP 请求，并统统返回未设置 `Content-Type` 的 `Hello World!`：\n\n```javascript\n// sw.js\nself.onfetch = (e) => {\n  e.respondWith(new Response('Hello World!'))\n}\n```\n\nService Worker 第一次发布于 2014 年的 Google IO 上，目前已处于 W3C 工作草案的状态。其设计吸取了 Application Cache 的失败经验，作为 web 应用的开发者的你有着完全的控制能力；同时，它还借鉴了 Chrome 多年来在 Chrome Extension 上的设计经验（Chrome Background Pages 与 Chrome Event Pages），采用了基于「事件驱动」的唤醒机制，以大幅节省后台计算的能耗。比如上面的 `fetch` 其实就是会唤醒 Service Worker 的事件之一。\n\n![](/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png)\n*Service Worker 的生命周期*\n\n除了类似 `fetch` 这样的功能事件外，Service Worker 还提供了一组生命周期事件，包括安装、激活等等。比如，在 Service Worker 的「安装」事件中，我们可以把 web 应用所需要的资源统统预先下载并缓存到 Cache Storage 中去：\n\n```javascript\n// sw.js\nself.oninstall = (e) => {\n  e.waitUntil(\n    caches.open('installation')\n      .then(cache =>  cache.addAll([\n        './',\n        './styles.css',\n        './script.js'\n      ]))\n  )\n});\n```\n\n这样，当用户离线，网络无法访问时，我们就可以从缓存中启动我们的 web 应用：\n\n```javascript\n//sw.js\nself.onfetch = (e) => {\n  const fetched = fetch(e.request)\n  const cached = caches.match(e.request)\n\n  e.respondWith(\n    fetched.catch(_ => cached)\n  )\n}\n```\n\n可以看出，Service Worker 被设计为一个相对底层（low-level）、高度可编程、子概念众多，也因此异常灵活且强大的 API，故本文只能展示它的冰山一角。出于安全考虑，注册 Service Worker 要求你的 web 应用部署于 HTTPS 协议下，以免利用 Service Worker 的中间人攻击。笔者在今年 GDG 北京的 DevFest 上分享了 [Service Worker 101][b0]，涵盖了 Service Worker 譬如「网络优先」、「缓存优先」、「网络与缓存比赛」这些更复杂的缓存策略、学习资料、以及[示例代码][29]，可以供大家参考。\n\n\n![](/img/in-post/post-nextgen-web-pwa/sw-race.png)\n*Service Worker 的一种缓存策略：让网络请求与读取缓存比赛*\n\n你也可以尝试在支持 PWA 的浏览器中访问笔者的博客 [Hux Blog][21]，感受 Service Worker 的实际效果：所有访问过的页面都会被缓存并允许在离线环境下继续访问，所有未访问过的页面则会在离线环境下展示一个自定义的离线页面。\n\n在笔者看来，**Service Worker 对 PWA 的重要性相当于 `XMLHTTPRequest` 之于 Ajax，媒体查询（Media Query）之于响应式设计，是支撑 PWA 作为「下一代 web 应用模型」的最核心技术。**由于 Service Worker 可以与包括 Indexed DB、Streams 在内的大部分 DOM 无关 API 进行交互，它的潜力简直无可限量。笔者几乎可以断言，Service Worker 将在未来十年里成为 web 客户端技术工程化的兵家必争之地，带来「离线优先（Offline-first）」的架构革命。\n\n\n\n### Push Notification\n\nPWA 推送通知中的「推送」与「通知」，其实使用的是两个不同但又相得益彰的 API：\n\n[Notification API][spec4] 相信大家并不陌生，它负责所有与通知本身相关的机制，比如通知的权限管理、向操作系统发起通知、通知的类型与音效，以及提供通知被点击或关闭时的回调等等，目前国内外的各大网站（尤其在桌面端）都有一定的使用。Notification API 最早应该是在 [2010][22] 年前后由 Chromium 提出[草案][spec7]以 `webkitNotifications` 前缀方式实现；随着 2011 年进入标准化；2012 年在 Safari 6（Mac OSX 10.8+）上获得支持；2015 年 Notification API 成为 [W3C Recommendation][spec8]；2016 年 [Edge 的支持][23]；Web Notifications 已经在桌面浏览器中获得了全面支持（Chrome、Edge、Firefox、Opera、Safari）的成就。\n\n[Push API][spec3] 的出现则让推送服务具备了向 web 应用推送消息的能力，它定义了 web 应用如何向推送服务发起订阅、如何响应推送消息，以及 web 应用、应用服务器与推送服务之间的鉴权与加密机制；由于 Push API 并不依赖 web 应用与浏览器 UI 存活，所以即使是在 web 应用与浏览器未被用户打开的时候，也可以通过后台进程接受推送消息并调用 Notification API 向用户发出通知。值得一提的是，Mac OSX 10.9 Mavericks 与 Safari 7 在 2013 年就发布了自己的私有推送支持，基于 APNS 的 [Safari Push Notifications][24]。\n\n在 PWA 中，我们利用 Service Worker 的后台计算能力结合 Push API 对推送事件进行响应，并通过 Notification API 实现通知的发出与处理：\n\n```javascript\n// sw.js\nself.addEventListener('push', event => {\n  event.waitUntil(\n    // Process the event and display a notification.\n    self.registration.showNotification(\"Hey!\")\n  );\n});\n\nself.addEventListener('notificationclick', event => {  \n  // Do something with the event  \n  event.notification.close();  \n});\n\nself.addEventListener('notificationclose', event => {  \n  // Do something with the event  \n});\n\n```\n\n对于 Push Notification，笔者的几次分享中一直都提的稍微少一些，一是因为 Push API 还处于 Editor Draft 的状态，二是目前浏览器与推送服务间的协议支持还不够成熟：Chrome（与其它基于 Blink 的浏览器）在 Chromium 52 之前只支持基于 Google 私有的 GCM/FCM 服务进行通知推送。不过好消息是，继 Firefox 44 之后，Chrome 52 与 Opera 39 也紧追其后实现了正在由 IETF 进行标准化的 [Web 推送协议（Web Push Protocol）][spec5]。\n\n\n如果你已经在使用 Google 的云服务（比如 Firebase），并且主要面向的是海外用户，那么在 web 应用上支持基于 GCM/FCM 的推送通知并不是一件费力的事情，笔者推荐你阅读一下 Google Developers 的[系列文章][25]，很多国外公司已经玩起来了。\n\n\n\n## 从 Hybrid 到 PWA，从封闭到开放\n\n2008 年，当移动时代来临，[唱衰移动 Web 的声音][q17]开始出现，而浏览器的进化并不能跟上时，来自 Nitobi 的 Brian Leroux 等人创造了 [Phonegap][10]，希望它能以 Polyfill 的形式、弥补目前浏览器与移动设备间的「鸿沟」，从此开启了[混合应用（Hybrid Apps）][26]的时代。\n\n几年间，[Adobe AIR][5]、[Windows Runtime Apps][6]、[Chrome Apps][7]、[Firefox OS][8]、[WebOS][9]、[Cordova/Phonegap][10]、[Electron][11] 以及国内比如微信、淘宝，无数的 Hybrid 方案拔地而起，让 web 开发者可以在继续使用 web 客户端技术的同时，做到一些只有原生应用才能做到的事情，包括访问一些设备与操作系统 API，给用户带来更加 「Appy」 的体验，以及进入 App Store 等等。\n\n![](/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png)\n*众多的 Hybrid 方案*\n\nPWA 作为一个涵盖性术语，与过往的这些或多或少通过私有平台 API 增强 web 应用的尝试最大的不同，在于构成 PWA 的每一项基本技术，都已经或正在被 IETF、ECMA、W3C 或 WHATWG 标准化，不出意外的话，它们都将被纳入开放 web 标准，并在不远的将来得到所有浏览器与全平台的支持。我们终于可以逃出 App Store 封闭的秘密花园，重新回到属于 web 的那片开放自由的大地。\n\n有趣的是，从上文中你也可以发现，组成 PWA 的各项技术的草案正是由上述各种私有方案背后的浏览器厂商或开发者直接贡献或间接影响的。可以说，PWA 的背后并不是某一家或两家公司，而是整个 web 社区与整个 web 规范。**正是因为这种开放与去中心化的力量，使得万维网（World Wide Web）能够成为当今世界上跨平台能力最强、且几乎是唯一一个具备这种跨平台能力的应用平台。**\n\n[「我们相信 Web，是因为相信它是解决设备差异化的终极方案；我们相信，当 Web 在今天做不到一件事的时候，是因为它还没来得及去实现，而不是因为他做不到。而 Phonegap，它的终极目的就是消失在 Web 标准的背后。」][27]\n\n在不丢失 web 的开放灵魂，在不需要依靠 Hybrid 把应用放在 App Store 的前提下，让 web 应用能够渐进式地跳脱出浏览器的标签，变成用户眼中的 App。这是 Alex Russell 在 2015 年提出 PWA 概念的[原委][28]。\n\n而又正因为 web 是一个整体，PWA 可以利用的技术远不止上述的几个而已：Ajax、响应式设计、JavaScript 框架、ECMAScript Next、CSS Next、Houdini、Indexed DB、Device APIs、Web Bluetooth、Web Socket、Web Payment、[孵化][spec6]中的 [Background Sync API][30]、[Streams][spec9]、WebVR……开放 Web 世界 27 年来的发展以及未来的一切，都与 PWA 天作之合。\n\n\n## 鱼与熊掌的兼得\n\n经过几年来的摸索，整个互联网行业仿佛在「Web 应用 vs. 原生应用」这个问题上达成了共识：\n\n- web 应用是鱼：迭代快，获取用户成本低；跨平台强体验弱，开发成本低。**适合拉新**。\n- 原生应用是熊掌：迭代慢，获取用户成本高；跨平台弱体验强，开发成本高。**适合保活**。\n\n要知道，虽然用户花在原生应用上的时间要明显多于 web 应用，但其中[有 80% 的时间是花在前五个应用中的][31]。[调查显示，美国有一半的智能手机用户平均每月新 App 安装量为零][32]，而月均网站访问量却有 100 个，更别提 Google Play 上[有 60% 的应用从未被人下载过了][33]。于是，整个行业的产品策略清一色地**「拿鱼换熊掌」**，比如笔者的老东家阿里旅行（飞猪旅行），web 应用布满阿里系各种渠道，提供「优秀的第一手体验」，等你用的开心了，再引诱你去下载安装原生应用。\n\n![](/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg)\n*原生应用、当代 Web 与 PWA 图片来源: Hux & [Google][i2]*\n\n但是，PWA 的出现，让鱼与熊掌兼得变成了可能 —— 它同时具备了 web 应用与原生应用的优点，有着自己独有的先进性：「浏览器 -> 添加至主屏/安装 -> 具备原生应用体验的 PWA -> 推送通知 -> 具备原生应用体验的 PWA」，PWA 自身就包含着从拉新到保活的闭环。\n\n除此之外，PWA 还继承了 web 应用的另外两大优点：**无需先付出几十兆的下载安装成本即可开始使用**，以及**不需要经过应用超市审核就可以发布新版本**。所以，PWA 可以称得上是一种「流式应用（Streamable App）」与「常青应用（Evergreen App）」\n\n\n## 未来到来了吗\n\n在笔者分享 PWA 的经历中，最不愿意回答的两个问题莫过于「PWA 已经被广泛支持了吗？」以及「PWA 与 ABCDEFG 这些技术方案相比有什么优劣？」，但是这确实是两个逃不开的问题。\n\n### PWA 的支持情况？\n\n当我们说到 PWA 是否被支持时，其实我们在说的是 PWA 背后的几个关键技术都得到支持了没有。以浏览器内核来划分的话，Blink（Chrome、Oprea、Samsung Internet 等）与 Gecko（Firefox）都已经实现了 PWA 所需的所有关键技术（👏👏👏），并已经开始探寻更多的可能性。EdgeHTML（Edge）[简直积极得不能更积极了][34]，所有的特性都已经处于「正在开发中」的[状态][35]。最大的绊脚石仍然来自于 Webkit（Safari），尤其是在 iOS 上，上述的四个 API 都未得到支持，而且由于平台限制，第三方浏览器也无法在 iOS 上支持。（[什么你说 IE？][42]）\n\n不过，也不要气馁，Webkit 不但在它 [2015 年发布的五年计划][36]里提到了 Service Worker，更是已经在最近实现了 Service Worker 所[依赖][41]的 Request、Response 与 Fetch API，还把 Service Worker 与 Web App Manifest 纷纷[列入了「正在考虑」][37]的 API 中；要知道，Webkit 可是把 Web Components 中的 HTML Imports 直接[列到「不考虑」里去了][38]……（其实 Firefox 也是）\n\n更何况，由于 web 社区一直以来所追求的「渐进增强、优雅降级」，一个 PWA 当然可以在 iOS 环境正常执行。[事实上，华盛顿邮报将网站迁移到 PWA 之后发现，不止是 Android，在 iOS 上也获得了 5 倍的活跃度增长][39]，（无论是不是它们之前的网站写得太烂吧），就算 iOS 现在还不支持 PWA 也[不会怎么样][40]，我们更是有理由相信 PWA 会很快在 iOS 上到来。\n\n### PWA vs. Others\n\n贺老（贺师俊）曾说过：「从纯 Web 到纯 Native，之间有许多可能的点」。当考虑移动应用的技术选型时，除了 Web 与原生应用，我们还有各种不同程度的 Hybrid，还有今年爆发的诸多 JS-to-Native 方案。\n\n虽然我在上文中用了「复仇」这样的字眼，不过无论从技术还是商业的角度，我们都没必要把 web 或是 PWA 放到 Native 的对立面去看。它们当然存在竞争关系，但是更多的时候，web-only 与 app-only 的策略都是不完美的，当公司资源足够的时候，我们通常会选择同时开发两者。[当然，无论与不与原生应用对比，PWA 让 web 应用变得体验更好这件事本身是毋庸置疑的。][43]「不谈场景聊技术都是扯淡」，[我们仍然还是需要根据自己产品与团队的情况来决定对应的技术选型与平台策略，只是 PWA 让 web 应用在面对选型考验时更加强势了而已。][44]\n\n\n![](/img/in-post/post-nextgen-web-pwa/qcon-trend.png)\n*众多的技术选型，以及笔者的一种猜测*\n\n笔者不负责任得做一些猜测：虽然[重量级的 Hybrid 架构与基础设施][45]仍是目前不少场景下最优的解决方案；但是随着移动设备本身的硬件性能提升与新技术的成熟与普及，JS-to-Native 与以 PWA 为首的纯 web 应用，将分别从两个方向挤压 Hybrid 的生存空间，消化当前 Hybrid 架构主要解决的问题；前者将逐渐演化为类似 Xarmarin 这样针对跨平台原生应用开发的解决方案；后者将显著降低当前 Hybrid 架构的容器开发与部署成本，将 Hybrid 返璞归真为简单的 webview 调用。\n\n这种猜测当然不是没有依据的瞎猜，比如前者可以参考阿里巴巴集团级别迁移 Weex 的战略与微信小程序的 roadmap；后者则可以参考当前 Cordova 与 Ionic 两大 Hybrid 社区对 PWA 的热烈反响。\n\n### PWA in China\n\n看看 Google 官方宣传较多的 PWA [案例][47]就会发现，FlipKart、Housing.com 来自印度；Lyft、华盛顿邮报来自北美；唯一来自中国的 AliExpress 主要开展的则是海外业务。\n\n由于中国的特殊性，笔者在[第一次][46]聊到 PWA 时难免表现出了一定程度的悲观：\n\n- 国内较重视 iOS，而 iOS 目前还不支持 PWA。\n- 国内的 Android 实为「安卓」，不自带 Chrome 是一，可能还会有其他兼容问题。\n- 国内厂商可能并不会像三星那样对推动自家浏览器支持 PWA 那么感兴趣。\n- 依赖 GCM 推送的通知不可用，Web Push Protocol 还没有国内的推送服务实现。\n- 国内 webview 环境较为复杂（比如微信），黑科技比较多。\n\n反观印度，由于 Google 服务健全、标配 Chrome 的 Android 手机市占率非常高，PWA 的用户达到率简直直逼 100%，也难免获得无数好评与支持了。**笔者奢望着本文能对推动 PWA 的国内环境有一定的贡献。**不过无论如何，PWA 在国内的春天可能的确会来得稍微晚一点了。\n\n\n## 结语\n\n「[我们信仰 Web，不仅仅在于软件、软件平台与单纯的技术][q97]，还在于[『任何人，在任何时间任何地点，都可以在万维网上发布任何信息，并被世界上的任何一个人所访问到。』而这才是 web 的最为革命之处，堪称我们人类，作为一个物种的一次进化。][27]」\n\n请不要让 web 再[继续离我们远去][49]，浏览器厂商们已经重新走到了一起，而下一棒将是交到我们 web 应用开发者的手上。[乔布斯曾相信 web 应用才移动应用的未来][50]，那就让我们用代码证明给这个世界看吧。\n\n**让我们的用户，也像我们这般热爱 web 吧。**\n\n黄玄，于 12 月的北京。\n\n---\n\n*注：在笔者撰文期间，Google 在 Google China Developers Days 上宣布了 developers.google.cn 域名的启用，方便国内开发者访问。对于文中所有链向 developers.google.com 的参考文献，应该都可以在 cn 站点中找到。*\n\n\n[1]: http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/ \"Isomorphic JavaScript: The Future of Web Apps\"\n\n[2]: https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.unrzyz3b2 \"Universal JavaScript\"\n\n[3]: https://en.wikipedia.org/wiki/Ajax_(programming) \"Ajax - Wikipedia\"\n\n[4]: https://en.wikipedia.org/wiki/Responsive_web_design \"Responsive Web Design - Wikipedia\"\n\n[5]: http://www.adobe.com/products/air.html \"Adobe AIR Application\"\n\n[6]: https://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx \"Windows Runtime JS API\"\n\n[7]: https://developer.chrome.com/extensions/apps \"Chrome Packaged Apps\"\n\n[8]: https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS \"Firefox OS Packaged Apps\"\n\n[9]: http://www.openwebosproject.org/ \"Open webOS\"\n\n[10]: https://cordova.apache.org/ \"Apache Cordova\"\n\n[11]: http://electron.atom.io/ \"Electron\"\n\n[12]: https://developer.chrome.com/extensions/manifest \"Chrome Apps Manifest\"\n\n[13]: https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest \"Firefox OS App Manifest\"\n\n[14]: https://www.w3.org/TR/2013/WD-appmanifest-20131217/ \"Manifest for web apps and bookmarks - First Public Working Draft\"\n\n[15]: https://youtu.be/m2a9hlUFRhg \"Keynote (Chrome Dev Summit 2015)\"\n\n[16]: https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en \"Web App Install Banners - Google Developer\"\n\n[17]: https://en.wikipedia.org/wiki/Flipkart \"Flipkart - wikipedia\"\n\n[18]: https://youtu.be/eI3B6x0fw9s \"Keynote (Chrome Dev Summit 2016)\"\n\n[19]: http://cordova.apache.org/docs/en/6.x/config_ref/index.html \"Config.xml - Apache Cordova\"\n\n[20]: https://msdn.microsoft.com/en-us/library/dn320426%28v=vs.85%29.aspx \"Browser configuration schema reference - MSDN\"\n\n[21]: https://huangxuan.me \"Hux Blog\"\n\n[22]: https://www.html5rocks.com/en/tutorials/notifications/quick/ \"Using the Notification API\"\n\n[23]: https://blogs.windows.com/msedgedev/2016/05/16/web-notifications-microsoft-edge/#2VBm890EjvAvUcgE.97\n\n[24]: https://developer.apple.com/notifications/safari-push-notifications/ \"Safari Push Notifications\"\n\n[25]: https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/ \"Web Push Notifications - Google Developer\"\n\n[26]: https://en.wikipedia.org/wiki/Progressive_web_app#Hybrid_Apps\n\n[27]: http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/ \"PhoneGap Beliefs, Goals, and Philosophy\"\n\n[28]: https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/ \"Progressive Web Apps: Escaping Tabs Without Losing Our Soul\"\n\n[29]: https://github.com/Huxpro/sw-101-gdgdf\n\n[30]: developers.google.com/web/updates/2015/12/background-sync \"Background Sync - Google Developers\"\n\n[31]: http://marketingland.com/report-mobile-users-spend-80-percent-time-just-five-apps-116858 \"Report: Mobile Users Spend 80 Percent Of Time In Just Five Apps\"\n\n[32]: http://www.recode.net/2016/9/16/12933780/average-app-downloads-per-month-comscore \"Half of U.S. smartphone users download zero apps per month\"\n\n[33]: https://youtu.be/EUthgV-U05w \"AdWords for App Promotion - Google\"\n\n[34]: https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/ \"The Progress of Web Apps - MSEdgeDev Blog\"\n\n[35]: https://developer.microsoft.com/en-us/microsoft-edge/platform/status/ \"Microsoft Edge web platform features status\"\n\n[36]: https://trac.webkit.org/wiki/FiveYearPlanFall2015\n\n[37]: https://webkit.org/status/ \"Webkit Feature Status\"\n\n[38]: https://webkit.org/status/#specification-web-components \"HTML Imports - Not Considering\"\n\n[39]: https://cloudfour.com/thinks/why-does-the-washington-posts-progressive-web-app-increase-engagement-on-ios/ \"Why does The Washington Post’s Progressive Web App increase engagement on iOS?\"\n\n[40]: https://cloudfour.com/thinks/ios-doesnt-support-progressive-web-apps-so-what/ \"iOS doesn’t support Progressive Web Apps, so what?\"\n\n[41]: https://jakearchibald.github.io/isserviceworkerready/ \"Is Service Worker Ready?\"\n\n[42]: https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support \"Internet Explorer End of Support\"\n\n[43]: https://cloudfour.com/thinks/progressive-web-apps-simply-make-sense/?utm_source=mobilewebweekly&utm_medium=email#fn-4857-1 \"Progressive Web Apps Simply Make Sense\"\n\n[44]: https://medium.com/@owencm/the-surprising-tradeoff-at-the-center-of-question-whether-to-build-an-native-or-web-app-d2ad00c40fb2#.ym83ct2ax \"The surprising tradeoff at the center of the question whether to build a Native or Web App\"\n\n[45]: http://zhihu.com/question/31316032/answer/75236718\n\n[46]: https://www.zhihu.com/question/46690207/answer/104851767\n\n[47]: https://developers.google.com/web/showcase/ \"Case Studies - Google Developers\"\n\n[48]: https://en.wikipedia.org/wiki/Google_Gears \"Gears - Wikipedia\"\n\n[49]: https://zhuanlan.zhihu.com/p/22561084 \"Web 在继续离我们远去\"\n\n[50]: youtu.be/y1B2c3ZD9fk?t=1h14m48s \"WWDC 2017\"\n\n\n[spec1]: https://w3c.github.io/manifest/#use-cases-and-requirements \"Web App Manifest\"\n\n[spec2]: https://w3c.github.io/ServiceWorker/ \"Service Worker\"\n\n[spec3]: http://w3c.github.io/push-api/ \"Push API\"\n\n[spec4]: https://notifications.spec.whatwg.org/ \"Notification API\"\n\n[spec5]: https://tools.ietf.org/html/draft-ietf-webpush-protocol-12 \"Web Push Protocol\"\n\n[spec6]: https://wicg.github.io/BackgroundSync/spec/ \"Web Background Synchronization - WICG\"\n\n[spec7]: http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification \"API Specification - The Chromium Projects\"\n\n[spec8]: https://www.w3.org/TR/notifications/ \"Web Notifications - W3C\"\n\n[spec9]: https://streams.spec.whatwg.org/ \"Streams\"\n\n[spec10]: https://www.w3.org/TR/offline-webapps/ \"Offline Web Applications\"\n\n[spec11]: https://www.w3.org/TR/2011/WD-html5-20110525/offline.html \"HTML5 5.6 Offline Web Applications\"\n\n\n[i1]: http://appleinsider.com/articles/08/10/03/latest_iphone_software_supports_full_screen_web_apps.html\n\n[i2]: https://developers.google.com/web/events/pwaroadshow/\n\n[i3]: https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41 \"Building Flipkart Lite: A Progressive Web App\"\n\n[i4]: https://twitter.com/adityapunjani\n\n\n[q37]: https://huangxuan.me/pwa-qcon2016/#/37 \"PWA@QCon2016 #37\"\n\n[q17]: https://huangxuan.me/pwa-qcon2016/#/17 \"PWA@QCon2016 #17\"\n\n[q97]: https://huangxuan.me/pwa-qcon2016/#/99 \"PWA@QCon2016 #97\"\n\n[s12]: https://huangxuan.me/sw-101-gdgdf/#/12 \"SW-101@DevFest #12\"\n\n[s13]: https://huangxuan.me/sw-101-gdgdf/#/13 \"SW-101@DevFest #13\"\n\n[b0]: https://huangxuan.me/2016/11/20/sw-101-gdgdf/\n","source":"_posts/2017-02-09-nextgen-web-pwa.markdown","raw":"---\nlayout:     post\ntitle:      \"下一代 Web 应用模型 —— Progressive Web App\"\nsubtitle:   \"The Next Generation Application Model For The Web - Progressive Web App\"\ndate:       2017-02-09 12:00:00\nauthor:     \"Hux\"\nheader-img: \"img/post-bg-nextgen-web-pwa.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - 前端开发\n    - JavaScript\n    - PWA\n---\n\n\n\n> 本文首发于[《程序员》](http://geek.csdn.net/news/detail/135595)，发布于 [Hux Blog](https://huangxuan.me)、[前端外刊评论](https://zhuanlan.zhihu.com/FrontendMagazine)，转载请保留链接 ;)\n\n\n## 下一代 Web 应用？\n\n近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。\n\n包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 web 应用需求的前端框架及其生态，也涌现出了像[同构 JavaScript][1]与[通用 JavaScript 应用][2]这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 web 应用架构方式，可以说是百花齐放。\n\n但是，Web 应用在移动时代并没有达到其在桌面设备上流行的程度。究其原因，尽管上述的各种方案已经充分利用了现有的 JavaScript 计算能力、CSS 布局能力、HTTP 缓存与浏览器 API 对当代基于 [Ajax][3] 与[响应式设计][4]的 web 应用模型的性能与体验带来了工程角度的巨大突破，我们仍然无法在不借助原生程序辅助浏览器的前提下突破 web 平台本身对 web 应用固有的桎梏：**客户端软件（即网页）需要下载所带来的网络延迟；与 Web 应用依赖浏览器作为入口所带来的体验问题。**\n\n![](/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg)\n*Web 与原生应用在移动平台上的使用时长对比 [图片来源: Google][i2]*\n\n在桌面设备上，由于网络条件稳定，屏幕尺寸充分，交互方式趋向于多任务，这两点造成的负面影响对比 web 应用免于安装、随叫随到、无需更新等优点，瑕不掩瑜。但是在移动时代，脆弱的网络连接与全新的人机交互方式使得这两个问题被无限放大，严重制约了 web 应用在移动平台的发展。在用户眼里，原生应用不会出现「白屏」，清一色都摆在主屏幕上；而 web 应用则是浏览器这个应用中的应用，使用起来并不方便，而且加载也比原生应用要慢。\n\nProgressive Web Apps（以下简称 PWA）以及构成 PWA 的一系列关键技术的出现，终于让我们看到了彻底解决这两个平台级别问题的曙光：能够显著提高应用加载速度、甚至让 web 应用可以在离线环境使用的 Service Worker 与 Cache Storage；用于描述 web 应用元数据（metadata）、让 web 应用能够像原生应用一样被添加到主屏、全屏执行的 Web App Manifest；以及进一步提高 web 应用与操作系统集成能力，让 web 应用能在未被激活时发起推送通知的 Push API 与 Notification API 等等。\n\n将这些技术组合在一起会是怎样的效果呢？「印度阿里巴巴」 —— [Flipkart][17] 在 2015 年一度关闭了自己的移动端网站，却在年底发布了现在最为人津津乐道的 PWA 案例 *FlipKart Lite*，成为世界上第一个支撑大规模业务的 PWA。发布的一周后它就亮相于 [Chrome Dev Summit 2015][15] 上，笔者当时就被惊艳到了。为了方便各媒介上的读者观看，笔者做了几幅图方便给大家介绍：\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg)\n*图片来源: Hux & [Medium.com][i3]*\n\n当浏览器发现用户[需要][16] Flipkart Lite 时，它就会提示用户「嘿，你可以把它添加至主屏哦」（用户也可以手动添加）。这样，Flipkart Lite 就会像原生应用一样在主屏上留下一个自定义的 icon 作为入口；与一般的书签不同，当用户点击 icon 时，Flipkat Lite 将直接全屏打开，不再受困于浏览器的 UI 中，而且有自己的启动屏效果。\n\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg)\n*图片来源: Hux & [Medium.com][i3]*\n\n更强大的是，在无法访问网络时，Flipkart Lite 可以像原生应用一样照常执行，还会很骚气的变成黑白色；不但如此，曾经访问过的商品都会被缓存下来得以在离线时继续访问。在商品降价、促销等时刻，Flipkart Lite 会像原生应用一样发起推送通知，吸引用户回到应用。\n\n**无需担心网络延迟；有着独立入口与独立的保活机制。**之前两个问题的一并解决，宣告着 web 应用在移动设备上的浴火重生：满足 PWA 模型的 web 应用，将逐渐成为移动操作系统的一等公民，并将向原生应用发起挑战与「复仇」。\n\n更令笔者兴奋的是，就在今年 11 月的 [Chrome Dev Summit 2016][18] 上，Chrome 的工程 VP Darin Fisher 介绍了 Chrome 团队正在做的一些实验：把「添加至主屏」重命名为「安装」，被安装的 PWA 不再仅以 widget 的形式显示在桌面上，而是真正做到与所有原生应用平级，一样被收纳进应用抽屉（App Drawer）里，一样出现在系统设置中 🎉🎉🎉。\n\n![](/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg)\n*图片来源: Hux & [@adityapunjani][i4]*\n\n图中从左到右分别为：类似原生应用的安装界面；被收纳在应用抽屉里的 Flipkart Lite 与 Hux Blog；设置界面中并列出现的 Flipkart 原生应用与 Flipkart Lite PWA （可以看到 PWA 巨大的体积优势）\n\n**笔者相信，PWA 模型将继约 20 年前横空出世的 Ajax 与约 10 年前风靡移动互联网的响应式设计之后，掀起 web 应用模型的第三次根本性革命，将 web 应用带进一个全新的时代。**\n\n## PWA 关键技术的前世今生\n\n### [Web App Manifest][spec1]\n\nWeb App Manifest，即通过一个清单文件向浏览器暴露 web 应用的元数据，包括名字、icon 的 URL 等，以备浏览器使用，比如在添加至主屏或推送通知时暴露给操作系统，从而增强 web 应用与操作系统的集成能力。\n\n让 web 应用在移动设备上的体验更接近原生应用的尝试其实早在 2008 年的 [iOS 1.1.3 与 iOS 2.1.0 ][q37]时就开始了，它们分别为 web 应用增加了对自定义 icon 和全屏打开的支持。\n\n![](/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif)\n*图片来源: [appleinsider.com][i1]*\n\n但是很快，随着越来越多的私有平台通过 `<meta>`/`<link>` 标签来为 web 应用添加「私货」，`<head>` 很快就被塞满了：\n\n```html\n<!-- Add to homescreen for Safari on iOS -->\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-title\" content=\"Lighten\">\n\n<!-- Add to homescreen for Chrome on Android -->\n<meta name=\"mobile-web-app-capable\" content=\"yes\">\n<mate name=\"theme-color\" content=\"#000000\">\n\n<!-- Icons for iOS and Android Chrome M31~M38 -->\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"images/touch/apple-touch-icon-144x144-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"images/touch/apple-touch-icon-114x114-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"images/touch/apple-touch-icon-72x72-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"images/touch/apple-touch-icon-57x57-precomposed.png\">\n\n<!-- Icon for Android Chrome, recommended -->\n<link rel=\"shortcut icon\" sizes=\"196x196\" href=\"images/touch/touch-icon-196x196.png\">\n\n<!-- Tile icon for Win8 (144x144 + tile color) -->\n<meta name=\"msapplication-TileImage\" content=\"images/touch/ms-touch-icon-144x144-precomposed.png\">\n<meta name=\"msapplication-TileColor\" content=\"#3372DF\">\n\n<!-- Generic Icon -->\n<link rel=\"shortcut icon\" href=\"images/touch/touch-icon-57x57.png\">\n```\n\n显然，这种做法并不优雅：分散又重复的元数据定义多余且难以维持同步，与 html 耦合在一起也加重了浏览器检查元数据未来变动的成本。与此同时，社区里开始出现使用 manifest 文件以中心化地描述元数据的方案，比如 [Chrome Extension、 Chrome Hosted Web Apps (2010)][12] 与 [Firefox OS App Manifest (2011)][13] 使用 JSON；[Cordova][19] 与 [Windows Pinned Site][20] 使用 XML；\n\n2013 年，W3C WebApps 工作组开始对基于 JSON 的 Manifest 进行标准化，于同年年底发布[第一份公开 Working Draft][14]，并逐渐演化成为今天的 W3C Web App Manifest：\n\n```json\n{\n  \"short_name\": \"Manifest Sample\",\n  \"name\": \"Web Application Manifest Sample\",\n  \"icons\": [{\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n   }],\n  \"scope\": \"/sample/\",\n  \"start_url\": \"/sample/index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"landscape\"\n  \"theme_color\": \"#000\",\n  \"background_color\": \"#fff\",\n}\n```\n```html\n<!-- document -->\n<link rel=\"manifest\" href=\"/manifest.json\">\n```\n\n诸如 `name`、`icons`、`display` 都是我们比较熟悉的，而大部分新增的成员则为 web 应用带来了一系列以前 web 应用想做却做不到（或在之前只能靠 hack）的新特性：\n\n- `scope`：定义了 web 应用的浏览作用域，比如作用域外的 URL 就会打开浏览器而不会在当前 PWA 里继续浏览。\n- `start_url`：定义了一个 PWA 的入口页面。比如说你添加 [Hux Blog][21] 的任何一个文章到主屏，从主屏打开时都会访问 [Hux Blog][21] 的主页。\n- `orientation`：终于，我们可以锁定屏幕旋转了（喜极而泣…）\n- `theme_color`/`background_color`：主题色与背景色，用于配置一些可定制的操作系统 UI 以提高用户体验，比如 Android 的状态栏、任务栏等。\n\n这个清单的成员还有很多，比如用于声明「对应原生应用」的 `related_applications` 等等，本文就不一一列举了。作为 PWA 的「户口本」，承载着 web 应用与操作系统集成能力的重任，Web App Manifest 还将在日后不断扩展，以满足 web 应用高速演化的需要。\n\n\n\n### [Service Worker][spec2]\n\n我们原有的整个 Web 应用模型，都是构建在「用户能上网」的前提之下的，所以一离线就只能玩小恐龙了。其实，对于「让 web 应用离线执行」这件事，Service Worker 至少是 web 社区的第三次尝试了。\n\n故事可以追溯到 2007 年的 [Google Gears][48]：为了让自家的 Gmail、Youtube、Google Reader 等 web 应用可以在本地存储数据与离线执行，Google 开发了一个浏览器拓展来增强 web 应用。Google Gears 支持 IE 6、Safari 3、Firefox 1.5 等浏览器；要知道，那一年 Chrome 都还没出生呢。\n\n在 Gears API 中，我们通过向 LocalServer 模块提交一个缓存文件清单来实现离线支持：\n\n```javascript\n// Somewhere in your javascript\nvar localServer = google.gears.factory.create(\"bata.localserver\");\nvar store = localServer.createManagedStore(STORE_NAME);\nstore.manifestUrl = \"manifest.json\"\n```\n```json\n// manifest.json - 假设 JSON 有注释\n{\n　　\"betaManifestVersion\":　1,\n　　\"version\": 　\"1.0\",\n　　\"entries\":　[　\n　　　　{　\"url\": 　\"index.html\"},\n　　　　{　\"url\": 　\"main.js\"}\n　　]\n}\n```\n\n是不是感到很熟悉？好像 [HTML5 规范][spec11]中的 Application Cache 也是类似的东西？\n\n```html\n<html manifest=\"cache.appcache\">\n```\n```\nCACHE MANIFEST\n\nCACHE:\nindex.html\nmain.js\n```\n\n是的，Gears 的 LocalServer 就是后来大家所熟知的 App Cache 的前身，大约从 [2008][spec10] 年开始 W3C 就开始尝试将 Gears 进行标准化了；除了 LocalServer，Gears 中用于提供并行计算能力的 WorkerPool 模块与用于提供本地数据库与 SQL 支持的 Database 模块也分别是日后 Web Worker 与 Web SQL Database（后被废弃）的前身。\n\nHTML5 App Cache 作为第二波「让 web 应用离线执行」的尝试，确实也服务了比如 Google Doc、尤雨溪早年作品 HTML5 Clear、以及一直用 web 应用作为自己 iOS 应用的 FT.com（Financial Times）等不少 web 应用。那么，还有 Service Worker 什么事呢？  \n\n是啊，如果 App Cache 没有被设计得[烂到完全不可编程、无法清理缓存、几乎没有路由机制、出了 Bug 一点救都没有][s12]，可能就真没 Service Worker 什么事了。[App Cache 已经在前不久定稿的 HTML5.1 中被拿掉了，W3C 为了挽救 web 世界真是不惜把自己的脸都打肿了……][s13]\n\n时至今日，我们终于迎来了 Service Worker 的曙光。简单来说，Service Worker 是一个可编程的 Web Worker，它就像一个位于浏览器与网络之间的客户端代理，可以拦截、处理、响应流经的 HTTP 请求；配合随之引入 Cache Storage API，你可以自由管理 HTTP 请求文件粒度的缓存，这使得 Service Worker 可以从缓存中向 web 应用提供资源，即使是在离线的环境下。\n\n\n![](/img/in-post/post-nextgen-web-pwa/sw-sw.png)\n*Service Worker 就像一个运行在客户端的代理*\n\n比如说，我们可以给网页 `foo.html` 注册这么一个 Service Worker，它将劫持由 `foo.html` 发起的一切 HTTP 请求，并统统返回未设置 `Content-Type` 的 `Hello World!`：\n\n```javascript\n// sw.js\nself.onfetch = (e) => {\n  e.respondWith(new Response('Hello World!'))\n}\n```\n\nService Worker 第一次发布于 2014 年的 Google IO 上，目前已处于 W3C 工作草案的状态。其设计吸取了 Application Cache 的失败经验，作为 web 应用的开发者的你有着完全的控制能力；同时，它还借鉴了 Chrome 多年来在 Chrome Extension 上的设计经验（Chrome Background Pages 与 Chrome Event Pages），采用了基于「事件驱动」的唤醒机制，以大幅节省后台计算的能耗。比如上面的 `fetch` 其实就是会唤醒 Service Worker 的事件之一。\n\n![](/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png)\n*Service Worker 的生命周期*\n\n除了类似 `fetch` 这样的功能事件外，Service Worker 还提供了一组生命周期事件，包括安装、激活等等。比如，在 Service Worker 的「安装」事件中，我们可以把 web 应用所需要的资源统统预先下载并缓存到 Cache Storage 中去：\n\n```javascript\n// sw.js\nself.oninstall = (e) => {\n  e.waitUntil(\n    caches.open('installation')\n      .then(cache =>  cache.addAll([\n        './',\n        './styles.css',\n        './script.js'\n      ]))\n  )\n});\n```\n\n这样，当用户离线，网络无法访问时，我们就可以从缓存中启动我们的 web 应用：\n\n```javascript\n//sw.js\nself.onfetch = (e) => {\n  const fetched = fetch(e.request)\n  const cached = caches.match(e.request)\n\n  e.respondWith(\n    fetched.catch(_ => cached)\n  )\n}\n```\n\n可以看出，Service Worker 被设计为一个相对底层（low-level）、高度可编程、子概念众多，也因此异常灵活且强大的 API，故本文只能展示它的冰山一角。出于安全考虑，注册 Service Worker 要求你的 web 应用部署于 HTTPS 协议下，以免利用 Service Worker 的中间人攻击。笔者在今年 GDG 北京的 DevFest 上分享了 [Service Worker 101][b0]，涵盖了 Service Worker 譬如「网络优先」、「缓存优先」、「网络与缓存比赛」这些更复杂的缓存策略、学习资料、以及[示例代码][29]，可以供大家参考。\n\n\n![](/img/in-post/post-nextgen-web-pwa/sw-race.png)\n*Service Worker 的一种缓存策略：让网络请求与读取缓存比赛*\n\n你也可以尝试在支持 PWA 的浏览器中访问笔者的博客 [Hux Blog][21]，感受 Service Worker 的实际效果：所有访问过的页面都会被缓存并允许在离线环境下继续访问，所有未访问过的页面则会在离线环境下展示一个自定义的离线页面。\n\n在笔者看来，**Service Worker 对 PWA 的重要性相当于 `XMLHTTPRequest` 之于 Ajax，媒体查询（Media Query）之于响应式设计，是支撑 PWA 作为「下一代 web 应用模型」的最核心技术。**由于 Service Worker 可以与包括 Indexed DB、Streams 在内的大部分 DOM 无关 API 进行交互，它的潜力简直无可限量。笔者几乎可以断言，Service Worker 将在未来十年里成为 web 客户端技术工程化的兵家必争之地，带来「离线优先（Offline-first）」的架构革命。\n\n\n\n### Push Notification\n\nPWA 推送通知中的「推送」与「通知」，其实使用的是两个不同但又相得益彰的 API：\n\n[Notification API][spec4] 相信大家并不陌生，它负责所有与通知本身相关的机制，比如通知的权限管理、向操作系统发起通知、通知的类型与音效，以及提供通知被点击或关闭时的回调等等，目前国内外的各大网站（尤其在桌面端）都有一定的使用。Notification API 最早应该是在 [2010][22] 年前后由 Chromium 提出[草案][spec7]以 `webkitNotifications` 前缀方式实现；随着 2011 年进入标准化；2012 年在 Safari 6（Mac OSX 10.8+）上获得支持；2015 年 Notification API 成为 [W3C Recommendation][spec8]；2016 年 [Edge 的支持][23]；Web Notifications 已经在桌面浏览器中获得了全面支持（Chrome、Edge、Firefox、Opera、Safari）的成就。\n\n[Push API][spec3] 的出现则让推送服务具备了向 web 应用推送消息的能力，它定义了 web 应用如何向推送服务发起订阅、如何响应推送消息，以及 web 应用、应用服务器与推送服务之间的鉴权与加密机制；由于 Push API 并不依赖 web 应用与浏览器 UI 存活，所以即使是在 web 应用与浏览器未被用户打开的时候，也可以通过后台进程接受推送消息并调用 Notification API 向用户发出通知。值得一提的是，Mac OSX 10.9 Mavericks 与 Safari 7 在 2013 年就发布了自己的私有推送支持，基于 APNS 的 [Safari Push Notifications][24]。\n\n在 PWA 中，我们利用 Service Worker 的后台计算能力结合 Push API 对推送事件进行响应，并通过 Notification API 实现通知的发出与处理：\n\n```javascript\n// sw.js\nself.addEventListener('push', event => {\n  event.waitUntil(\n    // Process the event and display a notification.\n    self.registration.showNotification(\"Hey!\")\n  );\n});\n\nself.addEventListener('notificationclick', event => {  \n  // Do something with the event  \n  event.notification.close();  \n});\n\nself.addEventListener('notificationclose', event => {  \n  // Do something with the event  \n});\n\n```\n\n对于 Push Notification，笔者的几次分享中一直都提的稍微少一些，一是因为 Push API 还处于 Editor Draft 的状态，二是目前浏览器与推送服务间的协议支持还不够成熟：Chrome（与其它基于 Blink 的浏览器）在 Chromium 52 之前只支持基于 Google 私有的 GCM/FCM 服务进行通知推送。不过好消息是，继 Firefox 44 之后，Chrome 52 与 Opera 39 也紧追其后实现了正在由 IETF 进行标准化的 [Web 推送协议（Web Push Protocol）][spec5]。\n\n\n如果你已经在使用 Google 的云服务（比如 Firebase），并且主要面向的是海外用户，那么在 web 应用上支持基于 GCM/FCM 的推送通知并不是一件费力的事情，笔者推荐你阅读一下 Google Developers 的[系列文章][25]，很多国外公司已经玩起来了。\n\n\n\n## 从 Hybrid 到 PWA，从封闭到开放\n\n2008 年，当移动时代来临，[唱衰移动 Web 的声音][q17]开始出现，而浏览器的进化并不能跟上时，来自 Nitobi 的 Brian Leroux 等人创造了 [Phonegap][10]，希望它能以 Polyfill 的形式、弥补目前浏览器与移动设备间的「鸿沟」，从此开启了[混合应用（Hybrid Apps）][26]的时代。\n\n几年间，[Adobe AIR][5]、[Windows Runtime Apps][6]、[Chrome Apps][7]、[Firefox OS][8]、[WebOS][9]、[Cordova/Phonegap][10]、[Electron][11] 以及国内比如微信、淘宝，无数的 Hybrid 方案拔地而起，让 web 开发者可以在继续使用 web 客户端技术的同时，做到一些只有原生应用才能做到的事情，包括访问一些设备与操作系统 API，给用户带来更加 「Appy」 的体验，以及进入 App Store 等等。\n\n![](/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png)\n*众多的 Hybrid 方案*\n\nPWA 作为一个涵盖性术语，与过往的这些或多或少通过私有平台 API 增强 web 应用的尝试最大的不同，在于构成 PWA 的每一项基本技术，都已经或正在被 IETF、ECMA、W3C 或 WHATWG 标准化，不出意外的话，它们都将被纳入开放 web 标准，并在不远的将来得到所有浏览器与全平台的支持。我们终于可以逃出 App Store 封闭的秘密花园，重新回到属于 web 的那片开放自由的大地。\n\n有趣的是，从上文中你也可以发现，组成 PWA 的各项技术的草案正是由上述各种私有方案背后的浏览器厂商或开发者直接贡献或间接影响的。可以说，PWA 的背后并不是某一家或两家公司，而是整个 web 社区与整个 web 规范。**正是因为这种开放与去中心化的力量，使得万维网（World Wide Web）能够成为当今世界上跨平台能力最强、且几乎是唯一一个具备这种跨平台能力的应用平台。**\n\n[「我们相信 Web，是因为相信它是解决设备差异化的终极方案；我们相信，当 Web 在今天做不到一件事的时候，是因为它还没来得及去实现，而不是因为他做不到。而 Phonegap，它的终极目的就是消失在 Web 标准的背后。」][27]\n\n在不丢失 web 的开放灵魂，在不需要依靠 Hybrid 把应用放在 App Store 的前提下，让 web 应用能够渐进式地跳脱出浏览器的标签，变成用户眼中的 App。这是 Alex Russell 在 2015 年提出 PWA 概念的[原委][28]。\n\n而又正因为 web 是一个整体，PWA 可以利用的技术远不止上述的几个而已：Ajax、响应式设计、JavaScript 框架、ECMAScript Next、CSS Next、Houdini、Indexed DB、Device APIs、Web Bluetooth、Web Socket、Web Payment、[孵化][spec6]中的 [Background Sync API][30]、[Streams][spec9]、WebVR……开放 Web 世界 27 年来的发展以及未来的一切，都与 PWA 天作之合。\n\n\n## 鱼与熊掌的兼得\n\n经过几年来的摸索，整个互联网行业仿佛在「Web 应用 vs. 原生应用」这个问题上达成了共识：\n\n- web 应用是鱼：迭代快，获取用户成本低；跨平台强体验弱，开发成本低。**适合拉新**。\n- 原生应用是熊掌：迭代慢，获取用户成本高；跨平台弱体验强，开发成本高。**适合保活**。\n\n要知道，虽然用户花在原生应用上的时间要明显多于 web 应用，但其中[有 80% 的时间是花在前五个应用中的][31]。[调查显示，美国有一半的智能手机用户平均每月新 App 安装量为零][32]，而月均网站访问量却有 100 个，更别提 Google Play 上[有 60% 的应用从未被人下载过了][33]。于是，整个行业的产品策略清一色地**「拿鱼换熊掌」**，比如笔者的老东家阿里旅行（飞猪旅行），web 应用布满阿里系各种渠道，提供「优秀的第一手体验」，等你用的开心了，再引诱你去下载安装原生应用。\n\n![](/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg)\n*原生应用、当代 Web 与 PWA 图片来源: Hux & [Google][i2]*\n\n但是，PWA 的出现，让鱼与熊掌兼得变成了可能 —— 它同时具备了 web 应用与原生应用的优点，有着自己独有的先进性：「浏览器 -> 添加至主屏/安装 -> 具备原生应用体验的 PWA -> 推送通知 -> 具备原生应用体验的 PWA」，PWA 自身就包含着从拉新到保活的闭环。\n\n除此之外，PWA 还继承了 web 应用的另外两大优点：**无需先付出几十兆的下载安装成本即可开始使用**，以及**不需要经过应用超市审核就可以发布新版本**。所以，PWA 可以称得上是一种「流式应用（Streamable App）」与「常青应用（Evergreen App）」\n\n\n## 未来到来了吗\n\n在笔者分享 PWA 的经历中，最不愿意回答的两个问题莫过于「PWA 已经被广泛支持了吗？」以及「PWA 与 ABCDEFG 这些技术方案相比有什么优劣？」，但是这确实是两个逃不开的问题。\n\n### PWA 的支持情况？\n\n当我们说到 PWA 是否被支持时，其实我们在说的是 PWA 背后的几个关键技术都得到支持了没有。以浏览器内核来划分的话，Blink（Chrome、Oprea、Samsung Internet 等）与 Gecko（Firefox）都已经实现了 PWA 所需的所有关键技术（👏👏👏），并已经开始探寻更多的可能性。EdgeHTML（Edge）[简直积极得不能更积极了][34]，所有的特性都已经处于「正在开发中」的[状态][35]。最大的绊脚石仍然来自于 Webkit（Safari），尤其是在 iOS 上，上述的四个 API 都未得到支持，而且由于平台限制，第三方浏览器也无法在 iOS 上支持。（[什么你说 IE？][42]）\n\n不过，也不要气馁，Webkit 不但在它 [2015 年发布的五年计划][36]里提到了 Service Worker，更是已经在最近实现了 Service Worker 所[依赖][41]的 Request、Response 与 Fetch API，还把 Service Worker 与 Web App Manifest 纷纷[列入了「正在考虑」][37]的 API 中；要知道，Webkit 可是把 Web Components 中的 HTML Imports 直接[列到「不考虑」里去了][38]……（其实 Firefox 也是）\n\n更何况，由于 web 社区一直以来所追求的「渐进增强、优雅降级」，一个 PWA 当然可以在 iOS 环境正常执行。[事实上，华盛顿邮报将网站迁移到 PWA 之后发现，不止是 Android，在 iOS 上也获得了 5 倍的活跃度增长][39]，（无论是不是它们之前的网站写得太烂吧），就算 iOS 现在还不支持 PWA 也[不会怎么样][40]，我们更是有理由相信 PWA 会很快在 iOS 上到来。\n\n### PWA vs. Others\n\n贺老（贺师俊）曾说过：「从纯 Web 到纯 Native，之间有许多可能的点」。当考虑移动应用的技术选型时，除了 Web 与原生应用，我们还有各种不同程度的 Hybrid，还有今年爆发的诸多 JS-to-Native 方案。\n\n虽然我在上文中用了「复仇」这样的字眼，不过无论从技术还是商业的角度，我们都没必要把 web 或是 PWA 放到 Native 的对立面去看。它们当然存在竞争关系，但是更多的时候，web-only 与 app-only 的策略都是不完美的，当公司资源足够的时候，我们通常会选择同时开发两者。[当然，无论与不与原生应用对比，PWA 让 web 应用变得体验更好这件事本身是毋庸置疑的。][43]「不谈场景聊技术都是扯淡」，[我们仍然还是需要根据自己产品与团队的情况来决定对应的技术选型与平台策略，只是 PWA 让 web 应用在面对选型考验时更加强势了而已。][44]\n\n\n![](/img/in-post/post-nextgen-web-pwa/qcon-trend.png)\n*众多的技术选型，以及笔者的一种猜测*\n\n笔者不负责任得做一些猜测：虽然[重量级的 Hybrid 架构与基础设施][45]仍是目前不少场景下最优的解决方案；但是随着移动设备本身的硬件性能提升与新技术的成熟与普及，JS-to-Native 与以 PWA 为首的纯 web 应用，将分别从两个方向挤压 Hybrid 的生存空间，消化当前 Hybrid 架构主要解决的问题；前者将逐渐演化为类似 Xarmarin 这样针对跨平台原生应用开发的解决方案；后者将显著降低当前 Hybrid 架构的容器开发与部署成本，将 Hybrid 返璞归真为简单的 webview 调用。\n\n这种猜测当然不是没有依据的瞎猜，比如前者可以参考阿里巴巴集团级别迁移 Weex 的战略与微信小程序的 roadmap；后者则可以参考当前 Cordova 与 Ionic 两大 Hybrid 社区对 PWA 的热烈反响。\n\n### PWA in China\n\n看看 Google 官方宣传较多的 PWA [案例][47]就会发现，FlipKart、Housing.com 来自印度；Lyft、华盛顿邮报来自北美；唯一来自中国的 AliExpress 主要开展的则是海外业务。\n\n由于中国的特殊性，笔者在[第一次][46]聊到 PWA 时难免表现出了一定程度的悲观：\n\n- 国内较重视 iOS，而 iOS 目前还不支持 PWA。\n- 国内的 Android 实为「安卓」，不自带 Chrome 是一，可能还会有其他兼容问题。\n- 国内厂商可能并不会像三星那样对推动自家浏览器支持 PWA 那么感兴趣。\n- 依赖 GCM 推送的通知不可用，Web Push Protocol 还没有国内的推送服务实现。\n- 国内 webview 环境较为复杂（比如微信），黑科技比较多。\n\n反观印度，由于 Google 服务健全、标配 Chrome 的 Android 手机市占率非常高，PWA 的用户达到率简直直逼 100%，也难免获得无数好评与支持了。**笔者奢望着本文能对推动 PWA 的国内环境有一定的贡献。**不过无论如何，PWA 在国内的春天可能的确会来得稍微晚一点了。\n\n\n## 结语\n\n「[我们信仰 Web，不仅仅在于软件、软件平台与单纯的技术][q97]，还在于[『任何人，在任何时间任何地点，都可以在万维网上发布任何信息，并被世界上的任何一个人所访问到。』而这才是 web 的最为革命之处，堪称我们人类，作为一个物种的一次进化。][27]」\n\n请不要让 web 再[继续离我们远去][49]，浏览器厂商们已经重新走到了一起，而下一棒将是交到我们 web 应用开发者的手上。[乔布斯曾相信 web 应用才移动应用的未来][50]，那就让我们用代码证明给这个世界看吧。\n\n**让我们的用户，也像我们这般热爱 web 吧。**\n\n黄玄，于 12 月的北京。\n\n---\n\n*注：在笔者撰文期间，Google 在 Google China Developers Days 上宣布了 developers.google.cn 域名的启用，方便国内开发者访问。对于文中所有链向 developers.google.com 的参考文献，应该都可以在 cn 站点中找到。*\n\n\n[1]: http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/ \"Isomorphic JavaScript: The Future of Web Apps\"\n\n[2]: https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.unrzyz3b2 \"Universal JavaScript\"\n\n[3]: https://en.wikipedia.org/wiki/Ajax_(programming) \"Ajax - Wikipedia\"\n\n[4]: https://en.wikipedia.org/wiki/Responsive_web_design \"Responsive Web Design - Wikipedia\"\n\n[5]: http://www.adobe.com/products/air.html \"Adobe AIR Application\"\n\n[6]: https://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx \"Windows Runtime JS API\"\n\n[7]: https://developer.chrome.com/extensions/apps \"Chrome Packaged Apps\"\n\n[8]: https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS \"Firefox OS Packaged Apps\"\n\n[9]: http://www.openwebosproject.org/ \"Open webOS\"\n\n[10]: https://cordova.apache.org/ \"Apache Cordova\"\n\n[11]: http://electron.atom.io/ \"Electron\"\n\n[12]: https://developer.chrome.com/extensions/manifest \"Chrome Apps Manifest\"\n\n[13]: https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest \"Firefox OS App Manifest\"\n\n[14]: https://www.w3.org/TR/2013/WD-appmanifest-20131217/ \"Manifest for web apps and bookmarks - First Public Working Draft\"\n\n[15]: https://youtu.be/m2a9hlUFRhg \"Keynote (Chrome Dev Summit 2015)\"\n\n[16]: https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en \"Web App Install Banners - Google Developer\"\n\n[17]: https://en.wikipedia.org/wiki/Flipkart \"Flipkart - wikipedia\"\n\n[18]: https://youtu.be/eI3B6x0fw9s \"Keynote (Chrome Dev Summit 2016)\"\n\n[19]: http://cordova.apache.org/docs/en/6.x/config_ref/index.html \"Config.xml - Apache Cordova\"\n\n[20]: https://msdn.microsoft.com/en-us/library/dn320426%28v=vs.85%29.aspx \"Browser configuration schema reference - MSDN\"\n\n[21]: https://huangxuan.me \"Hux Blog\"\n\n[22]: https://www.html5rocks.com/en/tutorials/notifications/quick/ \"Using the Notification API\"\n\n[23]: https://blogs.windows.com/msedgedev/2016/05/16/web-notifications-microsoft-edge/#2VBm890EjvAvUcgE.97\n\n[24]: https://developer.apple.com/notifications/safari-push-notifications/ \"Safari Push Notifications\"\n\n[25]: https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/ \"Web Push Notifications - Google Developer\"\n\n[26]: https://en.wikipedia.org/wiki/Progressive_web_app#Hybrid_Apps\n\n[27]: http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/ \"PhoneGap Beliefs, Goals, and Philosophy\"\n\n[28]: https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/ \"Progressive Web Apps: Escaping Tabs Without Losing Our Soul\"\n\n[29]: https://github.com/Huxpro/sw-101-gdgdf\n\n[30]: developers.google.com/web/updates/2015/12/background-sync \"Background Sync - Google Developers\"\n\n[31]: http://marketingland.com/report-mobile-users-spend-80-percent-time-just-five-apps-116858 \"Report: Mobile Users Spend 80 Percent Of Time In Just Five Apps\"\n\n[32]: http://www.recode.net/2016/9/16/12933780/average-app-downloads-per-month-comscore \"Half of U.S. smartphone users download zero apps per month\"\n\n[33]: https://youtu.be/EUthgV-U05w \"AdWords for App Promotion - Google\"\n\n[34]: https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/ \"The Progress of Web Apps - MSEdgeDev Blog\"\n\n[35]: https://developer.microsoft.com/en-us/microsoft-edge/platform/status/ \"Microsoft Edge web platform features status\"\n\n[36]: https://trac.webkit.org/wiki/FiveYearPlanFall2015\n\n[37]: https://webkit.org/status/ \"Webkit Feature Status\"\n\n[38]: https://webkit.org/status/#specification-web-components \"HTML Imports - Not Considering\"\n\n[39]: https://cloudfour.com/thinks/why-does-the-washington-posts-progressive-web-app-increase-engagement-on-ios/ \"Why does The Washington Post’s Progressive Web App increase engagement on iOS?\"\n\n[40]: https://cloudfour.com/thinks/ios-doesnt-support-progressive-web-apps-so-what/ \"iOS doesn’t support Progressive Web Apps, so what?\"\n\n[41]: https://jakearchibald.github.io/isserviceworkerready/ \"Is Service Worker Ready?\"\n\n[42]: https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support \"Internet Explorer End of Support\"\n\n[43]: https://cloudfour.com/thinks/progressive-web-apps-simply-make-sense/?utm_source=mobilewebweekly&utm_medium=email#fn-4857-1 \"Progressive Web Apps Simply Make Sense\"\n\n[44]: https://medium.com/@owencm/the-surprising-tradeoff-at-the-center-of-question-whether-to-build-an-native-or-web-app-d2ad00c40fb2#.ym83ct2ax \"The surprising tradeoff at the center of the question whether to build a Native or Web App\"\n\n[45]: http://zhihu.com/question/31316032/answer/75236718\n\n[46]: https://www.zhihu.com/question/46690207/answer/104851767\n\n[47]: https://developers.google.com/web/showcase/ \"Case Studies - Google Developers\"\n\n[48]: https://en.wikipedia.org/wiki/Google_Gears \"Gears - Wikipedia\"\n\n[49]: https://zhuanlan.zhihu.com/p/22561084 \"Web 在继续离我们远去\"\n\n[50]: youtu.be/y1B2c3ZD9fk?t=1h14m48s \"WWDC 2017\"\n\n\n[spec1]: https://w3c.github.io/manifest/#use-cases-and-requirements \"Web App Manifest\"\n\n[spec2]: https://w3c.github.io/ServiceWorker/ \"Service Worker\"\n\n[spec3]: http://w3c.github.io/push-api/ \"Push API\"\n\n[spec4]: https://notifications.spec.whatwg.org/ \"Notification API\"\n\n[spec5]: https://tools.ietf.org/html/draft-ietf-webpush-protocol-12 \"Web Push Protocol\"\n\n[spec6]: https://wicg.github.io/BackgroundSync/spec/ \"Web Background Synchronization - WICG\"\n\n[spec7]: http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification \"API Specification - The Chromium Projects\"\n\n[spec8]: https://www.w3.org/TR/notifications/ \"Web Notifications - W3C\"\n\n[spec9]: https://streams.spec.whatwg.org/ \"Streams\"\n\n[spec10]: https://www.w3.org/TR/offline-webapps/ \"Offline Web Applications\"\n\n[spec11]: https://www.w3.org/TR/2011/WD-html5-20110525/offline.html \"HTML5 5.6 Offline Web Applications\"\n\n\n[i1]: http://appleinsider.com/articles/08/10/03/latest_iphone_software_supports_full_screen_web_apps.html\n\n[i2]: https://developers.google.com/web/events/pwaroadshow/\n\n[i3]: https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41 \"Building Flipkart Lite: A Progressive Web App\"\n\n[i4]: https://twitter.com/adityapunjani\n\n\n[q37]: https://huangxuan.me/pwa-qcon2016/#/37 \"PWA@QCon2016 #37\"\n\n[q17]: https://huangxuan.me/pwa-qcon2016/#/17 \"PWA@QCon2016 #17\"\n\n[q97]: https://huangxuan.me/pwa-qcon2016/#/99 \"PWA@QCon2016 #97\"\n\n[s12]: https://huangxuan.me/sw-101-gdgdf/#/12 \"SW-101@DevFest #12\"\n\n[s13]: https://huangxuan.me/sw-101-gdgdf/#/13 \"SW-101@DevFest #13\"\n\n[b0]: https://huangxuan.me/2016/11/20/sw-101-gdgdf/\n","slug":"2017-02-09-nextgen-web-pwa","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d765001bs7t7u39c5d8c","content":"<blockquote>\n<p>本文首发于<a href=\"http://geek.csdn.net/news/detail/135595\" target=\"_blank\" rel=\"external\">《程序员》</a>，发布于 <a href=\"https://huangxuan.me\" target=\"_blank\" rel=\"external\">Hux Blog</a>、<a href=\"https://zhuanlan.zhihu.com/FrontendMagazine\" target=\"_blank\" rel=\"external\">前端外刊评论</a>，转载请保留链接 ;)</p>\n</blockquote>\n<h2 id=\"下一代-Web-应用？\"><a href=\"#下一代-Web-应用？\" class=\"headerlink\" title=\"下一代 Web 应用？\"></a>下一代 Web 应用？</h2><p>近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。</p>\n<p>包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 web 应用需求的前端框架及其生态，也涌现出了像<a href=\"http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/\" title=\"Isomorphic JavaScript: The Future of Web Apps\" target=\"_blank\" rel=\"external\">同构 JavaScript</a>与<a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.unrzyz3b2\" title=\"Universal JavaScript\" target=\"_blank\" rel=\"external\">通用 JavaScript 应用</a>这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 web 应用架构方式，可以说是百花齐放。</p>\n<p>但是，Web 应用在移动时代并没有达到其在桌面设备上流行的程度。究其原因，尽管上述的各种方案已经充分利用了现有的 JavaScript 计算能力、CSS 布局能力、HTTP 缓存与浏览器 API 对当代基于 <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\" title=\"Ajax - Wikipedia\" target=\"_blank\" rel=\"external\">Ajax</a> 与<a href=\"https://en.wikipedia.org/wiki/Responsive_web_design\" title=\"Responsive Web Design - Wikipedia\" target=\"_blank\" rel=\"external\">响应式设计</a>的 web 应用模型的性能与体验带来了工程角度的巨大突破，我们仍然无法在不借助原生程序辅助浏览器的前提下突破 web 平台本身对 web 应用固有的桎梏：<strong>客户端软件（即网页）需要下载所带来的网络延迟；与 Web 应用依赖浏览器作为入口所带来的体验问题。</strong></p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg\" alt=\"\"><br><em>Web 与原生应用在移动平台上的使用时长对比 <a href=\"https://developers.google.com/web/events/pwaroadshow/\" target=\"_blank\" rel=\"external\">图片来源: Google</a></em></p>\n<p>在桌面设备上，由于网络条件稳定，屏幕尺寸充分，交互方式趋向于多任务，这两点造成的负面影响对比 web 应用免于安装、随叫随到、无需更新等优点，瑕不掩瑜。但是在移动时代，脆弱的网络连接与全新的人机交互方式使得这两个问题被无限放大，严重制约了 web 应用在移动平台的发展。在用户眼里，原生应用不会出现「白屏」，清一色都摆在主屏幕上；而 web 应用则是浏览器这个应用中的应用，使用起来并不方便，而且加载也比原生应用要慢。</p>\n<p>Progressive Web Apps（以下简称 PWA）以及构成 PWA 的一系列关键技术的出现，终于让我们看到了彻底解决这两个平台级别问题的曙光：能够显著提高应用加载速度、甚至让 web 应用可以在离线环境使用的 Service Worker 与 Cache Storage；用于描述 web 应用元数据（metadata）、让 web 应用能够像原生应用一样被添加到主屏、全屏执行的 Web App Manifest；以及进一步提高 web 应用与操作系统集成能力，让 web 应用能在未被激活时发起推送通知的 Push API 与 Notification API 等等。</p>\n<p>将这些技术组合在一起会是怎样的效果呢？「印度阿里巴巴」 —— <a href=\"https://en.wikipedia.org/wiki/Flipkart\" title=\"Flipkart - wikipedia\" target=\"_blank\" rel=\"external\">Flipkart</a> 在 2015 年一度关闭了自己的移动端网站，却在年底发布了现在最为人津津乐道的 PWA 案例 <em>FlipKart Lite</em>，成为世界上第一个支撑大规模业务的 PWA。发布的一周后它就亮相于 <a href=\"https://youtu.be/m2a9hlUFRhg\" title=\"Keynote (Chrome Dev Summit 2015)\" target=\"_blank\" rel=\"external\">Chrome Dev Summit 2015</a> 上，笔者当时就被惊艳到了。为了方便各媒介上的读者观看，笔者做了几幅图方便给大家介绍：</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41\" title=\"Building Flipkart Lite: A Progressive Web App\" target=\"_blank\" rel=\"external\">Medium.com</a></em></p>\n<p>当浏览器发现用户<a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en\" title=\"Web App Install Banners - Google Developer\" target=\"_blank\" rel=\"external\">需要</a> Flipkart Lite 时，它就会提示用户「嘿，你可以把它添加至主屏哦」（用户也可以手动添加）。这样，Flipkart Lite 就会像原生应用一样在主屏上留下一个自定义的 icon 作为入口；与一般的书签不同，当用户点击 icon 时，Flipkat Lite 将直接全屏打开，不再受困于浏览器的 UI 中，而且有自己的启动屏效果。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41\" title=\"Building Flipkart Lite: A Progressive Web App\" target=\"_blank\" rel=\"external\">Medium.com</a></em></p>\n<p>更强大的是，在无法访问网络时，Flipkart Lite 可以像原生应用一样照常执行，还会很骚气的变成黑白色；不但如此，曾经访问过的商品都会被缓存下来得以在离线时继续访问。在商品降价、促销等时刻，Flipkart Lite 会像原生应用一样发起推送通知，吸引用户回到应用。</p>\n<p><strong>无需担心网络延迟；有着独立入口与独立的保活机制。</strong>之前两个问题的一并解决，宣告着 web 应用在移动设备上的浴火重生：满足 PWA 模型的 web 应用，将逐渐成为移动操作系统的一等公民，并将向原生应用发起挑战与「复仇」。</p>\n<p>更令笔者兴奋的是，就在今年 11 月的 <a href=\"https://youtu.be/eI3B6x0fw9s\" title=\"Keynote (Chrome Dev Summit 2016)\" target=\"_blank\" rel=\"external\">Chrome Dev Summit 2016</a> 上，Chrome 的工程 VP Darin Fisher 介绍了 Chrome 团队正在做的一些实验：把「添加至主屏」重命名为「安装」，被安装的 PWA 不再仅以 widget 的形式显示在桌面上，而是真正做到与所有原生应用平级，一样被收纳进应用抽屉（App Drawer）里，一样出现在系统设置中 🎉🎉🎉。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://twitter.com/adityapunjani\" target=\"_blank\" rel=\"external\">@adityapunjani</a></em></p>\n<p>图中从左到右分别为：类似原生应用的安装界面；被收纳在应用抽屉里的 Flipkart Lite 与 Hux Blog；设置界面中并列出现的 Flipkart 原生应用与 Flipkart Lite PWA （可以看到 PWA 巨大的体积优势）</p>\n<p><strong>笔者相信，PWA 模型将继约 20 年前横空出世的 Ajax 与约 10 年前风靡移动互联网的响应式设计之后，掀起 web 应用模型的第三次根本性革命，将 web 应用带进一个全新的时代。</strong></p>\n<h2 id=\"PWA-关键技术的前世今生\"><a href=\"#PWA-关键技术的前世今生\" class=\"headerlink\" title=\"PWA 关键技术的前世今生\"></a>PWA 关键技术的前世今生</h2><h3 id=\"Web-App-Manifest\"><a href=\"#Web-App-Manifest\" class=\"headerlink\" title=\"Web App Manifest\"></a><a href=\"https://w3c.github.io/manifest/#use-cases-and-requirements\" title=\"Web App Manifest\" target=\"_blank\" rel=\"external\">Web App Manifest</a></h3><p>Web App Manifest，即通过一个清单文件向浏览器暴露 web 应用的元数据，包括名字、icon 的 URL 等，以备浏览器使用，比如在添加至主屏或推送通知时暴露给操作系统，从而增强 web 应用与操作系统的集成能力。</p>\n<p>让 web 应用在移动设备上的体验更接近原生应用的尝试其实早在 2008 年的 <a href=\"https://huangxuan.me/pwa-qcon2016/#/37\" title=\"PWA@QCon2016 #37\" target=\"_blank\" rel=\"external\">iOS 1.1.3 与 iOS 2.1.0 </a>时就开始了，它们分别为 web 应用增加了对自定义 icon 和全屏打开的支持。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif\" alt=\"\"><br><em>图片来源: <a href=\"http://appleinsider.com/articles/08/10/03/latest_iphone_software_supports_full_screen_web_apps.html\" target=\"_blank\" rel=\"external\">appleinsider.com</a></em></p>\n<p>但是很快，随着越来越多的私有平台通过 <code>&lt;meta&gt;</code>/<code>&lt;link&gt;</code> 标签来为 web 应用添加「私货」，<code>&lt;head&gt;</code> 很快就被塞满了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Add to homescreen for Safari on iOS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Lighten\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add to homescreen for Chrome on Android --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">name</span>=<span class=\"string\">\"theme-color\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#000000\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Icons for iOS and Android Chrome M31~M38 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"144x144\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-144x144-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"114x114\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-114x114-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"72x72\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-72x72-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-57x57-precomposed.png\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Icon for Android Chrome, recommended --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"196x196\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/touch-icon-196x196.png\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tile icon for Win8 (144x144 + tile color) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileImage\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"images/touch/ms-touch-icon-144x144-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileColor\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#3372DF\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Generic Icon --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/touch-icon-57x57.png\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>显然，这种做法并不优雅：分散又重复的元数据定义多余且难以维持同步，与 html 耦合在一起也加重了浏览器检查元数据未来变动的成本。与此同时，社区里开始出现使用 manifest 文件以中心化地描述元数据的方案，比如 <a href=\"https://developer.chrome.com/extensions/manifest\" title=\"Chrome Apps Manifest\" target=\"_blank\" rel=\"external\">Chrome Extension、 Chrome Hosted Web Apps (2010)</a> 与 <a href=\"https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest\" title=\"Firefox OS App Manifest\" target=\"_blank\" rel=\"external\">Firefox OS App Manifest (2011)</a> 使用 JSON；<a href=\"http://cordova.apache.org/docs/en/6.x/config_ref/index.html\" title=\"Config.xml - Apache Cordova\" target=\"_blank\" rel=\"external\">Cordova</a> 与 <a href=\"https://msdn.microsoft.com/en-us/library/dn320426%28v=vs.85%29.aspx\" title=\"Browser configuration schema reference - MSDN\" target=\"_blank\" rel=\"external\">Windows Pinned Site</a> 使用 XML；</p>\n<p>2013 年，W3C WebApps 工作组开始对基于 JSON 的 Manifest 进行标准化，于同年年底发布<a href=\"https://www.w3.org/TR/2013/WD-appmanifest-20131217/\" title=\"Manifest for web apps and bookmarks - First Public Working Draft\" target=\"_blank\" rel=\"external\">第一份公开 Working Draft</a>，并逐渐演化成为今天的 W3C Web App Manifest：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"Manifest Sample\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Web Application Manifest Sample\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"icons\"</span>: [&#123;</div><div class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-2x.png\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"96x96\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></div><div class=\"line\">   &#125;],</div><div class=\"line\">  <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"/sample/\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/sample/index.html\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"orientation\"</span>: <span class=\"string\">\"landscape\"</span></div><div class=\"line\">  <span class=\"string\">\"theme_color\"</span>: <span class=\"string\">\"#000\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#fff\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- document --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"manifest\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/manifest.json\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>诸如 <code>name</code>、<code>icons</code>、<code>display</code> 都是我们比较熟悉的，而大部分新增的成员则为 web 应用带来了一系列以前 web 应用想做却做不到（或在之前只能靠 hack）的新特性：</p>\n<ul>\n<li><code>scope</code>：定义了 web 应用的浏览作用域，比如作用域外的 URL 就会打开浏览器而不会在当前 PWA 里继续浏览。</li>\n<li><code>start_url</code>：定义了一个 PWA 的入口页面。比如说你添加 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a> 的任何一个文章到主屏，从主屏打开时都会访问 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a> 的主页。</li>\n<li><code>orientation</code>：终于，我们可以锁定屏幕旋转了（喜极而泣…）</li>\n<li><code>theme_color</code>/<code>background_color</code>：主题色与背景色，用于配置一些可定制的操作系统 UI 以提高用户体验，比如 Android 的状态栏、任务栏等。</li>\n</ul>\n<p>这个清单的成员还有很多，比如用于声明「对应原生应用」的 <code>related_applications</code> 等等，本文就不一一列举了。作为 PWA 的「户口本」，承载着 web 应用与操作系统集成能力的重任，Web App Manifest 还将在日后不断扩展，以满足 web 应用高速演化的需要。</p>\n<h3 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a><a href=\"https://w3c.github.io/ServiceWorker/\" title=\"Service Worker\" target=\"_blank\" rel=\"external\">Service Worker</a></h3><p>我们原有的整个 Web 应用模型，都是构建在「用户能上网」的前提之下的，所以一离线就只能玩小恐龙了。其实，对于「让 web 应用离线执行」这件事，Service Worker 至少是 web 社区的第三次尝试了。</p>\n<p>故事可以追溯到 2007 年的 <a href=\"https://en.wikipedia.org/wiki/Google_Gears\" title=\"Gears - Wikipedia\" target=\"_blank\" rel=\"external\">Google Gears</a>：为了让自家的 Gmail、Youtube、Google Reader 等 web 应用可以在本地存储数据与离线执行，Google 开发了一个浏览器拓展来增强 web 应用。Google Gears 支持 IE 6、Safari 3、Firefox 1.5 等浏览器；要知道，那一年 Chrome 都还没出生呢。</p>\n<p>在 Gears API 中，我们通过向 LocalServer 模块提交一个缓存文件清单来实现离线支持：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Somewhere in your javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> localServer = google.gears.factory.create(<span class=\"string\">\"bata.localserver\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> store = localServer.createManagedStore(STORE_NAME);</div><div class=\"line\">store.manifestUrl = <span class=\"string\">\"manifest.json\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// manifest.json - 假设 JSON 有注释</div><div class=\"line\">&#123;</div><div class=\"line\">　　\"betaManifestVersion\":　1,</div><div class=\"line\">　　\"version\": 　\"1.0\",</div><div class=\"line\">　　\"entries\":　[　</div><div class=\"line\">　　　　&#123;　\"url\": 　\"index.html\"&#125;,</div><div class=\"line\">　　　　&#123;　\"url\": 　\"main.js\"&#125;</div><div class=\"line\">　　]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>是不是感到很熟悉？好像 <a href=\"https://www.w3.org/TR/2011/WD-html5-20110525/offline.html\" title=\"HTML5 5.6 Offline Web Applications\" target=\"_blank\" rel=\"external\">HTML5 规范</a>中的 Application Cache 也是类似的东西？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"cache.appcache\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">CACHE</span> <span class=\"selector-tag\">MANIFEST</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">CACHE</span>:</div><div class=\"line\"><span class=\"selector-tag\">index</span><span class=\"selector-class\">.html</span></div><div class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-class\">.js</span></div></pre></td></tr></table></figure>\n<p>是的，Gears 的 LocalServer 就是后来大家所熟知的 App Cache 的前身，大约从 <a href=\"https://www.w3.org/TR/offline-webapps/\" title=\"Offline Web Applications\" target=\"_blank\" rel=\"external\">2008</a> 年开始 W3C 就开始尝试将 Gears 进行标准化了；除了 LocalServer，Gears 中用于提供并行计算能力的 WorkerPool 模块与用于提供本地数据库与 SQL 支持的 Database 模块也分别是日后 Web Worker 与 Web SQL Database（后被废弃）的前身。</p>\n<p>HTML5 App Cache 作为第二波「让 web 应用离线执行」的尝试，确实也服务了比如 Google Doc、尤雨溪早年作品 HTML5 Clear、以及一直用 web 应用作为自己 iOS 应用的 FT.com（Financial Times）等不少 web 应用。那么，还有 Service Worker 什么事呢？  </p>\n<p>是啊，如果 App Cache 没有被设计得<a href=\"https://huangxuan.me/sw-101-gdgdf/#/12\" title=\"SW-101@DevFest #12\" target=\"_blank\" rel=\"external\">烂到完全不可编程、无法清理缓存、几乎没有路由机制、出了 Bug 一点救都没有</a>，可能就真没 Service Worker 什么事了。<a href=\"https://huangxuan.me/sw-101-gdgdf/#/13\" title=\"SW-101@DevFest #13\" target=\"_blank\" rel=\"external\">App Cache 已经在前不久定稿的 HTML5.1 中被拿掉了，W3C 为了挽救 web 世界真是不惜把自己的脸都打肿了……</a></p>\n<p>时至今日，我们终于迎来了 Service Worker 的曙光。简单来说，Service Worker 是一个可编程的 Web Worker，它就像一个位于浏览器与网络之间的客户端代理，可以拦截、处理、响应流经的 HTTP 请求；配合随之引入 Cache Storage API，你可以自由管理 HTTP 请求文件粒度的缓存，这使得 Service Worker 可以从缓存中向 web 应用提供资源，即使是在离线的环境下。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-sw.png\" alt=\"\"><br><em>Service Worker 就像一个运行在客户端的代理</em></p>\n<p>比如说，我们可以给网页 <code>foo.html</code> 注册这么一个 Service Worker，它将劫持由 <code>foo.html</code> 发起的一切 HTTP 请求，并统统返回未设置 <code>Content-Type</code> 的 <code>Hello World!</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.onfetch = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  e.respondWith(<span class=\"keyword\">new</span> Response(<span class=\"string\">'Hello World!'</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Service Worker 第一次发布于 2014 年的 Google IO 上，目前已处于 W3C 工作草案的状态。其设计吸取了 Application Cache 的失败经验，作为 web 应用的开发者的你有着完全的控制能力；同时，它还借鉴了 Chrome 多年来在 Chrome Extension 上的设计经验（Chrome Background Pages 与 Chrome Event Pages），采用了基于「事件驱动」的唤醒机制，以大幅节省后台计算的能耗。比如上面的 <code>fetch</code> 其实就是会唤醒 Service Worker 的事件之一。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png\" alt=\"\"><br><em>Service Worker 的生命周期</em></p>\n<p>除了类似 <code>fetch</code> 这样的功能事件外，Service Worker 还提供了一组生命周期事件，包括安装、激活等等。比如，在 Service Worker 的「安装」事件中，我们可以把 web 应用所需要的资源统统预先下载并缓存到 Cache Storage 中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.oninstall = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  e.waitUntil(</div><div class=\"line\">    caches.open(<span class=\"string\">'installation'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span>  cache.addAll([</div><div class=\"line\">        <span class=\"string\">'./'</span>,</div><div class=\"line\">        <span class=\"string\">'./styles.css'</span>,</div><div class=\"line\">        <span class=\"string\">'./script.js'</span></div><div class=\"line\">      ]))</div><div class=\"line\">  )</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这样，当用户离线，网络无法访问时，我们就可以从缓存中启动我们的 web 应用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//sw.js</span></div><div class=\"line\">self.onfetch = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> fetched = fetch(e.request)</div><div class=\"line\">  <span class=\"keyword\">const</span> cached = caches.match(e.request)</div><div class=\"line\"></div><div class=\"line\">  e.respondWith(</div><div class=\"line\">    fetched.catch(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> cached)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，Service Worker 被设计为一个相对底层（low-level）、高度可编程、子概念众多，也因此异常灵活且强大的 API，故本文只能展示它的冰山一角。出于安全考虑，注册 Service Worker 要求你的 web 应用部署于 HTTPS 协议下，以免利用 Service Worker 的中间人攻击。笔者在今年 GDG 北京的 DevFest 上分享了 <a href=\"https://huangxuan.me/2016/11/20/sw-101-gdgdf/\" target=\"_blank\" rel=\"external\">Service Worker 101</a>，涵盖了 Service Worker 譬如「网络优先」、「缓存优先」、「网络与缓存比赛」这些更复杂的缓存策略、学习资料、以及<a href=\"https://github.com/Huxpro/sw-101-gdgdf\" target=\"_blank\" rel=\"external\">示例代码</a>，可以供大家参考。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-race.png\" alt=\"\"><br><em>Service Worker 的一种缓存策略：让网络请求与读取缓存比赛</em></p>\n<p>你也可以尝试在支持 PWA 的浏览器中访问笔者的博客 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a>，感受 Service Worker 的实际效果：所有访问过的页面都会被缓存并允许在离线环境下继续访问，所有未访问过的页面则会在离线环境下展示一个自定义的离线页面。</p>\n<p>在笔者看来，<strong>Service Worker 对 PWA 的重要性相当于 <code>XMLHTTPRequest</code> 之于 Ajax，媒体查询（Media Query）之于响应式设计，是支撑 PWA 作为「下一代 web 应用模型」的最核心技术。</strong>由于 Service Worker 可以与包括 Indexed DB、Streams 在内的大部分 DOM 无关 API 进行交互，它的潜力简直无可限量。笔者几乎可以断言，Service Worker 将在未来十年里成为 web 客户端技术工程化的兵家必争之地，带来「离线优先（Offline-first）」的架构革命。</p>\n<h3 id=\"Push-Notification\"><a href=\"#Push-Notification\" class=\"headerlink\" title=\"Push Notification\"></a>Push Notification</h3><p>PWA 推送通知中的「推送」与「通知」，其实使用的是两个不同但又相得益彰的 API：</p>\n<p><a href=\"https://notifications.spec.whatwg.org/\" title=\"Notification API\" target=\"_blank\" rel=\"external\">Notification API</a> 相信大家并不陌生，它负责所有与通知本身相关的机制，比如通知的权限管理、向操作系统发起通知、通知的类型与音效，以及提供通知被点击或关闭时的回调等等，目前国内外的各大网站（尤其在桌面端）都有一定的使用。Notification API 最早应该是在 <a href=\"https://www.html5rocks.com/en/tutorials/notifications/quick/\" title=\"Using the Notification API\" target=\"_blank\" rel=\"external\">2010</a> 年前后由 Chromium 提出<a href=\"http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification\" title=\"API Specification - The Chromium Projects\" target=\"_blank\" rel=\"external\">草案</a>以 <code>webkitNotifications</code> 前缀方式实现；随着 2011 年进入标准化；2012 年在 Safari 6（Mac OSX 10.8+）上获得支持；2015 年 Notification API 成为 <a href=\"https://www.w3.org/TR/notifications/\" title=\"Web Notifications - W3C\" target=\"_blank\" rel=\"external\">W3C Recommendation</a>；2016 年 <a href=\"https://blogs.windows.com/msedgedev/2016/05/16/web-notifications-microsoft-edge/#2VBm890EjvAvUcgE.97\" target=\"_blank\" rel=\"external\">Edge 的支持</a>；Web Notifications 已经在桌面浏览器中获得了全面支持（Chrome、Edge、Firefox、Opera、Safari）的成就。</p>\n<p><a href=\"http://w3c.github.io/push-api/\" title=\"Push API\" target=\"_blank\" rel=\"external\">Push API</a> 的出现则让推送服务具备了向 web 应用推送消息的能力，它定义了 web 应用如何向推送服务发起订阅、如何响应推送消息，以及 web 应用、应用服务器与推送服务之间的鉴权与加密机制；由于 Push API 并不依赖 web 应用与浏览器 UI 存活，所以即使是在 web 应用与浏览器未被用户打开的时候，也可以通过后台进程接受推送消息并调用 Notification API 向用户发出通知。值得一提的是，Mac OSX 10.9 Mavericks 与 Safari 7 在 2013 年就发布了自己的私有推送支持，基于 APNS 的 <a href=\"https://developer.apple.com/notifications/safari-push-notifications/\" title=\"Safari Push Notifications\" target=\"_blank\" rel=\"external\">Safari Push Notifications</a>。</p>\n<p>在 PWA 中，我们利用 Service Worker 的后台计算能力结合 Push API 对推送事件进行响应，并通过 Notification API 实现通知的发出与处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.addEventListener(<span class=\"string\">'push'</span>, event =&gt; &#123;</div><div class=\"line\">  event.waitUntil(</div><div class=\"line\">    <span class=\"comment\">// Process the event and display a notification.</span></div><div class=\"line\">    self.registration.showNotification(<span class=\"string\">\"Hey!\"</span>)</div><div class=\"line\">  );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">self.addEventListener(<span class=\"string\">'notificationclick'</span>, event =&gt; &#123;  </div><div class=\"line\">  <span class=\"comment\">// Do something with the event  </span></div><div class=\"line\">  event.notification.close();  </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">self.addEventListener(<span class=\"string\">'notificationclose'</span>, event =&gt; &#123;  </div><div class=\"line\">  <span class=\"comment\">// Do something with the event  </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>对于 Push Notification，笔者的几次分享中一直都提的稍微少一些，一是因为 Push API 还处于 Editor Draft 的状态，二是目前浏览器与推送服务间的协议支持还不够成熟：Chrome（与其它基于 Blink 的浏览器）在 Chromium 52 之前只支持基于 Google 私有的 GCM/FCM 服务进行通知推送。不过好消息是，继 Firefox 44 之后，Chrome 52 与 Opera 39 也紧追其后实现了正在由 IETF 进行标准化的 <a href=\"https://tools.ietf.org/html/draft-ietf-webpush-protocol-12\" title=\"Web Push Protocol\" target=\"_blank\" rel=\"external\">Web 推送协议（Web Push Protocol）</a>。</p>\n<p>如果你已经在使用 Google 的云服务（比如 Firebase），并且主要面向的是海外用户，那么在 web 应用上支持基于 GCM/FCM 的推送通知并不是一件费力的事情，笔者推荐你阅读一下 Google Developers 的<a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/\" title=\"Web Push Notifications - Google Developer\" target=\"_blank\" rel=\"external\">系列文章</a>，很多国外公司已经玩起来了。</p>\n<h2 id=\"从-Hybrid-到-PWA，从封闭到开放\"><a href=\"#从-Hybrid-到-PWA，从封闭到开放\" class=\"headerlink\" title=\"从 Hybrid 到 PWA，从封闭到开放\"></a>从 Hybrid 到 PWA，从封闭到开放</h2><p>2008 年，当移动时代来临，<a href=\"https://huangxuan.me/pwa-qcon2016/#/17\" title=\"PWA@QCon2016 #17\" target=\"_blank\" rel=\"external\">唱衰移动 Web 的声音</a>开始出现，而浏览器的进化并不能跟上时，来自 Nitobi 的 Brian Leroux 等人创造了 <a href=\"https://cordova.apache.org/\" title=\"Apache Cordova\" target=\"_blank\" rel=\"external\">Phonegap</a>，希望它能以 Polyfill 的形式、弥补目前浏览器与移动设备间的「鸿沟」，从此开启了<a href=\"https://en.wikipedia.org/wiki/Progressive_web_app#Hybrid_Apps\" target=\"_blank\" rel=\"external\">混合应用（Hybrid Apps）</a>的时代。</p>\n<p>几年间，<a href=\"http://www.adobe.com/products/air.html\" title=\"Adobe AIR Application\" target=\"_blank\" rel=\"external\">Adobe AIR</a>、<a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx\" title=\"Windows Runtime JS API\" target=\"_blank\" rel=\"external\">Windows Runtime Apps</a>、<a href=\"https://developer.chrome.com/extensions/apps\" title=\"Chrome Packaged Apps\" target=\"_blank\" rel=\"external\">Chrome Apps</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS\" title=\"Firefox OS Packaged Apps\" target=\"_blank\" rel=\"external\">Firefox OS</a>、<a href=\"http://www.openwebosproject.org/\" title=\"Open webOS\" target=\"_blank\" rel=\"external\">WebOS</a>、<a href=\"https://cordova.apache.org/\" title=\"Apache Cordova\" target=\"_blank\" rel=\"external\">Cordova/Phonegap</a>、<a href=\"http://electron.atom.io/\" title=\"Electron\" target=\"_blank\" rel=\"external\">Electron</a> 以及国内比如微信、淘宝，无数的 Hybrid 方案拔地而起，让 web 开发者可以在继续使用 web 客户端技术的同时，做到一些只有原生应用才能做到的事情，包括访问一些设备与操作系统 API，给用户带来更加 「Appy」 的体验，以及进入 App Store 等等。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png\" alt=\"\"><br><em>众多的 Hybrid 方案</em></p>\n<p>PWA 作为一个涵盖性术语，与过往的这些或多或少通过私有平台 API 增强 web 应用的尝试最大的不同，在于构成 PWA 的每一项基本技术，都已经或正在被 IETF、ECMA、W3C 或 WHATWG 标准化，不出意外的话，它们都将被纳入开放 web 标准，并在不远的将来得到所有浏览器与全平台的支持。我们终于可以逃出 App Store 封闭的秘密花园，重新回到属于 web 的那片开放自由的大地。</p>\n<p>有趣的是，从上文中你也可以发现，组成 PWA 的各项技术的草案正是由上述各种私有方案背后的浏览器厂商或开发者直接贡献或间接影响的。可以说，PWA 的背后并不是某一家或两家公司，而是整个 web 社区与整个 web 规范。<strong>正是因为这种开放与去中心化的力量，使得万维网（World Wide Web）能够成为当今世界上跨平台能力最强、且几乎是唯一一个具备这种跨平台能力的应用平台。</strong></p>\n<p><a href=\"http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/\" title=\"PhoneGap Beliefs, Goals, and Philosophy\" target=\"_blank\" rel=\"external\">「我们相信 Web，是因为相信它是解决设备差异化的终极方案；我们相信，当 Web 在今天做不到一件事的时候，是因为它还没来得及去实现，而不是因为他做不到。而 Phonegap，它的终极目的就是消失在 Web 标准的背后。」</a></p>\n<p>在不丢失 web 的开放灵魂，在不需要依靠 Hybrid 把应用放在 App Store 的前提下，让 web 应用能够渐进式地跳脱出浏览器的标签，变成用户眼中的 App。这是 Alex Russell 在 2015 年提出 PWA 概念的<a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\" title=\"Progressive Web Apps: Escaping Tabs Without Losing Our Soul\" target=\"_blank\" rel=\"external\">原委</a>。</p>\n<p>而又正因为 web 是一个整体，PWA 可以利用的技术远不止上述的几个而已：Ajax、响应式设计、JavaScript 框架、ECMAScript Next、CSS Next、Houdini、Indexed DB、Device APIs、Web Bluetooth、Web Socket、Web Payment、<a href=\"https://wicg.github.io/BackgroundSync/spec/\" title=\"Web Background Synchronization - WICG\" target=\"_blank\" rel=\"external\">孵化</a>中的 <a href=\"developers.google.com/web/updates/2015/12/background-sync\" title=\"Background Sync - Google Developers\">Background Sync API</a>、<a href=\"https://streams.spec.whatwg.org/\" title=\"Streams\" target=\"_blank\" rel=\"external\">Streams</a>、WebVR……开放 Web 世界 27 年来的发展以及未来的一切，都与 PWA 天作之合。</p>\n<h2 id=\"鱼与熊掌的兼得\"><a href=\"#鱼与熊掌的兼得\" class=\"headerlink\" title=\"鱼与熊掌的兼得\"></a>鱼与熊掌的兼得</h2><p>经过几年来的摸索，整个互联网行业仿佛在「Web 应用 vs. 原生应用」这个问题上达成了共识：</p>\n<ul>\n<li>web 应用是鱼：迭代快，获取用户成本低；跨平台强体验弱，开发成本低。<strong>适合拉新</strong>。</li>\n<li>原生应用是熊掌：迭代慢，获取用户成本高；跨平台弱体验强，开发成本高。<strong>适合保活</strong>。</li>\n</ul>\n<p>要知道，虽然用户花在原生应用上的时间要明显多于 web 应用，但其中<a href=\"http://marketingland.com/report-mobile-users-spend-80-percent-time-just-five-apps-116858\" title=\"Report: Mobile Users Spend 80 Percent Of Time In Just Five Apps\" target=\"_blank\" rel=\"external\">有 80% 的时间是花在前五个应用中的</a>。<a href=\"http://www.recode.net/2016/9/16/12933780/average-app-downloads-per-month-comscore\" title=\"Half of U.S. smartphone users download zero apps per month\" target=\"_blank\" rel=\"external\">调查显示，美国有一半的智能手机用户平均每月新 App 安装量为零</a>，而月均网站访问量却有 100 个，更别提 Google Play 上<a href=\"https://youtu.be/EUthgV-U05w\" title=\"AdWords for App Promotion - Google\" target=\"_blank\" rel=\"external\">有 60% 的应用从未被人下载过了</a>。于是，整个行业的产品策略清一色地<strong>「拿鱼换熊掌」</strong>，比如笔者的老东家阿里旅行（飞猪旅行），web 应用布满阿里系各种渠道，提供「优秀的第一手体验」，等你用的开心了，再引诱你去下载安装原生应用。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg\" alt=\"\"><br><em>原生应用、当代 Web 与 PWA 图片来源: Hux &amp; <a href=\"https://developers.google.com/web/events/pwaroadshow/\" target=\"_blank\" rel=\"external\">Google</a></em></p>\n<p>但是，PWA 的出现，让鱼与熊掌兼得变成了可能 —— 它同时具备了 web 应用与原生应用的优点，有着自己独有的先进性：「浏览器 -&gt; 添加至主屏/安装 -&gt; 具备原生应用体验的 PWA -&gt; 推送通知 -&gt; 具备原生应用体验的 PWA」，PWA 自身就包含着从拉新到保活的闭环。</p>\n<p>除此之外，PWA 还继承了 web 应用的另外两大优点：<strong>无需先付出几十兆的下载安装成本即可开始使用</strong>，以及<strong>不需要经过应用超市审核就可以发布新版本</strong>。所以，PWA 可以称得上是一种「流式应用（Streamable App）」与「常青应用（Evergreen App）」</p>\n<h2 id=\"未来到来了吗\"><a href=\"#未来到来了吗\" class=\"headerlink\" title=\"未来到来了吗\"></a>未来到来了吗</h2><p>在笔者分享 PWA 的经历中，最不愿意回答的两个问题莫过于「PWA 已经被广泛支持了吗？」以及「PWA 与 ABCDEFG 这些技术方案相比有什么优劣？」，但是这确实是两个逃不开的问题。</p>\n<h3 id=\"PWA-的支持情况？\"><a href=\"#PWA-的支持情况？\" class=\"headerlink\" title=\"PWA 的支持情况？\"></a>PWA 的支持情况？</h3><p>当我们说到 PWA 是否被支持时，其实我们在说的是 PWA 背后的几个关键技术都得到支持了没有。以浏览器内核来划分的话，Blink（Chrome、Oprea、Samsung Internet 等）与 Gecko（Firefox）都已经实现了 PWA 所需的所有关键技术（👏👏👏），并已经开始探寻更多的可能性。EdgeHTML（Edge）<a href=\"https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/\" title=\"The Progress of Web Apps - MSEdgeDev Blog\" target=\"_blank\" rel=\"external\">简直积极得不能更积极了</a>，所有的特性都已经处于「正在开发中」的<a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/\" title=\"Microsoft Edge web platform features status\" target=\"_blank\" rel=\"external\">状态</a>。最大的绊脚石仍然来自于 Webkit（Safari），尤其是在 iOS 上，上述的四个 API 都未得到支持，而且由于平台限制，第三方浏览器也无法在 iOS 上支持。（<a href=\"https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support\" title=\"Internet Explorer End of Support\" target=\"_blank\" rel=\"external\">什么你说 IE？</a>）</p>\n<p>不过，也不要气馁，Webkit 不但在它 <a href=\"https://trac.webkit.org/wiki/FiveYearPlanFall2015\" target=\"_blank\" rel=\"external\">2015 年发布的五年计划</a>里提到了 Service Worker，更是已经在最近实现了 Service Worker 所<a href=\"https://jakearchibald.github.io/isserviceworkerready/\" title=\"Is Service Worker Ready?\" target=\"_blank\" rel=\"external\">依赖</a>的 Request、Response 与 Fetch API，还把 Service Worker 与 Web App Manifest 纷纷<a href=\"https://webkit.org/status/\" title=\"Webkit Feature Status\" target=\"_blank\" rel=\"external\">列入了「正在考虑」</a>的 API 中；要知道，Webkit 可是把 Web Components 中的 HTML Imports 直接<a href=\"https://webkit.org/status/#specification-web-components\" title=\"HTML Imports - Not Considering\" target=\"_blank\" rel=\"external\">列到「不考虑」里去了</a>……（其实 Firefox 也是）</p>\n<p>更何况，由于 web 社区一直以来所追求的「渐进增强、优雅降级」，一个 PWA 当然可以在 iOS 环境正常执行。<a href=\"https://cloudfour.com/thinks/why-does-the-washington-posts-progressive-web-app-increase-engagement-on-ios/\" title=\"Why does The Washington Post’s Progressive Web App increase engagement on iOS?\" target=\"_blank\" rel=\"external\">事实上，华盛顿邮报将网站迁移到 PWA 之后发现，不止是 Android，在 iOS 上也获得了 5 倍的活跃度增长</a>，（无论是不是它们之前的网站写得太烂吧），就算 iOS 现在还不支持 PWA 也<a href=\"https://cloudfour.com/thinks/ios-doesnt-support-progressive-web-apps-so-what/\" title=\"iOS doesn’t support Progressive Web Apps, so what?\" target=\"_blank\" rel=\"external\">不会怎么样</a>，我们更是有理由相信 PWA 会很快在 iOS 上到来。</p>\n<h3 id=\"PWA-vs-Others\"><a href=\"#PWA-vs-Others\" class=\"headerlink\" title=\"PWA vs. Others\"></a>PWA vs. Others</h3><p>贺老（贺师俊）曾说过：「从纯 Web 到纯 Native，之间有许多可能的点」。当考虑移动应用的技术选型时，除了 Web 与原生应用，我们还有各种不同程度的 Hybrid，还有今年爆发的诸多 JS-to-Native 方案。</p>\n<p>虽然我在上文中用了「复仇」这样的字眼，不过无论从技术还是商业的角度，我们都没必要把 web 或是 PWA 放到 Native 的对立面去看。它们当然存在竞争关系，但是更多的时候，web-only 与 app-only 的策略都是不完美的，当公司资源足够的时候，我们通常会选择同时开发两者。<a href=\"https://cloudfour.com/thinks/progressive-web-apps-simply-make-sense/?utm_source=mobilewebweekly&amp;utm_medium=email#fn-4857-1\" title=\"Progressive Web Apps Simply Make Sense\" target=\"_blank\" rel=\"external\">当然，无论与不与原生应用对比，PWA 让 web 应用变得体验更好这件事本身是毋庸置疑的。</a>「不谈场景聊技术都是扯淡」，<a href=\"https://medium.com/@owencm/the-surprising-tradeoff-at-the-center-of-question-whether-to-build-an-native-or-web-app-d2ad00c40fb2#.ym83ct2ax\" title=\"The surprising tradeoff at the center of the question whether to build a Native or Web App\" target=\"_blank\" rel=\"external\">我们仍然还是需要根据自己产品与团队的情况来决定对应的技术选型与平台策略，只是 PWA 让 web 应用在面对选型考验时更加强势了而已。</a></p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/qcon-trend.png\" alt=\"\"><br><em>众多的技术选型，以及笔者的一种猜测</em></p>\n<p>笔者不负责任得做一些猜测：虽然<a href=\"http://zhihu.com/question/31316032/answer/75236718\" target=\"_blank\" rel=\"external\">重量级的 Hybrid 架构与基础设施</a>仍是目前不少场景下最优的解决方案；但是随着移动设备本身的硬件性能提升与新技术的成熟与普及，JS-to-Native 与以 PWA 为首的纯 web 应用，将分别从两个方向挤压 Hybrid 的生存空间，消化当前 Hybrid 架构主要解决的问题；前者将逐渐演化为类似 Xarmarin 这样针对跨平台原生应用开发的解决方案；后者将显著降低当前 Hybrid 架构的容器开发与部署成本，将 Hybrid 返璞归真为简单的 webview 调用。</p>\n<p>这种猜测当然不是没有依据的瞎猜，比如前者可以参考阿里巴巴集团级别迁移 Weex 的战略与微信小程序的 roadmap；后者则可以参考当前 Cordova 与 Ionic 两大 Hybrid 社区对 PWA 的热烈反响。</p>\n<h3 id=\"PWA-in-China\"><a href=\"#PWA-in-China\" class=\"headerlink\" title=\"PWA in China\"></a>PWA in China</h3><p>看看 Google 官方宣传较多的 PWA <a href=\"https://developers.google.com/web/showcase/\" title=\"Case Studies - Google Developers\" target=\"_blank\" rel=\"external\">案例</a>就会发现，FlipKart、Housing.com 来自印度；Lyft、华盛顿邮报来自北美；唯一来自中国的 AliExpress 主要开展的则是海外业务。</p>\n<p>由于中国的特殊性，笔者在<a href=\"https://www.zhihu.com/question/46690207/answer/104851767\" target=\"_blank\" rel=\"external\">第一次</a>聊到 PWA 时难免表现出了一定程度的悲观：</p>\n<ul>\n<li>国内较重视 iOS，而 iOS 目前还不支持 PWA。</li>\n<li>国内的 Android 实为「安卓」，不自带 Chrome 是一，可能还会有其他兼容问题。</li>\n<li>国内厂商可能并不会像三星那样对推动自家浏览器支持 PWA 那么感兴趣。</li>\n<li>依赖 GCM 推送的通知不可用，Web Push Protocol 还没有国内的推送服务实现。</li>\n<li>国内 webview 环境较为复杂（比如微信），黑科技比较多。</li>\n</ul>\n<p>反观印度，由于 Google 服务健全、标配 Chrome 的 Android 手机市占率非常高，PWA 的用户达到率简直直逼 100%，也难免获得无数好评与支持了。<strong>笔者奢望着本文能对推动 PWA 的国内环境有一定的贡献。</strong>不过无论如何，PWA 在国内的春天可能的确会来得稍微晚一点了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>「<a href=\"https://huangxuan.me/pwa-qcon2016/#/99\" title=\"PWA@QCon2016 #97\" target=\"_blank\" rel=\"external\">我们信仰 Web，不仅仅在于软件、软件平台与单纯的技术</a>，还在于<a href=\"http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/\" title=\"PhoneGap Beliefs, Goals, and Philosophy\" target=\"_blank\" rel=\"external\">『任何人，在任何时间任何地点，都可以在万维网上发布任何信息，并被世界上的任何一个人所访问到。』而这才是 web 的最为革命之处，堪称我们人类，作为一个物种的一次进化。</a>」</p>\n<p>请不要让 web 再<a href=\"https://zhuanlan.zhihu.com/p/22561084\" title=\"Web 在继续离我们远去\" target=\"_blank\" rel=\"external\">继续离我们远去</a>，浏览器厂商们已经重新走到了一起，而下一棒将是交到我们 web 应用开发者的手上。<a href=\"youtu.be/y1B2c3ZD9fk?t=1h14m48s\" title=\"WWDC 2017\">乔布斯曾相信 web 应用才移动应用的未来</a>，那就让我们用代码证明给这个世界看吧。</p>\n<p><strong>让我们的用户，也像我们这般热爱 web 吧。</strong></p>\n<p>黄玄，于 12 月的北京。</p>\n<hr>\n<p><em>注：在笔者撰文期间，Google 在 Google China Developers Days 上宣布了 developers.google.cn 域名的启用，方便国内开发者访问。对于文中所有链向 developers.google.com 的参考文献，应该都可以在 cn 站点中找到。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文首发于<a href=\"http://geek.csdn.net/news/detail/135595\" target=\"_blank\" rel=\"external\">《程序员》</a>，发布于 <a href=\"https://huangxuan.me\" target=\"_blank\" rel=\"external\">Hux Blog</a>、<a href=\"https://zhuanlan.zhihu.com/FrontendMagazine\" target=\"_blank\" rel=\"external\">前端外刊评论</a>，转载请保留链接 ;)</p>\n</blockquote>\n<h2 id=\"下一代-Web-应用？\"><a href=\"#下一代-Web-应用？\" class=\"headerlink\" title=\"下一代 Web 应用？\"></a>下一代 Web 应用？</h2><p>近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。</p>\n<p>包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 web 应用需求的前端框架及其生态，也涌现出了像<a href=\"http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/\" title=\"Isomorphic JavaScript: The Future of Web Apps\" target=\"_blank\" rel=\"external\">同构 JavaScript</a>与<a href=\"https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.unrzyz3b2\" title=\"Universal JavaScript\" target=\"_blank\" rel=\"external\">通用 JavaScript 应用</a>这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 web 应用架构方式，可以说是百花齐放。</p>\n<p>但是，Web 应用在移动时代并没有达到其在桌面设备上流行的程度。究其原因，尽管上述的各种方案已经充分利用了现有的 JavaScript 计算能力、CSS 布局能力、HTTP 缓存与浏览器 API 对当代基于 <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\" title=\"Ajax - Wikipedia\" target=\"_blank\" rel=\"external\">Ajax</a> 与<a href=\"https://en.wikipedia.org/wiki/Responsive_web_design\" title=\"Responsive Web Design - Wikipedia\" target=\"_blank\" rel=\"external\">响应式设计</a>的 web 应用模型的性能与体验带来了工程角度的巨大突破，我们仍然无法在不借助原生程序辅助浏览器的前提下突破 web 平台本身对 web 应用固有的桎梏：<strong>客户端软件（即网页）需要下载所带来的网络延迟；与 Web 应用依赖浏览器作为入口所带来的体验问题。</strong></p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg\" alt=\"\"><br><em>Web 与原生应用在移动平台上的使用时长对比 <a href=\"https://developers.google.com/web/events/pwaroadshow/\" target=\"_blank\" rel=\"external\">图片来源: Google</a></em></p>\n<p>在桌面设备上，由于网络条件稳定，屏幕尺寸充分，交互方式趋向于多任务，这两点造成的负面影响对比 web 应用免于安装、随叫随到、无需更新等优点，瑕不掩瑜。但是在移动时代，脆弱的网络连接与全新的人机交互方式使得这两个问题被无限放大，严重制约了 web 应用在移动平台的发展。在用户眼里，原生应用不会出现「白屏」，清一色都摆在主屏幕上；而 web 应用则是浏览器这个应用中的应用，使用起来并不方便，而且加载也比原生应用要慢。</p>\n<p>Progressive Web Apps（以下简称 PWA）以及构成 PWA 的一系列关键技术的出现，终于让我们看到了彻底解决这两个平台级别问题的曙光：能够显著提高应用加载速度、甚至让 web 应用可以在离线环境使用的 Service Worker 与 Cache Storage；用于描述 web 应用元数据（metadata）、让 web 应用能够像原生应用一样被添加到主屏、全屏执行的 Web App Manifest；以及进一步提高 web 应用与操作系统集成能力，让 web 应用能在未被激活时发起推送通知的 Push API 与 Notification API 等等。</p>\n<p>将这些技术组合在一起会是怎样的效果呢？「印度阿里巴巴」 —— <a href=\"https://en.wikipedia.org/wiki/Flipkart\" title=\"Flipkart - wikipedia\" target=\"_blank\" rel=\"external\">Flipkart</a> 在 2015 年一度关闭了自己的移动端网站，却在年底发布了现在最为人津津乐道的 PWA 案例 <em>FlipKart Lite</em>，成为世界上第一个支撑大规模业务的 PWA。发布的一周后它就亮相于 <a href=\"https://youtu.be/m2a9hlUFRhg\" title=\"Keynote (Chrome Dev Summit 2015)\" target=\"_blank\" rel=\"external\">Chrome Dev Summit 2015</a> 上，笔者当时就被惊艳到了。为了方便各媒介上的读者观看，笔者做了几幅图方便给大家介绍：</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41\" title=\"Building Flipkart Lite: A Progressive Web App\" target=\"_blank\" rel=\"external\">Medium.com</a></em></p>\n<p>当浏览器发现用户<a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en\" title=\"Web App Install Banners - Google Developer\" target=\"_blank\" rel=\"external\">需要</a> Flipkart Lite 时，它就会提示用户「嘿，你可以把它添加至主屏哦」（用户也可以手动添加）。这样，Flipkart Lite 就会像原生应用一样在主屏上留下一个自定义的 icon 作为入口；与一般的书签不同，当用户点击 icon 时，Flipkat Lite 将直接全屏打开，不再受困于浏览器的 UI 中，而且有自己的启动屏效果。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883#.hz4d3kw41\" title=\"Building Flipkart Lite: A Progressive Web App\" target=\"_blank\" rel=\"external\">Medium.com</a></em></p>\n<p>更强大的是，在无法访问网络时，Flipkart Lite 可以像原生应用一样照常执行，还会很骚气的变成黑白色；不但如此，曾经访问过的商品都会被缓存下来得以在离线时继续访问。在商品降价、促销等时刻，Flipkart Lite 会像原生应用一样发起推送通知，吸引用户回到应用。</p>\n<p><strong>无需担心网络延迟；有着独立入口与独立的保活机制。</strong>之前两个问题的一并解决，宣告着 web 应用在移动设备上的浴火重生：满足 PWA 模型的 web 应用，将逐渐成为移动操作系统的一等公民，并将向原生应用发起挑战与「复仇」。</p>\n<p>更令笔者兴奋的是，就在今年 11 月的 <a href=\"https://youtu.be/eI3B6x0fw9s\" title=\"Keynote (Chrome Dev Summit 2016)\" target=\"_blank\" rel=\"external\">Chrome Dev Summit 2016</a> 上，Chrome 的工程 VP Darin Fisher 介绍了 Chrome 团队正在做的一些实验：把「添加至主屏」重命名为「安装」，被安装的 PWA 不再仅以 widget 的形式显示在桌面上，而是真正做到与所有原生应用平级，一样被收纳进应用抽屉（App Drawer）里，一样出现在系统设置中 🎉🎉🎉。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg\" alt=\"\"><br><em>图片来源: Hux &amp; <a href=\"https://twitter.com/adityapunjani\" target=\"_blank\" rel=\"external\">@adityapunjani</a></em></p>\n<p>图中从左到右分别为：类似原生应用的安装界面；被收纳在应用抽屉里的 Flipkart Lite 与 Hux Blog；设置界面中并列出现的 Flipkart 原生应用与 Flipkart Lite PWA （可以看到 PWA 巨大的体积优势）</p>\n<p><strong>笔者相信，PWA 模型将继约 20 年前横空出世的 Ajax 与约 10 年前风靡移动互联网的响应式设计之后，掀起 web 应用模型的第三次根本性革命，将 web 应用带进一个全新的时代。</strong></p>\n<h2 id=\"PWA-关键技术的前世今生\"><a href=\"#PWA-关键技术的前世今生\" class=\"headerlink\" title=\"PWA 关键技术的前世今生\"></a>PWA 关键技术的前世今生</h2><h3 id=\"Web-App-Manifest\"><a href=\"#Web-App-Manifest\" class=\"headerlink\" title=\"Web App Manifest\"></a><a href=\"https://w3c.github.io/manifest/#use-cases-and-requirements\" title=\"Web App Manifest\" target=\"_blank\" rel=\"external\">Web App Manifest</a></h3><p>Web App Manifest，即通过一个清单文件向浏览器暴露 web 应用的元数据，包括名字、icon 的 URL 等，以备浏览器使用，比如在添加至主屏或推送通知时暴露给操作系统，从而增强 web 应用与操作系统的集成能力。</p>\n<p>让 web 应用在移动设备上的体验更接近原生应用的尝试其实早在 2008 年的 <a href=\"https://huangxuan.me/pwa-qcon2016/#/37\" title=\"PWA@QCon2016 #37\" target=\"_blank\" rel=\"external\">iOS 1.1.3 与 iOS 2.1.0 </a>时就开始了，它们分别为 web 应用增加了对自定义 icon 和全屏打开的支持。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif\" alt=\"\"><br><em>图片来源: <a href=\"http://appleinsider.com/articles/08/10/03/latest_iphone_software_supports_full_screen_web_apps.html\" target=\"_blank\" rel=\"external\">appleinsider.com</a></em></p>\n<p>但是很快，随着越来越多的私有平台通过 <code>&lt;meta&gt;</code>/<code>&lt;link&gt;</code> 标签来为 web 应用添加「私货」，<code>&lt;head&gt;</code> 很快就被塞满了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Add to homescreen for Safari on iOS --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Lighten\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add to homescreen for Chrome on Android --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">name</span>=<span class=\"string\">\"theme-color\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#000000\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Icons for iOS and Android Chrome M31~M38 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"144x144\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-144x144-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"114x114\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-114x114-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"72x72\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-72x72-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"apple-touch-icon-precomposed\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/apple-touch-icon-57x57-precomposed.png\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Icon for Android Chrome, recommended --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"196x196\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/touch-icon-196x196.png\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Tile icon for Win8 (144x144 + tile color) --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileImage\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"images/touch/ms-touch-icon-144x144-precomposed.png\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msapplication-TileColor\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"#3372DF\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Generic Icon --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/touch/touch-icon-57x57.png\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>显然，这种做法并不优雅：分散又重复的元数据定义多余且难以维持同步，与 html 耦合在一起也加重了浏览器检查元数据未来变动的成本。与此同时，社区里开始出现使用 manifest 文件以中心化地描述元数据的方案，比如 <a href=\"https://developer.chrome.com/extensions/manifest\" title=\"Chrome Apps Manifest\" target=\"_blank\" rel=\"external\">Chrome Extension、 Chrome Hosted Web Apps (2010)</a> 与 <a href=\"https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS/Manifest\" title=\"Firefox OS App Manifest\" target=\"_blank\" rel=\"external\">Firefox OS App Manifest (2011)</a> 使用 JSON；<a href=\"http://cordova.apache.org/docs/en/6.x/config_ref/index.html\" title=\"Config.xml - Apache Cordova\" target=\"_blank\" rel=\"external\">Cordova</a> 与 <a href=\"https://msdn.microsoft.com/en-us/library/dn320426%28v=vs.85%29.aspx\" title=\"Browser configuration schema reference - MSDN\" target=\"_blank\" rel=\"external\">Windows Pinned Site</a> 使用 XML；</p>\n<p>2013 年，W3C WebApps 工作组开始对基于 JSON 的 Manifest 进行标准化，于同年年底发布<a href=\"https://www.w3.org/TR/2013/WD-appmanifest-20131217/\" title=\"Manifest for web apps and bookmarks - First Public Working Draft\" target=\"_blank\" rel=\"external\">第一份公开 Working Draft</a>，并逐渐演化成为今天的 W3C Web App Manifest：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"Manifest Sample\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Web Application Manifest Sample\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"icons\"</span>: [&#123;</div><div class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-2x.png\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"96x96\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></div><div class=\"line\">   &#125;],</div><div class=\"line\">  <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"/sample/\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"/sample/index.html\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"orientation\"</span>: <span class=\"string\">\"landscape\"</span></div><div class=\"line\">  <span class=\"string\">\"theme_color\"</span>: <span class=\"string\">\"#000\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#fff\"</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- document --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"manifest\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/manifest.json\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>诸如 <code>name</code>、<code>icons</code>、<code>display</code> 都是我们比较熟悉的，而大部分新增的成员则为 web 应用带来了一系列以前 web 应用想做却做不到（或在之前只能靠 hack）的新特性：</p>\n<ul>\n<li><code>scope</code>：定义了 web 应用的浏览作用域，比如作用域外的 URL 就会打开浏览器而不会在当前 PWA 里继续浏览。</li>\n<li><code>start_url</code>：定义了一个 PWA 的入口页面。比如说你添加 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a> 的任何一个文章到主屏，从主屏打开时都会访问 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a> 的主页。</li>\n<li><code>orientation</code>：终于，我们可以锁定屏幕旋转了（喜极而泣…）</li>\n<li><code>theme_color</code>/<code>background_color</code>：主题色与背景色，用于配置一些可定制的操作系统 UI 以提高用户体验，比如 Android 的状态栏、任务栏等。</li>\n</ul>\n<p>这个清单的成员还有很多，比如用于声明「对应原生应用」的 <code>related_applications</code> 等等，本文就不一一列举了。作为 PWA 的「户口本」，承载着 web 应用与操作系统集成能力的重任，Web App Manifest 还将在日后不断扩展，以满足 web 应用高速演化的需要。</p>\n<h3 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a><a href=\"https://w3c.github.io/ServiceWorker/\" title=\"Service Worker\" target=\"_blank\" rel=\"external\">Service Worker</a></h3><p>我们原有的整个 Web 应用模型，都是构建在「用户能上网」的前提之下的，所以一离线就只能玩小恐龙了。其实，对于「让 web 应用离线执行」这件事，Service Worker 至少是 web 社区的第三次尝试了。</p>\n<p>故事可以追溯到 2007 年的 <a href=\"https://en.wikipedia.org/wiki/Google_Gears\" title=\"Gears - Wikipedia\" target=\"_blank\" rel=\"external\">Google Gears</a>：为了让自家的 Gmail、Youtube、Google Reader 等 web 应用可以在本地存储数据与离线执行，Google 开发了一个浏览器拓展来增强 web 应用。Google Gears 支持 IE 6、Safari 3、Firefox 1.5 等浏览器；要知道，那一年 Chrome 都还没出生呢。</p>\n<p>在 Gears API 中，我们通过向 LocalServer 模块提交一个缓存文件清单来实现离线支持：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Somewhere in your javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> localServer = google.gears.factory.create(<span class=\"string\">\"bata.localserver\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> store = localServer.createManagedStore(STORE_NAME);</div><div class=\"line\">store.manifestUrl = <span class=\"string\">\"manifest.json\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// manifest.json - 假设 JSON 有注释</div><div class=\"line\">&#123;</div><div class=\"line\">　　\"betaManifestVersion\":　1,</div><div class=\"line\">　　\"version\": 　\"1.0\",</div><div class=\"line\">　　\"entries\":　[　</div><div class=\"line\">　　　　&#123;　\"url\": 　\"index.html\"&#125;,</div><div class=\"line\">　　　　&#123;　\"url\": 　\"main.js\"&#125;</div><div class=\"line\">　　]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>是不是感到很熟悉？好像 <a href=\"https://www.w3.org/TR/2011/WD-html5-20110525/offline.html\" title=\"HTML5 5.6 Offline Web Applications\" target=\"_blank\" rel=\"external\">HTML5 规范</a>中的 Application Cache 也是类似的东西？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"cache.appcache\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">CACHE</span> <span class=\"selector-tag\">MANIFEST</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">CACHE</span>:</div><div class=\"line\"><span class=\"selector-tag\">index</span><span class=\"selector-class\">.html</span></div><div class=\"line\"><span class=\"selector-tag\">main</span><span class=\"selector-class\">.js</span></div></pre></td></tr></table></figure>\n<p>是的，Gears 的 LocalServer 就是后来大家所熟知的 App Cache 的前身，大约从 <a href=\"https://www.w3.org/TR/offline-webapps/\" title=\"Offline Web Applications\" target=\"_blank\" rel=\"external\">2008</a> 年开始 W3C 就开始尝试将 Gears 进行标准化了；除了 LocalServer，Gears 中用于提供并行计算能力的 WorkerPool 模块与用于提供本地数据库与 SQL 支持的 Database 模块也分别是日后 Web Worker 与 Web SQL Database（后被废弃）的前身。</p>\n<p>HTML5 App Cache 作为第二波「让 web 应用离线执行」的尝试，确实也服务了比如 Google Doc、尤雨溪早年作品 HTML5 Clear、以及一直用 web 应用作为自己 iOS 应用的 FT.com（Financial Times）等不少 web 应用。那么，还有 Service Worker 什么事呢？  </p>\n<p>是啊，如果 App Cache 没有被设计得<a href=\"https://huangxuan.me/sw-101-gdgdf/#/12\" title=\"SW-101@DevFest #12\" target=\"_blank\" rel=\"external\">烂到完全不可编程、无法清理缓存、几乎没有路由机制、出了 Bug 一点救都没有</a>，可能就真没 Service Worker 什么事了。<a href=\"https://huangxuan.me/sw-101-gdgdf/#/13\" title=\"SW-101@DevFest #13\" target=\"_blank\" rel=\"external\">App Cache 已经在前不久定稿的 HTML5.1 中被拿掉了，W3C 为了挽救 web 世界真是不惜把自己的脸都打肿了……</a></p>\n<p>时至今日，我们终于迎来了 Service Worker 的曙光。简单来说，Service Worker 是一个可编程的 Web Worker，它就像一个位于浏览器与网络之间的客户端代理，可以拦截、处理、响应流经的 HTTP 请求；配合随之引入 Cache Storage API，你可以自由管理 HTTP 请求文件粒度的缓存，这使得 Service Worker 可以从缓存中向 web 应用提供资源，即使是在离线的环境下。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-sw.png\" alt=\"\"><br><em>Service Worker 就像一个运行在客户端的代理</em></p>\n<p>比如说，我们可以给网页 <code>foo.html</code> 注册这么一个 Service Worker，它将劫持由 <code>foo.html</code> 发起的一切 HTTP 请求，并统统返回未设置 <code>Content-Type</code> 的 <code>Hello World!</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.onfetch = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  e.respondWith(<span class=\"keyword\">new</span> Response(<span class=\"string\">'Hello World!'</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Service Worker 第一次发布于 2014 年的 Google IO 上，目前已处于 W3C 工作草案的状态。其设计吸取了 Application Cache 的失败经验，作为 web 应用的开发者的你有着完全的控制能力；同时，它还借鉴了 Chrome 多年来在 Chrome Extension 上的设计经验（Chrome Background Pages 与 Chrome Event Pages），采用了基于「事件驱动」的唤醒机制，以大幅节省后台计算的能耗。比如上面的 <code>fetch</code> 其实就是会唤醒 Service Worker 的事件之一。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png\" alt=\"\"><br><em>Service Worker 的生命周期</em></p>\n<p>除了类似 <code>fetch</code> 这样的功能事件外，Service Worker 还提供了一组生命周期事件，包括安装、激活等等。比如，在 Service Worker 的「安装」事件中，我们可以把 web 应用所需要的资源统统预先下载并缓存到 Cache Storage 中去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.oninstall = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  e.waitUntil(</div><div class=\"line\">    caches.open(<span class=\"string\">'installation'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span>  cache.addAll([</div><div class=\"line\">        <span class=\"string\">'./'</span>,</div><div class=\"line\">        <span class=\"string\">'./styles.css'</span>,</div><div class=\"line\">        <span class=\"string\">'./script.js'</span></div><div class=\"line\">      ]))</div><div class=\"line\">  )</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这样，当用户离线，网络无法访问时，我们就可以从缓存中启动我们的 web 应用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//sw.js</span></div><div class=\"line\">self.onfetch = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> fetched = fetch(e.request)</div><div class=\"line\">  <span class=\"keyword\">const</span> cached = caches.match(e.request)</div><div class=\"line\"></div><div class=\"line\">  e.respondWith(</div><div class=\"line\">    fetched.catch(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> cached)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，Service Worker 被设计为一个相对底层（low-level）、高度可编程、子概念众多，也因此异常灵活且强大的 API，故本文只能展示它的冰山一角。出于安全考虑，注册 Service Worker 要求你的 web 应用部署于 HTTPS 协议下，以免利用 Service Worker 的中间人攻击。笔者在今年 GDG 北京的 DevFest 上分享了 <a href=\"https://huangxuan.me/2016/11/20/sw-101-gdgdf/\" target=\"_blank\" rel=\"external\">Service Worker 101</a>，涵盖了 Service Worker 譬如「网络优先」、「缓存优先」、「网络与缓存比赛」这些更复杂的缓存策略、学习资料、以及<a href=\"https://github.com/Huxpro/sw-101-gdgdf\" target=\"_blank\" rel=\"external\">示例代码</a>，可以供大家参考。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/sw-race.png\" alt=\"\"><br><em>Service Worker 的一种缓存策略：让网络请求与读取缓存比赛</em></p>\n<p>你也可以尝试在支持 PWA 的浏览器中访问笔者的博客 <a href=\"https://huangxuan.me\" title=\"Hux Blog\" target=\"_blank\" rel=\"external\">Hux Blog</a>，感受 Service Worker 的实际效果：所有访问过的页面都会被缓存并允许在离线环境下继续访问，所有未访问过的页面则会在离线环境下展示一个自定义的离线页面。</p>\n<p>在笔者看来，<strong>Service Worker 对 PWA 的重要性相当于 <code>XMLHTTPRequest</code> 之于 Ajax，媒体查询（Media Query）之于响应式设计，是支撑 PWA 作为「下一代 web 应用模型」的最核心技术。</strong>由于 Service Worker 可以与包括 Indexed DB、Streams 在内的大部分 DOM 无关 API 进行交互，它的潜力简直无可限量。笔者几乎可以断言，Service Worker 将在未来十年里成为 web 客户端技术工程化的兵家必争之地，带来「离线优先（Offline-first）」的架构革命。</p>\n<h3 id=\"Push-Notification\"><a href=\"#Push-Notification\" class=\"headerlink\" title=\"Push Notification\"></a>Push Notification</h3><p>PWA 推送通知中的「推送」与「通知」，其实使用的是两个不同但又相得益彰的 API：</p>\n<p><a href=\"https://notifications.spec.whatwg.org/\" title=\"Notification API\" target=\"_blank\" rel=\"external\">Notification API</a> 相信大家并不陌生，它负责所有与通知本身相关的机制，比如通知的权限管理、向操作系统发起通知、通知的类型与音效，以及提供通知被点击或关闭时的回调等等，目前国内外的各大网站（尤其在桌面端）都有一定的使用。Notification API 最早应该是在 <a href=\"https://www.html5rocks.com/en/tutorials/notifications/quick/\" title=\"Using the Notification API\" target=\"_blank\" rel=\"external\">2010</a> 年前后由 Chromium 提出<a href=\"http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification\" title=\"API Specification - The Chromium Projects\" target=\"_blank\" rel=\"external\">草案</a>以 <code>webkitNotifications</code> 前缀方式实现；随着 2011 年进入标准化；2012 年在 Safari 6（Mac OSX 10.8+）上获得支持；2015 年 Notification API 成为 <a href=\"https://www.w3.org/TR/notifications/\" title=\"Web Notifications - W3C\" target=\"_blank\" rel=\"external\">W3C Recommendation</a>；2016 年 <a href=\"https://blogs.windows.com/msedgedev/2016/05/16/web-notifications-microsoft-edge/#2VBm890EjvAvUcgE.97\" target=\"_blank\" rel=\"external\">Edge 的支持</a>；Web Notifications 已经在桌面浏览器中获得了全面支持（Chrome、Edge、Firefox、Opera、Safari）的成就。</p>\n<p><a href=\"http://w3c.github.io/push-api/\" title=\"Push API\" target=\"_blank\" rel=\"external\">Push API</a> 的出现则让推送服务具备了向 web 应用推送消息的能力，它定义了 web 应用如何向推送服务发起订阅、如何响应推送消息，以及 web 应用、应用服务器与推送服务之间的鉴权与加密机制；由于 Push API 并不依赖 web 应用与浏览器 UI 存活，所以即使是在 web 应用与浏览器未被用户打开的时候，也可以通过后台进程接受推送消息并调用 Notification API 向用户发出通知。值得一提的是，Mac OSX 10.9 Mavericks 与 Safari 7 在 2013 年就发布了自己的私有推送支持，基于 APNS 的 <a href=\"https://developer.apple.com/notifications/safari-push-notifications/\" title=\"Safari Push Notifications\" target=\"_blank\" rel=\"external\">Safari Push Notifications</a>。</p>\n<p>在 PWA 中，我们利用 Service Worker 的后台计算能力结合 Push API 对推送事件进行响应，并通过 Notification API 实现通知的发出与处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sw.js</span></div><div class=\"line\">self.addEventListener(<span class=\"string\">'push'</span>, event =&gt; &#123;</div><div class=\"line\">  event.waitUntil(</div><div class=\"line\">    <span class=\"comment\">// Process the event and display a notification.</span></div><div class=\"line\">    self.registration.showNotification(<span class=\"string\">\"Hey!\"</span>)</div><div class=\"line\">  );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">self.addEventListener(<span class=\"string\">'notificationclick'</span>, event =&gt; &#123;  </div><div class=\"line\">  <span class=\"comment\">// Do something with the event  </span></div><div class=\"line\">  event.notification.close();  </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">self.addEventListener(<span class=\"string\">'notificationclose'</span>, event =&gt; &#123;  </div><div class=\"line\">  <span class=\"comment\">// Do something with the event  </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>对于 Push Notification，笔者的几次分享中一直都提的稍微少一些，一是因为 Push API 还处于 Editor Draft 的状态，二是目前浏览器与推送服务间的协议支持还不够成熟：Chrome（与其它基于 Blink 的浏览器）在 Chromium 52 之前只支持基于 Google 私有的 GCM/FCM 服务进行通知推送。不过好消息是，继 Firefox 44 之后，Chrome 52 与 Opera 39 也紧追其后实现了正在由 IETF 进行标准化的 <a href=\"https://tools.ietf.org/html/draft-ietf-webpush-protocol-12\" title=\"Web Push Protocol\" target=\"_blank\" rel=\"external\">Web 推送协议（Web Push Protocol）</a>。</p>\n<p>如果你已经在使用 Google 的云服务（比如 Firebase），并且主要面向的是海外用户，那么在 web 应用上支持基于 GCM/FCM 的推送通知并不是一件费力的事情，笔者推荐你阅读一下 Google Developers 的<a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/\" title=\"Web Push Notifications - Google Developer\" target=\"_blank\" rel=\"external\">系列文章</a>，很多国外公司已经玩起来了。</p>\n<h2 id=\"从-Hybrid-到-PWA，从封闭到开放\"><a href=\"#从-Hybrid-到-PWA，从封闭到开放\" class=\"headerlink\" title=\"从 Hybrid 到 PWA，从封闭到开放\"></a>从 Hybrid 到 PWA，从封闭到开放</h2><p>2008 年，当移动时代来临，<a href=\"https://huangxuan.me/pwa-qcon2016/#/17\" title=\"PWA@QCon2016 #17\" target=\"_blank\" rel=\"external\">唱衰移动 Web 的声音</a>开始出现，而浏览器的进化并不能跟上时，来自 Nitobi 的 Brian Leroux 等人创造了 <a href=\"https://cordova.apache.org/\" title=\"Apache Cordova\" target=\"_blank\" rel=\"external\">Phonegap</a>，希望它能以 Polyfill 的形式、弥补目前浏览器与移动设备间的「鸿沟」，从此开启了<a href=\"https://en.wikipedia.org/wiki/Progressive_web_app#Hybrid_Apps\" target=\"_blank\" rel=\"external\">混合应用（Hybrid Apps）</a>的时代。</p>\n<p>几年间，<a href=\"http://www.adobe.com/products/air.html\" title=\"Adobe AIR Application\" target=\"_blank\" rel=\"external\">Adobe AIR</a>、<a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx\" title=\"Windows Runtime JS API\" target=\"_blank\" rel=\"external\">Windows Runtime Apps</a>、<a href=\"https://developer.chrome.com/extensions/apps\" title=\"Chrome Packaged Apps\" target=\"_blank\" rel=\"external\">Chrome Apps</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Archive/Firefox_OS/Firefox_OS_apps/Building_apps_for_Firefox_OS\" title=\"Firefox OS Packaged Apps\" target=\"_blank\" rel=\"external\">Firefox OS</a>、<a href=\"http://www.openwebosproject.org/\" title=\"Open webOS\" target=\"_blank\" rel=\"external\">WebOS</a>、<a href=\"https://cordova.apache.org/\" title=\"Apache Cordova\" target=\"_blank\" rel=\"external\">Cordova/Phonegap</a>、<a href=\"http://electron.atom.io/\" title=\"Electron\" target=\"_blank\" rel=\"external\">Electron</a> 以及国内比如微信、淘宝，无数的 Hybrid 方案拔地而起，让 web 开发者可以在继续使用 web 客户端技术的同时，做到一些只有原生应用才能做到的事情，包括访问一些设备与操作系统 API，给用户带来更加 「Appy」 的体验，以及进入 App Store 等等。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png\" alt=\"\"><br><em>众多的 Hybrid 方案</em></p>\n<p>PWA 作为一个涵盖性术语，与过往的这些或多或少通过私有平台 API 增强 web 应用的尝试最大的不同，在于构成 PWA 的每一项基本技术，都已经或正在被 IETF、ECMA、W3C 或 WHATWG 标准化，不出意外的话，它们都将被纳入开放 web 标准，并在不远的将来得到所有浏览器与全平台的支持。我们终于可以逃出 App Store 封闭的秘密花园，重新回到属于 web 的那片开放自由的大地。</p>\n<p>有趣的是，从上文中你也可以发现，组成 PWA 的各项技术的草案正是由上述各种私有方案背后的浏览器厂商或开发者直接贡献或间接影响的。可以说，PWA 的背后并不是某一家或两家公司，而是整个 web 社区与整个 web 规范。<strong>正是因为这种开放与去中心化的力量，使得万维网（World Wide Web）能够成为当今世界上跨平台能力最强、且几乎是唯一一个具备这种跨平台能力的应用平台。</strong></p>\n<p><a href=\"http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/\" title=\"PhoneGap Beliefs, Goals, and Philosophy\" target=\"_blank\" rel=\"external\">「我们相信 Web，是因为相信它是解决设备差异化的终极方案；我们相信，当 Web 在今天做不到一件事的时候，是因为它还没来得及去实现，而不是因为他做不到。而 Phonegap，它的终极目的就是消失在 Web 标准的背后。」</a></p>\n<p>在不丢失 web 的开放灵魂，在不需要依靠 Hybrid 把应用放在 App Store 的前提下，让 web 应用能够渐进式地跳脱出浏览器的标签，变成用户眼中的 App。这是 Alex Russell 在 2015 年提出 PWA 概念的<a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\" title=\"Progressive Web Apps: Escaping Tabs Without Losing Our Soul\" target=\"_blank\" rel=\"external\">原委</a>。</p>\n<p>而又正因为 web 是一个整体，PWA 可以利用的技术远不止上述的几个而已：Ajax、响应式设计、JavaScript 框架、ECMAScript Next、CSS Next、Houdini、Indexed DB、Device APIs、Web Bluetooth、Web Socket、Web Payment、<a href=\"https://wicg.github.io/BackgroundSync/spec/\" title=\"Web Background Synchronization - WICG\" target=\"_blank\" rel=\"external\">孵化</a>中的 <a href=\"developers.google.com/web/updates/2015/12/background-sync\" title=\"Background Sync - Google Developers\">Background Sync API</a>、<a href=\"https://streams.spec.whatwg.org/\" title=\"Streams\" target=\"_blank\" rel=\"external\">Streams</a>、WebVR……开放 Web 世界 27 年来的发展以及未来的一切，都与 PWA 天作之合。</p>\n<h2 id=\"鱼与熊掌的兼得\"><a href=\"#鱼与熊掌的兼得\" class=\"headerlink\" title=\"鱼与熊掌的兼得\"></a>鱼与熊掌的兼得</h2><p>经过几年来的摸索，整个互联网行业仿佛在「Web 应用 vs. 原生应用」这个问题上达成了共识：</p>\n<ul>\n<li>web 应用是鱼：迭代快，获取用户成本低；跨平台强体验弱，开发成本低。<strong>适合拉新</strong>。</li>\n<li>原生应用是熊掌：迭代慢，获取用户成本高；跨平台弱体验强，开发成本高。<strong>适合保活</strong>。</li>\n</ul>\n<p>要知道，虽然用户花在原生应用上的时间要明显多于 web 应用，但其中<a href=\"http://marketingland.com/report-mobile-users-spend-80-percent-time-just-five-apps-116858\" title=\"Report: Mobile Users Spend 80 Percent Of Time In Just Five Apps\" target=\"_blank\" rel=\"external\">有 80% 的时间是花在前五个应用中的</a>。<a href=\"http://www.recode.net/2016/9/16/12933780/average-app-downloads-per-month-comscore\" title=\"Half of U.S. smartphone users download zero apps per month\" target=\"_blank\" rel=\"external\">调查显示，美国有一半的智能手机用户平均每月新 App 安装量为零</a>，而月均网站访问量却有 100 个，更别提 Google Play 上<a href=\"https://youtu.be/EUthgV-U05w\" title=\"AdWords for App Promotion - Google\" target=\"_blank\" rel=\"external\">有 60% 的应用从未被人下载过了</a>。于是，整个行业的产品策略清一色地<strong>「拿鱼换熊掌」</strong>，比如笔者的老东家阿里旅行（飞猪旅行），web 应用布满阿里系各种渠道，提供「优秀的第一手体验」，等你用的开心了，再引诱你去下载安装原生应用。</p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg\" alt=\"\"><br><em>原生应用、当代 Web 与 PWA 图片来源: Hux &amp; <a href=\"https://developers.google.com/web/events/pwaroadshow/\" target=\"_blank\" rel=\"external\">Google</a></em></p>\n<p>但是，PWA 的出现，让鱼与熊掌兼得变成了可能 —— 它同时具备了 web 应用与原生应用的优点，有着自己独有的先进性：「浏览器 -&gt; 添加至主屏/安装 -&gt; 具备原生应用体验的 PWA -&gt; 推送通知 -&gt; 具备原生应用体验的 PWA」，PWA 自身就包含着从拉新到保活的闭环。</p>\n<p>除此之外，PWA 还继承了 web 应用的另外两大优点：<strong>无需先付出几十兆的下载安装成本即可开始使用</strong>，以及<strong>不需要经过应用超市审核就可以发布新版本</strong>。所以，PWA 可以称得上是一种「流式应用（Streamable App）」与「常青应用（Evergreen App）」</p>\n<h2 id=\"未来到来了吗\"><a href=\"#未来到来了吗\" class=\"headerlink\" title=\"未来到来了吗\"></a>未来到来了吗</h2><p>在笔者分享 PWA 的经历中，最不愿意回答的两个问题莫过于「PWA 已经被广泛支持了吗？」以及「PWA 与 ABCDEFG 这些技术方案相比有什么优劣？」，但是这确实是两个逃不开的问题。</p>\n<h3 id=\"PWA-的支持情况？\"><a href=\"#PWA-的支持情况？\" class=\"headerlink\" title=\"PWA 的支持情况？\"></a>PWA 的支持情况？</h3><p>当我们说到 PWA 是否被支持时，其实我们在说的是 PWA 背后的几个关键技术都得到支持了没有。以浏览器内核来划分的话，Blink（Chrome、Oprea、Samsung Internet 等）与 Gecko（Firefox）都已经实现了 PWA 所需的所有关键技术（👏👏👏），并已经开始探寻更多的可能性。EdgeHTML（Edge）<a href=\"https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/\" title=\"The Progress of Web Apps - MSEdgeDev Blog\" target=\"_blank\" rel=\"external\">简直积极得不能更积极了</a>，所有的特性都已经处于「正在开发中」的<a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/\" title=\"Microsoft Edge web platform features status\" target=\"_blank\" rel=\"external\">状态</a>。最大的绊脚石仍然来自于 Webkit（Safari），尤其是在 iOS 上，上述的四个 API 都未得到支持，而且由于平台限制，第三方浏览器也无法在 iOS 上支持。（<a href=\"https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support\" title=\"Internet Explorer End of Support\" target=\"_blank\" rel=\"external\">什么你说 IE？</a>）</p>\n<p>不过，也不要气馁，Webkit 不但在它 <a href=\"https://trac.webkit.org/wiki/FiveYearPlanFall2015\" target=\"_blank\" rel=\"external\">2015 年发布的五年计划</a>里提到了 Service Worker，更是已经在最近实现了 Service Worker 所<a href=\"https://jakearchibald.github.io/isserviceworkerready/\" title=\"Is Service Worker Ready?\" target=\"_blank\" rel=\"external\">依赖</a>的 Request、Response 与 Fetch API，还把 Service Worker 与 Web App Manifest 纷纷<a href=\"https://webkit.org/status/\" title=\"Webkit Feature Status\" target=\"_blank\" rel=\"external\">列入了「正在考虑」</a>的 API 中；要知道，Webkit 可是把 Web Components 中的 HTML Imports 直接<a href=\"https://webkit.org/status/#specification-web-components\" title=\"HTML Imports - Not Considering\" target=\"_blank\" rel=\"external\">列到「不考虑」里去了</a>……（其实 Firefox 也是）</p>\n<p>更何况，由于 web 社区一直以来所追求的「渐进增强、优雅降级」，一个 PWA 当然可以在 iOS 环境正常执行。<a href=\"https://cloudfour.com/thinks/why-does-the-washington-posts-progressive-web-app-increase-engagement-on-ios/\" title=\"Why does The Washington Post’s Progressive Web App increase engagement on iOS?\" target=\"_blank\" rel=\"external\">事实上，华盛顿邮报将网站迁移到 PWA 之后发现，不止是 Android，在 iOS 上也获得了 5 倍的活跃度增长</a>，（无论是不是它们之前的网站写得太烂吧），就算 iOS 现在还不支持 PWA 也<a href=\"https://cloudfour.com/thinks/ios-doesnt-support-progressive-web-apps-so-what/\" title=\"iOS doesn’t support Progressive Web Apps, so what?\" target=\"_blank\" rel=\"external\">不会怎么样</a>，我们更是有理由相信 PWA 会很快在 iOS 上到来。</p>\n<h3 id=\"PWA-vs-Others\"><a href=\"#PWA-vs-Others\" class=\"headerlink\" title=\"PWA vs. Others\"></a>PWA vs. Others</h3><p>贺老（贺师俊）曾说过：「从纯 Web 到纯 Native，之间有许多可能的点」。当考虑移动应用的技术选型时，除了 Web 与原生应用，我们还有各种不同程度的 Hybrid，还有今年爆发的诸多 JS-to-Native 方案。</p>\n<p>虽然我在上文中用了「复仇」这样的字眼，不过无论从技术还是商业的角度，我们都没必要把 web 或是 PWA 放到 Native 的对立面去看。它们当然存在竞争关系，但是更多的时候，web-only 与 app-only 的策略都是不完美的，当公司资源足够的时候，我们通常会选择同时开发两者。<a href=\"https://cloudfour.com/thinks/progressive-web-apps-simply-make-sense/?utm_source=mobilewebweekly&amp;utm_medium=email#fn-4857-1\" title=\"Progressive Web Apps Simply Make Sense\" target=\"_blank\" rel=\"external\">当然，无论与不与原生应用对比，PWA 让 web 应用变得体验更好这件事本身是毋庸置疑的。</a>「不谈场景聊技术都是扯淡」，<a href=\"https://medium.com/@owencm/the-surprising-tradeoff-at-the-center-of-question-whether-to-build-an-native-or-web-app-d2ad00c40fb2#.ym83ct2ax\" title=\"The surprising tradeoff at the center of the question whether to build a Native or Web App\" target=\"_blank\" rel=\"external\">我们仍然还是需要根据自己产品与团队的情况来决定对应的技术选型与平台策略，只是 PWA 让 web 应用在面对选型考验时更加强势了而已。</a></p>\n<p><img src=\"/img/in-post/post-nextgen-web-pwa/qcon-trend.png\" alt=\"\"><br><em>众多的技术选型，以及笔者的一种猜测</em></p>\n<p>笔者不负责任得做一些猜测：虽然<a href=\"http://zhihu.com/question/31316032/answer/75236718\" target=\"_blank\" rel=\"external\">重量级的 Hybrid 架构与基础设施</a>仍是目前不少场景下最优的解决方案；但是随着移动设备本身的硬件性能提升与新技术的成熟与普及，JS-to-Native 与以 PWA 为首的纯 web 应用，将分别从两个方向挤压 Hybrid 的生存空间，消化当前 Hybrid 架构主要解决的问题；前者将逐渐演化为类似 Xarmarin 这样针对跨平台原生应用开发的解决方案；后者将显著降低当前 Hybrid 架构的容器开发与部署成本，将 Hybrid 返璞归真为简单的 webview 调用。</p>\n<p>这种猜测当然不是没有依据的瞎猜，比如前者可以参考阿里巴巴集团级别迁移 Weex 的战略与微信小程序的 roadmap；后者则可以参考当前 Cordova 与 Ionic 两大 Hybrid 社区对 PWA 的热烈反响。</p>\n<h3 id=\"PWA-in-China\"><a href=\"#PWA-in-China\" class=\"headerlink\" title=\"PWA in China\"></a>PWA in China</h3><p>看看 Google 官方宣传较多的 PWA <a href=\"https://developers.google.com/web/showcase/\" title=\"Case Studies - Google Developers\" target=\"_blank\" rel=\"external\">案例</a>就会发现，FlipKart、Housing.com 来自印度；Lyft、华盛顿邮报来自北美；唯一来自中国的 AliExpress 主要开展的则是海外业务。</p>\n<p>由于中国的特殊性，笔者在<a href=\"https://www.zhihu.com/question/46690207/answer/104851767\" target=\"_blank\" rel=\"external\">第一次</a>聊到 PWA 时难免表现出了一定程度的悲观：</p>\n<ul>\n<li>国内较重视 iOS，而 iOS 目前还不支持 PWA。</li>\n<li>国内的 Android 实为「安卓」，不自带 Chrome 是一，可能还会有其他兼容问题。</li>\n<li>国内厂商可能并不会像三星那样对推动自家浏览器支持 PWA 那么感兴趣。</li>\n<li>依赖 GCM 推送的通知不可用，Web Push Protocol 还没有国内的推送服务实现。</li>\n<li>国内 webview 环境较为复杂（比如微信），黑科技比较多。</li>\n</ul>\n<p>反观印度，由于 Google 服务健全、标配 Chrome 的 Android 手机市占率非常高，PWA 的用户达到率简直直逼 100%，也难免获得无数好评与支持了。<strong>笔者奢望着本文能对推动 PWA 的国内环境有一定的贡献。</strong>不过无论如何，PWA 在国内的春天可能的确会来得稍微晚一点了。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>「<a href=\"https://huangxuan.me/pwa-qcon2016/#/99\" title=\"PWA@QCon2016 #97\" target=\"_blank\" rel=\"external\">我们信仰 Web，不仅仅在于软件、软件平台与单纯的技术</a>，还在于<a href=\"http://phonegap.com/blog/2012/05/09/phonegap-beliefs-goals-and-philosophy/\" title=\"PhoneGap Beliefs, Goals, and Philosophy\" target=\"_blank\" rel=\"external\">『任何人，在任何时间任何地点，都可以在万维网上发布任何信息，并被世界上的任何一个人所访问到。』而这才是 web 的最为革命之处，堪称我们人类，作为一个物种的一次进化。</a>」</p>\n<p>请不要让 web 再<a href=\"https://zhuanlan.zhihu.com/p/22561084\" title=\"Web 在继续离我们远去\" target=\"_blank\" rel=\"external\">继续离我们远去</a>，浏览器厂商们已经重新走到了一起，而下一棒将是交到我们 web 应用开发者的手上。<a href=\"youtu.be/y1B2c3ZD9fk?t=1h14m48s\" title=\"WWDC 2017\">乔布斯曾相信 web 应用才移动应用的未来</a>，那就让我们用代码证明给这个世界看吧。</p>\n<p><strong>让我们的用户，也像我们这般热爱 web 吧。</strong></p>\n<p>黄玄，于 12 月的北京。</p>\n<hr>\n<p><em>注：在笔者撰文期间，Google 在 Google China Developers Days 上宣布了 developers.google.cn 域名的启用，方便国内开发者访问。对于文中所有链向 developers.google.com 的参考文献，应该都可以在 cn 站点中找到。</em></p>\n"},{"layout":"post","title":"Mobx","subtitle":"Mobx","date":"2017-03-16T16:00:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# 话不多说先来一个栗子\n[GitHub MobxTemplate](https://github.com/AsherJia/MobxTemplate){:target=\"_blank\"}\n\n# FRP\n\n> The essence of functional reactive programming is to specify the dynamic behavior of a value completely\n> at the time of declaration. -- Heinrich Apfelmus\n\n所以，FRP 的本质是，在声明一个值的时候，同时指定他的动态行为。这个值可能是事件，也可能是数据。\n\n# 分支\n\n然后 FRP 有两个重要的分支：\n\n* 基于 Event Stream 的 FRP\n* Transparent FRP (TFRP)\n\n基于 Event Stream 的 FRP 擅长于管理 Stream，可进行 Joining, splitting, merging, mapping, sampling 等等。在需要处理多个 Event Stream 的时候非常有用，但对于简单场景来说，就过于复杂了。比如 RxJS 和 BaconJS 就属于此类。\n\nTransparent FRP 是在背后去实现 Reactive Programming 。和 Event Stream 的 FRP 一样，TFRP 会在需要的时候更新 View，不同的是 TFRP 不需要你定义如何 (How) 以及何时 (When) 更新。这一类型的框架有 Meter(Tracker)，knockoutJS 和 EmberJS 。\n\n那么已经有这么多实现了，为什么还要有 Mobx ?\n\n# Mobx\n\nMobx 和其他实现有些不同。\n\n* 同步执行 (这样监听的值始终是最新的，并且调试会方便，因为没有额外的 Promise/Async 库引入的堆栈信息)\n* 没有引入额外的数据结构，基于普通的 Object, Class, Array 实现 (更少学习成本，更新数据时更自然)\n* 独立方案 (不捆绑框架，相比 Meter, EmberJS 和 VueJS 而言)\n\n# 基本原理\n\n而要理解 mobx 的原理，我们需要一个更底层的例子。\n\n```javascript\n\nimport { observable, autorun } from 'mobx';\n\nconst counter = observable(0);\nautorun(() => {\nconsole.log('autorun', counter.get());\n});\n\ncounter.set(1);\n\n```\n\n运行结果:\n\n```javascript\n\nautorun 0\nautorun 1\n\n```\n\n大家可能会好奇，为什么 `counter.set()` 之后，`autorun` 会自动执行? 要达到这个目的，通过 `counter` 需要知道 `autorun` 是依赖他的。那么这个依赖关系是在什么时候以及如何生成的呢?\n\n先看代码，这里涉及了 `mobx` 的 `observable` 和 `autorun` 接口。与此相关的有 `Observable` 和 `Derivation` 两个类。 `Observable` 是数据源，`Derivation` 是推导。\n\n类定义如下：\n\n```javascript\n\nObservable\n  - observing: [Derivation]\n  - get()\n  - set()\n\nDerivation\n  - observer: [Observable]\n\n```\n\n然后，`autorun`执行的步骤是这样的：\n\n* 生成一个Derivation\n* 执行传入函数，计算出observing\n    * 怎么计算？访问数据是会走到Observable的get方法，通过get方法做记录\n* 在observing的Observable的observer里添加这个Derivation\n\n到这里，Observable和Derivation的依赖关联就简历起来了。\n\n那么，`counter.set()`执行之后是如何触发`autorun`的自动执行？在有了上面这一层依赖关系之后，这个就很好理解了。counter.set()执行时会从自己的observing属性里取依赖他的Derivation,并触发他们的重新执行。\n\n\n# 运行时依赖计算\n\n```javascript\n\nimport { observable, autorun } from 'mobx'\n\nconst counter = observable(0)\nconst foo = observalbe(0)\nconst bar = observable(0)\n\nautorun(() => {\n    if (counter.get() === 0) {\n        console.log('foo ', foo.get())\n    } else {\n        console.log('bar ', bar.get())\n    }\n})\n\nbar.set(10)  // no console log\ncounter.set(1) // trigger autorun\nfoo.set(100) // no console log\nbar.set(100) // trigger autorun\n\n```\n\n实际上前面的`autorun`的执行步骤是做了简化的，真实：\n\n* 生成Derivation\n* 记录oldObserving(+)\n* 执行传入函数，计算出observing\n    * 访问数据时会走到Obdervable的get()方法，通过get()方法做的记录\n* 和oldObderving做diff, 得到新增和删除列表\n* 通过前面得到的diff结果，修改Observable的observing\n\n相比之前的，增加了diff的逻辑，以达到每次执行时候动态更新依赖关系表的目的。\n\n# get/set magic\n\n大家在看前面的例子里可能会有个疑问，为啥第一个例子里可以通过 appState.counter 来设置，而后面的例子里需要用 counter.get 和 counter.set 来取值和设值?\n\n这和数据类型有关，mobx 支持的类型有 primitives, arrays, classes 和 objects 。primitives (原始类型) 只能通过 set 和 get 方法取值和设值。而 Object 则可以利用 Object.defineProperty 方法自定义 getter 和 setter 。\n\n```javascript\n\nObject.defineProperty(adm.target, propName, {\n    configurable: true,\n    enumerable: !isComputed,\n    get: function() {\n        return observable.get();\n    },\n    set: isComputed\n        ? throwingComputedValueSetter\n        : createSetter(adm, observable as ObservableValue<any>, propName)\n});\n\n```\n详见[源码](https://github.com/mobxjs/mobx/blob/44a86f45170d52368858d27ea3bc77ed583a58fa/src/types/observableobject.ts#L108-L117)\n\n# ComputedValue\n\nComputedValue 同时实现了 Observable 和 Derivation 的接口，即可以监听 Observable，也可以被 Derivation 监听。\n\n# Reaction\n\nReaction 本质上是 Derivation，但他不能再被其他 Derivation 监听。\n\n# Autorun\n\nautorun 是 Reaction 的[简单封装](https://github.com/mobxjs/mobx/blob/e195b01d0dd6516480c76a6e952dda206e612a31/src/api/autorun.ts#L14-L27)。\n\n```javascript\n\nexport function autorun(view: Lambda, scope?: any) {\n\tassertUnwrapped(view, \"autorun methods cannot have modifiers\");\n\tinvariant(typeof view === \"function\", \"autorun expects a function\");\n\tinvariant(view.length === 0, \"autorun expects a function without arguments\");\n\tif (scope)\n\t\tview = view.bind(scope);\n\n\tconst reaction = new Reaction(view.name || (\"Autorun@\" + getNextId()), function () {\n\t\tthis.track(view);\n\t});\n\treaction.schedule();\n\n\treturn reaction.getDisposer();\n}\n\n```\n\n# 同步执行\n\n其他的 TFRP 类库，比如 Tracker 和 Knockout ，数据更新后的执行都是异步的，需要等到下一个 event loop 。(可以想象成 setTimeout)\n\n而 Mobx 的执行是同步的，这样做有两个好处：\n\n* ComputedValue 在他依赖的值修改后可以马上被使用，这样你就永远不会使用一个过期的 ComputedValue\n* 调试方便，堆栈里没有冗余的 Promise / async 库\n\n# Transation\n\n由于 mobx 的更新是同步的，所以每 set 一个值，就会触发 reaction 的更新。所以为了批量更新，就引入了 transation 。\n\n```javascript\n\ntransaction(() => {\n  user.firstName = \"foo\";\n  user.lastName = \"bar\";\n});\n\n```\n\n在一些情况下，等所有的修改执行完再执行所有的 deviration 会更合适。注意 transaction 只是推迟了 deviration 的执行，本身还是同步的。\n\n# Action\n\naction 是 transation 是简单封装，支持通过 decorator 的方式调用。并且是 untrack 的，这样可以在 Derivation 里调用他。\n\n# Observe(mobx-react)\n\n第一次render时：\n    * 初始化一个 Reaction，onValidate 时会 forceUpdate Component\n    * 在 reaction.track 里执行 baseRender，建立依赖关系\n\n有数据修改时：\n    * 触发 onValidate 方法，执行 forceUpdate\n    * 触发 render 的执行 (由于在 reaction.track 里执行，所以会重新建立依赖关系)\n\nshouldComponentUpdate：\n\n    * 和 PureRenderMixin 类似的实现，阻止不必要的更新\n\ncomponentWillReact:\n\n    * 数据更新的时候触发\n    * 注意和 componentWillMount 和 componentWillUpdate 的区别\n\n[https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)\n[https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk](https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk)\n","source":"_posts/2017-03-17-mobx.markdown","raw":"---\nlayout:     post\ntitle:      \"Mobx\"\nsubtitle:   \"Mobx\"\ndate:       2017-03-17\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Mobx\n---\n\n# 话不多说先来一个栗子\n[GitHub MobxTemplate](https://github.com/AsherJia/MobxTemplate){:target=\"_blank\"}\n\n# FRP\n\n> The essence of functional reactive programming is to specify the dynamic behavior of a value completely\n> at the time of declaration. -- Heinrich Apfelmus\n\n所以，FRP 的本质是，在声明一个值的时候，同时指定他的动态行为。这个值可能是事件，也可能是数据。\n\n# 分支\n\n然后 FRP 有两个重要的分支：\n\n* 基于 Event Stream 的 FRP\n* Transparent FRP (TFRP)\n\n基于 Event Stream 的 FRP 擅长于管理 Stream，可进行 Joining, splitting, merging, mapping, sampling 等等。在需要处理多个 Event Stream 的时候非常有用，但对于简单场景来说，就过于复杂了。比如 RxJS 和 BaconJS 就属于此类。\n\nTransparent FRP 是在背后去实现 Reactive Programming 。和 Event Stream 的 FRP 一样，TFRP 会在需要的时候更新 View，不同的是 TFRP 不需要你定义如何 (How) 以及何时 (When) 更新。这一类型的框架有 Meter(Tracker)，knockoutJS 和 EmberJS 。\n\n那么已经有这么多实现了，为什么还要有 Mobx ?\n\n# Mobx\n\nMobx 和其他实现有些不同。\n\n* 同步执行 (这样监听的值始终是最新的，并且调试会方便，因为没有额外的 Promise/Async 库引入的堆栈信息)\n* 没有引入额外的数据结构，基于普通的 Object, Class, Array 实现 (更少学习成本，更新数据时更自然)\n* 独立方案 (不捆绑框架，相比 Meter, EmberJS 和 VueJS 而言)\n\n# 基本原理\n\n而要理解 mobx 的原理，我们需要一个更底层的例子。\n\n```javascript\n\nimport { observable, autorun } from 'mobx';\n\nconst counter = observable(0);\nautorun(() => {\nconsole.log('autorun', counter.get());\n});\n\ncounter.set(1);\n\n```\n\n运行结果:\n\n```javascript\n\nautorun 0\nautorun 1\n\n```\n\n大家可能会好奇，为什么 `counter.set()` 之后，`autorun` 会自动执行? 要达到这个目的，通过 `counter` 需要知道 `autorun` 是依赖他的。那么这个依赖关系是在什么时候以及如何生成的呢?\n\n先看代码，这里涉及了 `mobx` 的 `observable` 和 `autorun` 接口。与此相关的有 `Observable` 和 `Derivation` 两个类。 `Observable` 是数据源，`Derivation` 是推导。\n\n类定义如下：\n\n```javascript\n\nObservable\n  - observing: [Derivation]\n  - get()\n  - set()\n\nDerivation\n  - observer: [Observable]\n\n```\n\n然后，`autorun`执行的步骤是这样的：\n\n* 生成一个Derivation\n* 执行传入函数，计算出observing\n    * 怎么计算？访问数据是会走到Observable的get方法，通过get方法做记录\n* 在observing的Observable的observer里添加这个Derivation\n\n到这里，Observable和Derivation的依赖关联就简历起来了。\n\n那么，`counter.set()`执行之后是如何触发`autorun`的自动执行？在有了上面这一层依赖关系之后，这个就很好理解了。counter.set()执行时会从自己的observing属性里取依赖他的Derivation,并触发他们的重新执行。\n\n\n# 运行时依赖计算\n\n```javascript\n\nimport { observable, autorun } from 'mobx'\n\nconst counter = observable(0)\nconst foo = observalbe(0)\nconst bar = observable(0)\n\nautorun(() => {\n    if (counter.get() === 0) {\n        console.log('foo ', foo.get())\n    } else {\n        console.log('bar ', bar.get())\n    }\n})\n\nbar.set(10)  // no console log\ncounter.set(1) // trigger autorun\nfoo.set(100) // no console log\nbar.set(100) // trigger autorun\n\n```\n\n实际上前面的`autorun`的执行步骤是做了简化的，真实：\n\n* 生成Derivation\n* 记录oldObserving(+)\n* 执行传入函数，计算出observing\n    * 访问数据时会走到Obdervable的get()方法，通过get()方法做的记录\n* 和oldObderving做diff, 得到新增和删除列表\n* 通过前面得到的diff结果，修改Observable的observing\n\n相比之前的，增加了diff的逻辑，以达到每次执行时候动态更新依赖关系表的目的。\n\n# get/set magic\n\n大家在看前面的例子里可能会有个疑问，为啥第一个例子里可以通过 appState.counter 来设置，而后面的例子里需要用 counter.get 和 counter.set 来取值和设值?\n\n这和数据类型有关，mobx 支持的类型有 primitives, arrays, classes 和 objects 。primitives (原始类型) 只能通过 set 和 get 方法取值和设值。而 Object 则可以利用 Object.defineProperty 方法自定义 getter 和 setter 。\n\n```javascript\n\nObject.defineProperty(adm.target, propName, {\n    configurable: true,\n    enumerable: !isComputed,\n    get: function() {\n        return observable.get();\n    },\n    set: isComputed\n        ? throwingComputedValueSetter\n        : createSetter(adm, observable as ObservableValue<any>, propName)\n});\n\n```\n详见[源码](https://github.com/mobxjs/mobx/blob/44a86f45170d52368858d27ea3bc77ed583a58fa/src/types/observableobject.ts#L108-L117)\n\n# ComputedValue\n\nComputedValue 同时实现了 Observable 和 Derivation 的接口，即可以监听 Observable，也可以被 Derivation 监听。\n\n# Reaction\n\nReaction 本质上是 Derivation，但他不能再被其他 Derivation 监听。\n\n# Autorun\n\nautorun 是 Reaction 的[简单封装](https://github.com/mobxjs/mobx/blob/e195b01d0dd6516480c76a6e952dda206e612a31/src/api/autorun.ts#L14-L27)。\n\n```javascript\n\nexport function autorun(view: Lambda, scope?: any) {\n\tassertUnwrapped(view, \"autorun methods cannot have modifiers\");\n\tinvariant(typeof view === \"function\", \"autorun expects a function\");\n\tinvariant(view.length === 0, \"autorun expects a function without arguments\");\n\tif (scope)\n\t\tview = view.bind(scope);\n\n\tconst reaction = new Reaction(view.name || (\"Autorun@\" + getNextId()), function () {\n\t\tthis.track(view);\n\t});\n\treaction.schedule();\n\n\treturn reaction.getDisposer();\n}\n\n```\n\n# 同步执行\n\n其他的 TFRP 类库，比如 Tracker 和 Knockout ，数据更新后的执行都是异步的，需要等到下一个 event loop 。(可以想象成 setTimeout)\n\n而 Mobx 的执行是同步的，这样做有两个好处：\n\n* ComputedValue 在他依赖的值修改后可以马上被使用，这样你就永远不会使用一个过期的 ComputedValue\n* 调试方便，堆栈里没有冗余的 Promise / async 库\n\n# Transation\n\n由于 mobx 的更新是同步的，所以每 set 一个值，就会触发 reaction 的更新。所以为了批量更新，就引入了 transation 。\n\n```javascript\n\ntransaction(() => {\n  user.firstName = \"foo\";\n  user.lastName = \"bar\";\n});\n\n```\n\n在一些情况下，等所有的修改执行完再执行所有的 deviration 会更合适。注意 transaction 只是推迟了 deviration 的执行，本身还是同步的。\n\n# Action\n\naction 是 transation 是简单封装，支持通过 decorator 的方式调用。并且是 untrack 的，这样可以在 Derivation 里调用他。\n\n# Observe(mobx-react)\n\n第一次render时：\n    * 初始化一个 Reaction，onValidate 时会 forceUpdate Component\n    * 在 reaction.track 里执行 baseRender，建立依赖关系\n\n有数据修改时：\n    * 触发 onValidate 方法，执行 forceUpdate\n    * 触发 render 的执行 (由于在 reaction.track 里执行，所以会重新建立依赖关系)\n\nshouldComponentUpdate：\n\n    * 和 PureRenderMixin 类似的实现，阻止不必要的更新\n\ncomponentWillReact:\n\n    * 数据更新的时候触发\n    * 注意和 componentWillMount 和 componentWillUpdate 的区别\n\n[https://github.com/mobxjs/mobx](https://github.com/mobxjs/mobx)\n[https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk](https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk)\n","slug":"2017-03-17-mobx","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d767001es7t7scsxk6a5","content":"<h1 id=\"话不多说先来一个栗子\"><a href=\"#话不多说先来一个栗子\" class=\"headerlink\" title=\"话不多说先来一个栗子\"></a>话不多说先来一个栗子</h1><p><a href=\"https://github.com/AsherJia/MobxTemplate\" target=\"_blank\" rel=\"external\">GitHub MobxTemplate</a>{:target=”_blank”}</p>\n<h1 id=\"FRP\"><a href=\"#FRP\" class=\"headerlink\" title=\"FRP\"></a>FRP</h1><blockquote>\n<p>The essence of functional reactive programming is to specify the dynamic behavior of a value completely<br>at the time of declaration. – Heinrich Apfelmus</p>\n</blockquote>\n<p>所以，FRP 的本质是，在声明一个值的时候，同时指定他的动态行为。这个值可能是事件，也可能是数据。</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>然后 FRP 有两个重要的分支：</p>\n<ul>\n<li>基于 Event Stream 的 FRP</li>\n<li>Transparent FRP (TFRP)</li>\n</ul>\n<p>基于 Event Stream 的 FRP 擅长于管理 Stream，可进行 Joining, splitting, merging, mapping, sampling 等等。在需要处理多个 Event Stream 的时候非常有用，但对于简单场景来说，就过于复杂了。比如 RxJS 和 BaconJS 就属于此类。</p>\n<p>Transparent FRP 是在背后去实现 Reactive Programming 。和 Event Stream 的 FRP 一样，TFRP 会在需要的时候更新 View，不同的是 TFRP 不需要你定义如何 (How) 以及何时 (When) 更新。这一类型的框架有 Meter(Tracker)，knockoutJS 和 EmberJS 。</p>\n<p>那么已经有这么多实现了，为什么还要有 Mobx ?</p>\n<h1 id=\"Mobx\"><a href=\"#Mobx\" class=\"headerlink\" title=\"Mobx\"></a>Mobx</h1><p>Mobx 和其他实现有些不同。</p>\n<ul>\n<li>同步执行 (这样监听的值始终是最新的，并且调试会方便，因为没有额外的 Promise/Async 库引入的堆栈信息)</li>\n<li>没有引入额外的数据结构，基于普通的 Object, Class, Array 实现 (更少学习成本，更新数据时更自然)</li>\n<li>独立方案 (不捆绑框架，相比 Meter, EmberJS 和 VueJS 而言)</li>\n</ul>\n<h1 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h1><p>而要理解 mobx 的原理，我们需要一个更底层的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, autorun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> counter = observable(<span class=\"number\">0</span>);</div><div class=\"line\">autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'autorun'</span>, counter.get());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">counter.set(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">autorun <span class=\"number\">0</span></div><div class=\"line\">autorun <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>大家可能会好奇，为什么 <code>counter.set()</code> 之后，<code>autorun</code> 会自动执行? 要达到这个目的，通过 <code>counter</code> 需要知道 <code>autorun</code> 是依赖他的。那么这个依赖关系是在什么时候以及如何生成的呢?</p>\n<p>先看代码，这里涉及了 <code>mobx</code> 的 <code>observable</code> 和 <code>autorun</code> 接口。与此相关的有 <code>Observable</code> 和 <code>Derivation</code> 两个类。 <code>Observable</code> 是数据源，<code>Derivation</code> 是推导。</p>\n<p>类定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Observable</div><div class=\"line\">  - observing: [Derivation]</div><div class=\"line\">  - get()</div><div class=\"line\">  - set()</div><div class=\"line\"></div><div class=\"line\">Derivation</div><div class=\"line\">  - observer: [Observable]</div></pre></td></tr></table></figure>\n<p>然后，<code>autorun</code>执行的步骤是这样的：</p>\n<ul>\n<li>生成一个Derivation</li>\n<li>执行传入函数，计算出observing<ul>\n<li>怎么计算？访问数据是会走到Observable的get方法，通过get方法做记录</li>\n</ul>\n</li>\n<li>在observing的Observable的observer里添加这个Derivation</li>\n</ul>\n<p>到这里，Observable和Derivation的依赖关联就简历起来了。</p>\n<p>那么，<code>counter.set()</code>执行之后是如何触发<code>autorun</code>的自动执行？在有了上面这一层依赖关系之后，这个就很好理解了。counter.set()执行时会从自己的observing属性里取依赖他的Derivation,并触发他们的重新执行。</p>\n<h1 id=\"运行时依赖计算\"><a href=\"#运行时依赖计算\" class=\"headerlink\" title=\"运行时依赖计算\"></a>运行时依赖计算</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, autorun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> counter = observable(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> foo = observalbe(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> bar = observable(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (counter.get() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo '</span>, foo.get())</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar '</span>, bar.get())</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">bar.set(<span class=\"number\">10</span>)  <span class=\"comment\">// no console log</span></div><div class=\"line\">counter.set(<span class=\"number\">1</span>) <span class=\"comment\">// trigger autorun</span></div><div class=\"line\">foo.set(<span class=\"number\">100</span>) <span class=\"comment\">// no console log</span></div><div class=\"line\">bar.set(<span class=\"number\">100</span>) <span class=\"comment\">// trigger autorun</span></div></pre></td></tr></table></figure>\n<p>实际上前面的<code>autorun</code>的执行步骤是做了简化的，真实：</p>\n<ul>\n<li>生成Derivation</li>\n<li>记录oldObserving(+)</li>\n<li>执行传入函数，计算出observing<ul>\n<li>访问数据时会走到Obdervable的get()方法，通过get()方法做的记录</li>\n</ul>\n</li>\n<li>和oldObderving做diff, 得到新增和删除列表</li>\n<li>通过前面得到的diff结果，修改Observable的observing</li>\n</ul>\n<p>相比之前的，增加了diff的逻辑，以达到每次执行时候动态更新依赖关系表的目的。</p>\n<h1 id=\"get-set-magic\"><a href=\"#get-set-magic\" class=\"headerlink\" title=\"get/set magic\"></a>get/set magic</h1><p>大家在看前面的例子里可能会有个疑问，为啥第一个例子里可以通过 appState.counter 来设置，而后面的例子里需要用 counter.get 和 counter.set 来取值和设值?</p>\n<p>这和数据类型有关，mobx 支持的类型有 primitives, arrays, classes 和 objects 。primitives (原始类型) 只能通过 set 和 get 方法取值和设值。而 Object 则可以利用 Object.defineProperty 方法自定义 getter 和 setter 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(adm.target, propName, &#123;</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: !isComputed,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> observable.get();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">set</span>: isComputed</div><div class=\"line\">        ? throwingComputedValueSetter</div><div class=\"line\">        : createSetter(adm, observable <span class=\"keyword\">as</span> ObservableValue&lt;any&gt;, propName)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>详见<a href=\"https://github.com/mobxjs/mobx/blob/44a86f45170d52368858d27ea3bc77ed583a58fa/src/types/observableobject.ts#L108-L117\" target=\"_blank\" rel=\"external\">源码</a></p>\n<h1 id=\"ComputedValue\"><a href=\"#ComputedValue\" class=\"headerlink\" title=\"ComputedValue\"></a>ComputedValue</h1><p>ComputedValue 同时实现了 Observable 和 Derivation 的接口，即可以监听 Observable，也可以被 Derivation 监听。</p>\n<h1 id=\"Reaction\"><a href=\"#Reaction\" class=\"headerlink\" title=\"Reaction\"></a>Reaction</h1><p>Reaction 本质上是 Derivation，但他不能再被其他 Derivation 监听。</p>\n<h1 id=\"Autorun\"><a href=\"#Autorun\" class=\"headerlink\" title=\"Autorun\"></a>Autorun</h1><p>autorun 是 Reaction 的<a href=\"https://github.com/mobxjs/mobx/blob/e195b01d0dd6516480c76a6e952dda206e612a31/src/api/autorun.ts#L14-L27\" target=\"_blank\" rel=\"external\">简单封装</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autorun</span>(<span class=\"params\">view: Lambda, scope?: any</span>) </span>&#123;</div><div class=\"line\">\tassertUnwrapped(view, <span class=\"string\">\"autorun methods cannot have modifiers\"</span>);</div><div class=\"line\">\tinvariant(<span class=\"keyword\">typeof</span> view === <span class=\"string\">\"function\"</span>, <span class=\"string\">\"autorun expects a function\"</span>);</div><div class=\"line\">\tinvariant(view.length === <span class=\"number\">0</span>, <span class=\"string\">\"autorun expects a function without arguments\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (scope)</div><div class=\"line\">\t\tview = view.bind(scope);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">const</span> reaction = <span class=\"keyword\">new</span> Reaction(view.name || (<span class=\"string\">\"Autorun@\"</span> + getNextId()), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.track(view);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\treaction.schedule();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> reaction.getDisposer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h1><p>其他的 TFRP 类库，比如 Tracker 和 Knockout ，数据更新后的执行都是异步的，需要等到下一个 event loop 。(可以想象成 setTimeout)</p>\n<p>而 Mobx 的执行是同步的，这样做有两个好处：</p>\n<ul>\n<li>ComputedValue 在他依赖的值修改后可以马上被使用，这样你就永远不会使用一个过期的 ComputedValue</li>\n<li>调试方便，堆栈里没有冗余的 Promise / async 库</li>\n</ul>\n<h1 id=\"Transation\"><a href=\"#Transation\" class=\"headerlink\" title=\"Transation\"></a>Transation</h1><p>由于 mobx 的更新是同步的，所以每 set 一个值，就会触发 reaction 的更新。所以为了批量更新，就引入了 transation 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">transaction(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  user.firstName = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">  user.lastName = <span class=\"string\">\"bar\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在一些情况下，等所有的修改执行完再执行所有的 deviration 会更合适。注意 transaction 只是推迟了 deviration 的执行，本身还是同步的。</p>\n<h1 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p>action 是 transation 是简单封装，支持通过 decorator 的方式调用。并且是 untrack 的，这样可以在 Derivation 里调用他。</p>\n<h1 id=\"Observe-mobx-react\"><a href=\"#Observe-mobx-react\" class=\"headerlink\" title=\"Observe(mobx-react)\"></a>Observe(mobx-react)</h1><p>第一次render时：</p>\n<pre><code>* 初始化一个 Reaction，onValidate 时会 forceUpdate Component\n* 在 reaction.track 里执行 baseRender，建立依赖关系\n</code></pre><p>有数据修改时：</p>\n<pre><code>* 触发 onValidate 方法，执行 forceUpdate\n* 触发 render 的执行 (由于在 reaction.track 里执行，所以会重新建立依赖关系)\n</code></pre><p>shouldComponentUpdate：</p>\n<pre><code>* 和 PureRenderMixin 类似的实现，阻止不必要的更新\n</code></pre><p>componentWillReact:</p>\n<pre><code>* 数据更新的时候触发\n* 注意和 componentWillMount 和 componentWillUpdate 的区别\n</code></pre><p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"external\">https://github.com/mobxjs/mobx</a><br><a href=\"https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk\" target=\"_blank\" rel=\"external\">https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"话不多说先来一个栗子\"><a href=\"#话不多说先来一个栗子\" class=\"headerlink\" title=\"话不多说先来一个栗子\"></a>话不多说先来一个栗子</h1><p><a href=\"https://github.com/AsherJia/MobxTemplate\" target=\"_blank\" rel=\"external\">GitHub MobxTemplate</a>{:target=”_blank”}</p>\n<h1 id=\"FRP\"><a href=\"#FRP\" class=\"headerlink\" title=\"FRP\"></a>FRP</h1><blockquote>\n<p>The essence of functional reactive programming is to specify the dynamic behavior of a value completely<br>at the time of declaration. – Heinrich Apfelmus</p>\n</blockquote>\n<p>所以，FRP 的本质是，在声明一个值的时候，同时指定他的动态行为。这个值可能是事件，也可能是数据。</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><p>然后 FRP 有两个重要的分支：</p>\n<ul>\n<li>基于 Event Stream 的 FRP</li>\n<li>Transparent FRP (TFRP)</li>\n</ul>\n<p>基于 Event Stream 的 FRP 擅长于管理 Stream，可进行 Joining, splitting, merging, mapping, sampling 等等。在需要处理多个 Event Stream 的时候非常有用，但对于简单场景来说，就过于复杂了。比如 RxJS 和 BaconJS 就属于此类。</p>\n<p>Transparent FRP 是在背后去实现 Reactive Programming 。和 Event Stream 的 FRP 一样，TFRP 会在需要的时候更新 View，不同的是 TFRP 不需要你定义如何 (How) 以及何时 (When) 更新。这一类型的框架有 Meter(Tracker)，knockoutJS 和 EmberJS 。</p>\n<p>那么已经有这么多实现了，为什么还要有 Mobx ?</p>\n<h1 id=\"Mobx\"><a href=\"#Mobx\" class=\"headerlink\" title=\"Mobx\"></a>Mobx</h1><p>Mobx 和其他实现有些不同。</p>\n<ul>\n<li>同步执行 (这样监听的值始终是最新的，并且调试会方便，因为没有额外的 Promise/Async 库引入的堆栈信息)</li>\n<li>没有引入额外的数据结构，基于普通的 Object, Class, Array 实现 (更少学习成本，更新数据时更自然)</li>\n<li>独立方案 (不捆绑框架，相比 Meter, EmberJS 和 VueJS 而言)</li>\n</ul>\n<h1 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h1><p>而要理解 mobx 的原理，我们需要一个更底层的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, autorun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> counter = observable(<span class=\"number\">0</span>);</div><div class=\"line\">autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'autorun'</span>, counter.get());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">counter.set(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">autorun <span class=\"number\">0</span></div><div class=\"line\">autorun <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>大家可能会好奇，为什么 <code>counter.set()</code> 之后，<code>autorun</code> 会自动执行? 要达到这个目的，通过 <code>counter</code> 需要知道 <code>autorun</code> 是依赖他的。那么这个依赖关系是在什么时候以及如何生成的呢?</p>\n<p>先看代码，这里涉及了 <code>mobx</code> 的 <code>observable</code> 和 <code>autorun</code> 接口。与此相关的有 <code>Observable</code> 和 <code>Derivation</code> 两个类。 <code>Observable</code> 是数据源，<code>Derivation</code> 是推导。</p>\n<p>类定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Observable</div><div class=\"line\">  - observing: [Derivation]</div><div class=\"line\">  - get()</div><div class=\"line\">  - set()</div><div class=\"line\"></div><div class=\"line\">Derivation</div><div class=\"line\">  - observer: [Observable]</div></pre></td></tr></table></figure>\n<p>然后，<code>autorun</code>执行的步骤是这样的：</p>\n<ul>\n<li>生成一个Derivation</li>\n<li>执行传入函数，计算出observing<ul>\n<li>怎么计算？访问数据是会走到Observable的get方法，通过get方法做记录</li>\n</ul>\n</li>\n<li>在observing的Observable的observer里添加这个Derivation</li>\n</ul>\n<p>到这里，Observable和Derivation的依赖关联就简历起来了。</p>\n<p>那么，<code>counter.set()</code>执行之后是如何触发<code>autorun</code>的自动执行？在有了上面这一层依赖关系之后，这个就很好理解了。counter.set()执行时会从自己的observing属性里取依赖他的Derivation,并触发他们的重新执行。</p>\n<h1 id=\"运行时依赖计算\"><a href=\"#运行时依赖计算\" class=\"headerlink\" title=\"运行时依赖计算\"></a>运行时依赖计算</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; observable, autorun &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> counter = observable(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> foo = observalbe(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> bar = observable(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\">autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (counter.get() === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo '</span>, foo.get())</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar '</span>, bar.get())</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">bar.set(<span class=\"number\">10</span>)  <span class=\"comment\">// no console log</span></div><div class=\"line\">counter.set(<span class=\"number\">1</span>) <span class=\"comment\">// trigger autorun</span></div><div class=\"line\">foo.set(<span class=\"number\">100</span>) <span class=\"comment\">// no console log</span></div><div class=\"line\">bar.set(<span class=\"number\">100</span>) <span class=\"comment\">// trigger autorun</span></div></pre></td></tr></table></figure>\n<p>实际上前面的<code>autorun</code>的执行步骤是做了简化的，真实：</p>\n<ul>\n<li>生成Derivation</li>\n<li>记录oldObserving(+)</li>\n<li>执行传入函数，计算出observing<ul>\n<li>访问数据时会走到Obdervable的get()方法，通过get()方法做的记录</li>\n</ul>\n</li>\n<li>和oldObderving做diff, 得到新增和删除列表</li>\n<li>通过前面得到的diff结果，修改Observable的observing</li>\n</ul>\n<p>相比之前的，增加了diff的逻辑，以达到每次执行时候动态更新依赖关系表的目的。</p>\n<h1 id=\"get-set-magic\"><a href=\"#get-set-magic\" class=\"headerlink\" title=\"get/set magic\"></a>get/set magic</h1><p>大家在看前面的例子里可能会有个疑问，为啥第一个例子里可以通过 appState.counter 来设置，而后面的例子里需要用 counter.get 和 counter.set 来取值和设值?</p>\n<p>这和数据类型有关，mobx 支持的类型有 primitives, arrays, classes 和 objects 。primitives (原始类型) 只能通过 set 和 get 方法取值和设值。而 Object 则可以利用 Object.defineProperty 方法自定义 getter 和 setter 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(adm.target, propName, &#123;</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: !isComputed,</div><div class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> observable.get();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">set</span>: isComputed</div><div class=\"line\">        ? throwingComputedValueSetter</div><div class=\"line\">        : createSetter(adm, observable <span class=\"keyword\">as</span> ObservableValue&lt;any&gt;, propName)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>详见<a href=\"https://github.com/mobxjs/mobx/blob/44a86f45170d52368858d27ea3bc77ed583a58fa/src/types/observableobject.ts#L108-L117\" target=\"_blank\" rel=\"external\">源码</a></p>\n<h1 id=\"ComputedValue\"><a href=\"#ComputedValue\" class=\"headerlink\" title=\"ComputedValue\"></a>ComputedValue</h1><p>ComputedValue 同时实现了 Observable 和 Derivation 的接口，即可以监听 Observable，也可以被 Derivation 监听。</p>\n<h1 id=\"Reaction\"><a href=\"#Reaction\" class=\"headerlink\" title=\"Reaction\"></a>Reaction</h1><p>Reaction 本质上是 Derivation，但他不能再被其他 Derivation 监听。</p>\n<h1 id=\"Autorun\"><a href=\"#Autorun\" class=\"headerlink\" title=\"Autorun\"></a>Autorun</h1><p>autorun 是 Reaction 的<a href=\"https://github.com/mobxjs/mobx/blob/e195b01d0dd6516480c76a6e952dda206e612a31/src/api/autorun.ts#L14-L27\" target=\"_blank\" rel=\"external\">简单封装</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autorun</span>(<span class=\"params\">view: Lambda, scope?: any</span>) </span>&#123;</div><div class=\"line\">\tassertUnwrapped(view, <span class=\"string\">\"autorun methods cannot have modifiers\"</span>);</div><div class=\"line\">\tinvariant(<span class=\"keyword\">typeof</span> view === <span class=\"string\">\"function\"</span>, <span class=\"string\">\"autorun expects a function\"</span>);</div><div class=\"line\">\tinvariant(view.length === <span class=\"number\">0</span>, <span class=\"string\">\"autorun expects a function without arguments\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (scope)</div><div class=\"line\">\t\tview = view.bind(scope);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">const</span> reaction = <span class=\"keyword\">new</span> Reaction(view.name || (<span class=\"string\">\"Autorun@\"</span> + getNextId()), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.track(view);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\treaction.schedule();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> reaction.getDisposer();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h1><p>其他的 TFRP 类库，比如 Tracker 和 Knockout ，数据更新后的执行都是异步的，需要等到下一个 event loop 。(可以想象成 setTimeout)</p>\n<p>而 Mobx 的执行是同步的，这样做有两个好处：</p>\n<ul>\n<li>ComputedValue 在他依赖的值修改后可以马上被使用，这样你就永远不会使用一个过期的 ComputedValue</li>\n<li>调试方便，堆栈里没有冗余的 Promise / async 库</li>\n</ul>\n<h1 id=\"Transation\"><a href=\"#Transation\" class=\"headerlink\" title=\"Transation\"></a>Transation</h1><p>由于 mobx 的更新是同步的，所以每 set 一个值，就会触发 reaction 的更新。所以为了批量更新，就引入了 transation 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">transaction(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  user.firstName = <span class=\"string\">\"foo\"</span>;</div><div class=\"line\">  user.lastName = <span class=\"string\">\"bar\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在一些情况下，等所有的修改执行完再执行所有的 deviration 会更合适。注意 transaction 只是推迟了 deviration 的执行，本身还是同步的。</p>\n<h1 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p>action 是 transation 是简单封装，支持通过 decorator 的方式调用。并且是 untrack 的，这样可以在 Derivation 里调用他。</p>\n<h1 id=\"Observe-mobx-react\"><a href=\"#Observe-mobx-react\" class=\"headerlink\" title=\"Observe(mobx-react)\"></a>Observe(mobx-react)</h1><p>第一次render时：</p>\n<pre><code>* 初始化一个 Reaction，onValidate 时会 forceUpdate Component\n* 在 reaction.track 里执行 baseRender，建立依赖关系\n</code></pre><p>有数据修改时：</p>\n<pre><code>* 触发 onValidate 方法，执行 forceUpdate\n* 触发 render 的执行 (由于在 reaction.track 里执行，所以会重新建立依赖关系)\n</code></pre><p>shouldComponentUpdate：</p>\n<pre><code>* 和 PureRenderMixin 类似的实现，阻止不必要的更新\n</code></pre><p>componentWillReact:</p>\n<pre><code>* 数据更新的时候触发\n* 注意和 componentWillMount 和 componentWillUpdate 的区别\n</code></pre><p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"external\">https://github.com/mobxjs/mobx</a><br><a href=\"https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk\" target=\"_blank\" rel=\"external\">https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.4sxpfpsuk</a></p>\n"},{"layout":"post","title":"Frontend Interview Question","subtitle":"Frontend Interview Question","date":"2017-03-21T16:00:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# Lazy Man\n\n```javascript\n\nfunction _LazyMan(name){\n    this.task = [];\n    var self = this;\n    var fn = (function(n){\n        var name = n;\n        return function(){\n            console.log('Hi This is ' + name + '!');\n            self.next();\n        }\n    })(name)\n\n    this.task.push(fn);\n    setTimeout(function(){\n        self.next();\n    }, 0)\n}\n\n_LazyMan.prototype.next = function(){\n    var fn = this.task.shift();\n    fn && fn();\n}\n\n_LazyMan.prototype.eat = function(name){\n    var self = this;\n    var fn = (function(name){\n        return function(){\n            console.log('Eat ' + name + '~');\n            self.next();\n        }\n    })(name)\n    this.task.push(fn);\n    return this;\n}\n\n_LazyMan.prototype.sleep = function(time){\n    var self = this;\n    var fn = (function(time){\n        return function(){\n            setTimeout(function(){\n                console.log('Wake up after ' + time + 's!');\n                self.next();\n            }, time*1000)\n        }\n    })(time);\n    this.task.push(fn);\n    return this;\n}\n\n\nfunction LazyMan(name){\n    return new _LazyMan(name);\n}\n\nLazyMan('Hank').sleep(1).eat('sss')\n\n```\n\n# Functional add\n\n```javascript\n\nvar puls = (num) => {\n\tvar adder = function() {\n\t\tvar _args = []\n\t\tvar _adder = function _adder() {\n\t\t\t[].push.apply(_args, [].slice.call(arguments))\n\n\t\t\treturn _adder\n\t\t}\n\n\t\t_adder.toString = function() {\n\t\t\treturn _args.reduce(function(a, b) {\n\t\t\t\treturn a + b\n\t\t\t})\n\t\t}\n\n\t\treturn _adder\n\t}\n\n\treturn adder()(num)\n}\n\npuls(1)(2)\n\nvar add = (...outArguments) => {\n\tconsole.log('arguments1 ', outArguments)\n\tlet _args = [].slice.call(outArguments)\n\n\tconst adder = () => {\n\t\tconst _adder = (..._innerArugments) => {\n\t\t\tconsole.log('arguments 3 ', _innerArugments);\n\n\t\t\t[].push.apply(_args, [].slice.call(_innerArugments))\n\t\t\treturn _adder\n\t\t}\n\n\t\t_adder.toString = () => {\n\t\t\tconsole.log('ToString ', _args)\n\t\t\treturn _args.reduce((a, b) => {\n\t\t\t\treturn a + b\n\t\t\t})\n\t\t}\n\n\t\treturn _adder\n\t}\n\n\treturn adder.apply(null, [].slice.call(outArguments))\n}\n\nadd(1)(2)(3)(4)\n\n```\n\n# 运算符优先级\n\n[Mozilla](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\n```javascript\n\nfunction Foo() {\n    getName = function () {\n        console.log('1');\n    };\n    return this;\n}\nFoo.getName = function () {\n    console.log('2');\n};\nFoo.prototype.getName = function () {\n    console.log('3');\n};\nvar getName = function () {\n    console.log('4');\n};\nfunction getName() {\n    console.log(5);\n}\n\nFoo.getName() 2\ngetName() 4\nFoo().getName() 1\ngetName()  1\n\nnew Foo.getName() => new (Foo.getName()) => 2\n\nnew Foo().getName() => (new Foo()).getName() => new Foo()\n\nnew new Foo().getName() => new ((new Foo()).getName)()\n\n```\n\n# This绑定类型\n\n* 默认绑定: 就是什么都匹配不到的情况下，非严格模式this绑定到全局对象window或者global\n* 隐式绑定: 绑定到undefined;隐式绑定就是函数作为对象的属性，通过对象属性的方式调用，这个时候this绑定到对象\n* 显示绑定: 通过apply和call调用的方式\n* new绑定:\n","source":"_posts/2017-03-22-frontend-interview-question.markdown","raw":"---\nlayout:     post\ntitle:      \"Frontend Interview Question\"\nsubtitle:   \"Frontend Interview Question\"\ndate:       2017-03-22\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Frontend\n---\n\n# Lazy Man\n\n```javascript\n\nfunction _LazyMan(name){\n    this.task = [];\n    var self = this;\n    var fn = (function(n){\n        var name = n;\n        return function(){\n            console.log('Hi This is ' + name + '!');\n            self.next();\n        }\n    })(name)\n\n    this.task.push(fn);\n    setTimeout(function(){\n        self.next();\n    }, 0)\n}\n\n_LazyMan.prototype.next = function(){\n    var fn = this.task.shift();\n    fn && fn();\n}\n\n_LazyMan.prototype.eat = function(name){\n    var self = this;\n    var fn = (function(name){\n        return function(){\n            console.log('Eat ' + name + '~');\n            self.next();\n        }\n    })(name)\n    this.task.push(fn);\n    return this;\n}\n\n_LazyMan.prototype.sleep = function(time){\n    var self = this;\n    var fn = (function(time){\n        return function(){\n            setTimeout(function(){\n                console.log('Wake up after ' + time + 's!');\n                self.next();\n            }, time*1000)\n        }\n    })(time);\n    this.task.push(fn);\n    return this;\n}\n\n\nfunction LazyMan(name){\n    return new _LazyMan(name);\n}\n\nLazyMan('Hank').sleep(1).eat('sss')\n\n```\n\n# Functional add\n\n```javascript\n\nvar puls = (num) => {\n\tvar adder = function() {\n\t\tvar _args = []\n\t\tvar _adder = function _adder() {\n\t\t\t[].push.apply(_args, [].slice.call(arguments))\n\n\t\t\treturn _adder\n\t\t}\n\n\t\t_adder.toString = function() {\n\t\t\treturn _args.reduce(function(a, b) {\n\t\t\t\treturn a + b\n\t\t\t})\n\t\t}\n\n\t\treturn _adder\n\t}\n\n\treturn adder()(num)\n}\n\npuls(1)(2)\n\nvar add = (...outArguments) => {\n\tconsole.log('arguments1 ', outArguments)\n\tlet _args = [].slice.call(outArguments)\n\n\tconst adder = () => {\n\t\tconst _adder = (..._innerArugments) => {\n\t\t\tconsole.log('arguments 3 ', _innerArugments);\n\n\t\t\t[].push.apply(_args, [].slice.call(_innerArugments))\n\t\t\treturn _adder\n\t\t}\n\n\t\t_adder.toString = () => {\n\t\t\tconsole.log('ToString ', _args)\n\t\t\treturn _args.reduce((a, b) => {\n\t\t\t\treturn a + b\n\t\t\t})\n\t\t}\n\n\t\treturn _adder\n\t}\n\n\treturn adder.apply(null, [].slice.call(outArguments))\n}\n\nadd(1)(2)(3)(4)\n\n```\n\n# 运算符优先级\n\n[Mozilla](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\n```javascript\n\nfunction Foo() {\n    getName = function () {\n        console.log('1');\n    };\n    return this;\n}\nFoo.getName = function () {\n    console.log('2');\n};\nFoo.prototype.getName = function () {\n    console.log('3');\n};\nvar getName = function () {\n    console.log('4');\n};\nfunction getName() {\n    console.log(5);\n}\n\nFoo.getName() 2\ngetName() 4\nFoo().getName() 1\ngetName()  1\n\nnew Foo.getName() => new (Foo.getName()) => 2\n\nnew Foo().getName() => (new Foo()).getName() => new Foo()\n\nnew new Foo().getName() => new ((new Foo()).getName)()\n\n```\n\n# This绑定类型\n\n* 默认绑定: 就是什么都匹配不到的情况下，非严格模式this绑定到全局对象window或者global\n* 隐式绑定: 绑定到undefined;隐式绑定就是函数作为对象的属性，通过对象属性的方式调用，这个时候this绑定到对象\n* 显示绑定: 通过apply和call调用的方式\n* new绑定:\n","slug":"2017-03-22-frontend-interview-question","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d768001fs7t7ygzd9lql","content":"<h1 id=\"Lazy-Man\"><a href=\"#Lazy-Man\" class=\"headerlink\" title=\"Lazy Man\"></a>Lazy Man</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.task = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = n;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi This is '</span> + name + <span class=\"string\">'!'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.next();</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>.task.shift();</div><div class=\"line\">    fn &amp;&amp; fn();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Eat '</span> + name + <span class=\"string\">'~'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wake up after '</span> + time + <span class=\"string\">'s!'</span>);</div><div class=\"line\">                self.next();</div><div class=\"line\">            &#125;, time*<span class=\"number\">1000</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(time);</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LazyMan(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'Hank'</span>).sleep(<span class=\"number\">1</span>).eat(<span class=\"string\">'sss'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Functional-add\"><a href=\"#Functional-add\" class=\"headerlink\" title=\"Functional add\"></a>Functional add</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> puls = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _args = []</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_adder</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t[].push.apply(_args, [].slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t_adder.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> adder()(num)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">puls(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\">(<span class=\"params\">...outArguments</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'arguments1 '</span>, outArguments)</div><div class=\"line\">\t<span class=\"keyword\">let</span> _args = [].slice.call(outArguments)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">const</span> adder = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> _adder = <span class=\"function\">(<span class=\"params\">..._innerArugments</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'arguments 3 '</span>, _innerArugments);</div><div class=\"line\"></div><div class=\"line\">\t\t\t[].push.apply(_args, [].slice.call(_innerArugments))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t_adder.toString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ToString '</span>, _args)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> adder.apply(<span class=\"literal\">null</span>, [].slice.call(outArguments))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"external\">Mozilla</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.getName() <span class=\"number\">2</span></div><div class=\"line\">getName() <span class=\"number\">4</span></div><div class=\"line\">Foo().getName() <span class=\"number\">1</span></div><div class=\"line\">getName()  <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Foo.getName() =&gt; <span class=\"keyword\">new</span> (Foo.getName()) =&gt; <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Foo().getName() =&gt; <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> Foo(</span>)).<span class=\"params\">getName</span><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> Foo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName() =&gt; <span class=\"keyword\">new</span> ((<span class=\"keyword\">new</span> Foo()).getName)()</div></pre></td></tr></table></figure>\n<h1 id=\"This绑定类型\"><a href=\"#This绑定类型\" class=\"headerlink\" title=\"This绑定类型\"></a>This绑定类型</h1><ul>\n<li>默认绑定: 就是什么都匹配不到的情况下，非严格模式this绑定到全局对象window或者global</li>\n<li>隐式绑定: 绑定到undefined;隐式绑定就是函数作为对象的属性，通过对象属性的方式调用，这个时候this绑定到对象</li>\n<li>显示绑定: 通过apply和call调用的方式</li>\n<li>new绑定:</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lazy-Man\"><a href=\"#Lazy-Man\" class=\"headerlink\" title=\"Lazy Man\"></a>Lazy Man</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.task = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name = n;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi This is '</span> + name + <span class=\"string\">'!'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.next();</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>.task.shift();</div><div class=\"line\">    fn &amp;&amp; fn();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Eat '</span> + name + <span class=\"string\">'~'</span>);</div><div class=\"line\">            self.next();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(name)</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wake up after '</span> + time + <span class=\"string\">'s!'</span>);</div><div class=\"line\">                self.next();</div><div class=\"line\">            &#125;, time*<span class=\"number\">1000</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)(time);</div><div class=\"line\">    <span class=\"keyword\">this</span>.task.push(fn);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LazyMan(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'Hank'</span>).sleep(<span class=\"number\">1</span>).eat(<span class=\"string\">'sss'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Functional-add\"><a href=\"#Functional-add\" class=\"headerlink\" title=\"Functional add\"></a>Functional add</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> puls = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> adder = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _args = []</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _adder = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_adder</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t[].push.apply(_args, [].slice.call(<span class=\"built_in\">arguments</span>))</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t_adder.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> adder()(num)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">puls(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\">(<span class=\"params\">...outArguments</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'arguments1 '</span>, outArguments)</div><div class=\"line\">\t<span class=\"keyword\">let</span> _args = [].slice.call(outArguments)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">const</span> adder = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> _adder = <span class=\"function\">(<span class=\"params\">..._innerArugments</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'arguments 3 '</span>, _innerArugments);</div><div class=\"line\"></div><div class=\"line\">\t\t\t[].push.apply(_args, [].slice.call(_innerArugments))</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t_adder.toString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ToString '</span>, _args)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> _args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">\t\t\t&#125;)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _adder</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> adder.apply(<span class=\"literal\">null</span>, [].slice.call(outArguments))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"external\">Mozilla</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.getName() <span class=\"number\">2</span></div><div class=\"line\">getName() <span class=\"number\">4</span></div><div class=\"line\">Foo().getName() <span class=\"number\">1</span></div><div class=\"line\">getName()  <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Foo.getName() =&gt; <span class=\"keyword\">new</span> (Foo.getName()) =&gt; <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Foo().getName() =&gt; <span class=\"function\">(<span class=\"params\"><span class=\"keyword\">new</span> Foo(</span>)).<span class=\"params\">getName</span><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> Foo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName() =&gt; <span class=\"keyword\">new</span> ((<span class=\"keyword\">new</span> Foo()).getName)()</div></pre></td></tr></table></figure>\n<h1 id=\"This绑定类型\"><a href=\"#This绑定类型\" class=\"headerlink\" title=\"This绑定类型\"></a>This绑定类型</h1><ul>\n<li>默认绑定: 就是什么都匹配不到的情况下，非严格模式this绑定到全局对象window或者global</li>\n<li>隐式绑定: 绑定到undefined;隐式绑定就是函数作为对象的属性，通过对象属性的方式调用，这个时候this绑定到对象</li>\n<li>显示绑定: 通过apply和call调用的方式</li>\n<li>new绑定:</li>\n</ul>\n"},{"layout":"post","title":"Gulp and Markdown","subtitle":"Gulp and Markdown","date":"2017-03-21T16:00:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\nGulp 和 webpack 之间的关系是十分暧昧的，却也经常被人误解，以为它俩是竞争关系，其实不然。\n\nGulp 是一个任务管理工具，让简单的任务更清晰，让复杂的任务易于掌控；而 webpack 的理念是，一切皆为模块，每个模块在打包的时候都会经过一个叫做 loader 的东西，它具备非常强大的精细化管理能力，主要解决的是依赖分析问题。\n\nGulp 的学习，搞清楚 `gulp.src`, `gulp.dest`, `gulp.task`, `gulp.watch` 四个 API 就差不多了，它的底层原理是使用 Node 的 Transform Streams，这是一个可读可写可做中间转换的 Streams 管道，由于从 src 到 dest 过程中，文件一直停留在 Streams 中，没有落地成为实体文件，所以整体运作效率非常高。\n\nWebpack 概念很多，但搞清楚 `entry`，`output` 和 `loader` 三个关键点，基本上就可以解决简单的问题了，稍微复杂的场景主要包括对资源的合并处理、分拆处理、多次打包等，部分这样的问题可以使用插件辅助解决，但是 Webpack 的强大并不在文件处理，而是依赖分析，所以在流程操作特别复杂的情况，webpack 并不能胜任工作，往往会被作为 gulp 的一个 task，整体工作流交给 gulp 主导。\n\n### 插件推荐\n\n下面推荐几个 gulp 的插件吧，比较常用的：\n\n- `gulp-load-plugins`：自动加载 package.json 中的 gulp 插件\n- `gulp-rename`： 重命名\n- `gulp-uglify`：文件压缩\n- `gulp-concat`：文件合并\n- `gulp-less`：编译 less\n- `gulp-sass`：编译 sass\n- `gulp-clean-css`：压缩 CSS 文件\n- `gulp-htmlmin`：压缩 HTML 文件\n- `gulp-babel`：使用 babel 编译 JS 文件\n- `gulp-jshint`：jshint 检查\n- `gulp-imagemin`：压缩 jpg、png、gif 等图片\n- `gulp-livereload`：当代码变化时，它可以帮我们自动刷新页面\n\n也推荐几个 webpack 常用的 loader 和 plugin：\n\n- Loader 列表\n  - `less-loader, sass-loader`：处理样式\n  - `url-loader, file-loader`：两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中\n  - `babel-loader，babel-preset-es2015，babel-preset-react`：js处理，转码\n  - `expose-loader`： 将js模块暴露到全局\n- Plugin 列表\n  - `NormalModuleReplacementPlugin`：匹配 resourceRegExp，替换为 newResource\n  - `ContextReplacementPlugin`：替换上下文的插件\n  - `IgnorePlugin`：不打包匹配文件\n  - `PrefetchPlugin`：预加载的插件，提高性能\n  - `ResolverPlugin`：替换上下文的插件\n  - `ContextReplacementPlugin`：替换上下文的插件\n  - `DedupePlugin`：打包的时候删除重复或者相似的文件\n  - `MinChunkSizePlugin`：把多个小模块进行合并，以减少文件的大小\n  - `LimitChunkCountPlugin`：限制打包文件的个数\n  - `MinChunkSizePlugin`：根据 chars 大小，如果小于设定的最小值，就合并这些小模块，以减少文件的大小\n  - `OccurrenceOrderPlugin`：根据模块调用次数，给模块分配 ids，常被调用的ids分配更短的 id，使得 ids 可预测，降低文件大小，该模块推荐使用\n  - `UglifyJsPlugin`：压缩 js\n  - `ngAnnotatePlugin`：使用 ng-annotate 来管理 AngularJS 的一些依赖\n  - `CommonsChunkPlugin`：多个 html 共用一个js文件(chunk)\n  - `HotModuleReplacementPlugin`：模块热替换,如果不在 dev-server 模式下，需要记录数据，recordPath，生成每个模块的热更新模块\n  - `ProgressPlugin`：编译进度\n  - `NoErrorsPlugin`：报错但不退出 webpack 进程\n  - `HtmlWebpackPlugin `：生成 html\n\n### 拓展阅读\n","source":"_posts/2017-04-28-gulp-and-webpack.markdown","raw":"---\nlayout:     post\ntitle:      \"Gulp and Markdown\"\nsubtitle:   \"Gulp and Markdown\"\ndate:       2017-03-22\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Gulp and Markdown\n---\n\nGulp 和 webpack 之间的关系是十分暧昧的，却也经常被人误解，以为它俩是竞争关系，其实不然。\n\nGulp 是一个任务管理工具，让简单的任务更清晰，让复杂的任务易于掌控；而 webpack 的理念是，一切皆为模块，每个模块在打包的时候都会经过一个叫做 loader 的东西，它具备非常强大的精细化管理能力，主要解决的是依赖分析问题。\n\nGulp 的学习，搞清楚 `gulp.src`, `gulp.dest`, `gulp.task`, `gulp.watch` 四个 API 就差不多了，它的底层原理是使用 Node 的 Transform Streams，这是一个可读可写可做中间转换的 Streams 管道，由于从 src 到 dest 过程中，文件一直停留在 Streams 中，没有落地成为实体文件，所以整体运作效率非常高。\n\nWebpack 概念很多，但搞清楚 `entry`，`output` 和 `loader` 三个关键点，基本上就可以解决简单的问题了，稍微复杂的场景主要包括对资源的合并处理、分拆处理、多次打包等，部分这样的问题可以使用插件辅助解决，但是 Webpack 的强大并不在文件处理，而是依赖分析，所以在流程操作特别复杂的情况，webpack 并不能胜任工作，往往会被作为 gulp 的一个 task，整体工作流交给 gulp 主导。\n\n### 插件推荐\n\n下面推荐几个 gulp 的插件吧，比较常用的：\n\n- `gulp-load-plugins`：自动加载 package.json 中的 gulp 插件\n- `gulp-rename`： 重命名\n- `gulp-uglify`：文件压缩\n- `gulp-concat`：文件合并\n- `gulp-less`：编译 less\n- `gulp-sass`：编译 sass\n- `gulp-clean-css`：压缩 CSS 文件\n- `gulp-htmlmin`：压缩 HTML 文件\n- `gulp-babel`：使用 babel 编译 JS 文件\n- `gulp-jshint`：jshint 检查\n- `gulp-imagemin`：压缩 jpg、png、gif 等图片\n- `gulp-livereload`：当代码变化时，它可以帮我们自动刷新页面\n\n也推荐几个 webpack 常用的 loader 和 plugin：\n\n- Loader 列表\n  - `less-loader, sass-loader`：处理样式\n  - `url-loader, file-loader`：两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中\n  - `babel-loader，babel-preset-es2015，babel-preset-react`：js处理，转码\n  - `expose-loader`： 将js模块暴露到全局\n- Plugin 列表\n  - `NormalModuleReplacementPlugin`：匹配 resourceRegExp，替换为 newResource\n  - `ContextReplacementPlugin`：替换上下文的插件\n  - `IgnorePlugin`：不打包匹配文件\n  - `PrefetchPlugin`：预加载的插件，提高性能\n  - `ResolverPlugin`：替换上下文的插件\n  - `ContextReplacementPlugin`：替换上下文的插件\n  - `DedupePlugin`：打包的时候删除重复或者相似的文件\n  - `MinChunkSizePlugin`：把多个小模块进行合并，以减少文件的大小\n  - `LimitChunkCountPlugin`：限制打包文件的个数\n  - `MinChunkSizePlugin`：根据 chars 大小，如果小于设定的最小值，就合并这些小模块，以减少文件的大小\n  - `OccurrenceOrderPlugin`：根据模块调用次数，给模块分配 ids，常被调用的ids分配更短的 id，使得 ids 可预测，降低文件大小，该模块推荐使用\n  - `UglifyJsPlugin`：压缩 js\n  - `ngAnnotatePlugin`：使用 ng-annotate 来管理 AngularJS 的一些依赖\n  - `CommonsChunkPlugin`：多个 html 共用一个js文件(chunk)\n  - `HotModuleReplacementPlugin`：模块热替换,如果不在 dev-server 模式下，需要记录数据，recordPath，生成每个模块的热更新模块\n  - `ProgressPlugin`：编译进度\n  - `NoErrorsPlugin`：报错但不退出 webpack 进程\n  - `HtmlWebpackPlugin `：生成 html\n\n### 拓展阅读\n","slug":"2017-04-28-gulp-and-webpack","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d76b001hs7t7ctgfe8kf","content":"<p>Gulp 和 webpack 之间的关系是十分暧昧的，却也经常被人误解，以为它俩是竞争关系，其实不然。</p>\n<p>Gulp 是一个任务管理工具，让简单的任务更清晰，让复杂的任务易于掌控；而 webpack 的理念是，一切皆为模块，每个模块在打包的时候都会经过一个叫做 loader 的东西，它具备非常强大的精细化管理能力，主要解决的是依赖分析问题。</p>\n<p>Gulp 的学习，搞清楚 <code>gulp.src</code>, <code>gulp.dest</code>, <code>gulp.task</code>, <code>gulp.watch</code> 四个 API 就差不多了，它的底层原理是使用 Node 的 Transform Streams，这是一个可读可写可做中间转换的 Streams 管道，由于从 src 到 dest 过程中，文件一直停留在 Streams 中，没有落地成为实体文件，所以整体运作效率非常高。</p>\n<p>Webpack 概念很多，但搞清楚 <code>entry</code>，<code>output</code> 和 <code>loader</code> 三个关键点，基本上就可以解决简单的问题了，稍微复杂的场景主要包括对资源的合并处理、分拆处理、多次打包等，部分这样的问题可以使用插件辅助解决，但是 Webpack 的强大并不在文件处理，而是依赖分析，所以在流程操作特别复杂的情况，webpack 并不能胜任工作，往往会被作为 gulp 的一个 task，整体工作流交给 gulp 主导。</p>\n<h3 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h3><p>下面推荐几个 gulp 的插件吧，比较常用的：</p>\n<ul>\n<li><code>gulp-load-plugins</code>：自动加载 package.json 中的 gulp 插件</li>\n<li><code>gulp-rename</code>： 重命名</li>\n<li><code>gulp-uglify</code>：文件压缩</li>\n<li><code>gulp-concat</code>：文件合并</li>\n<li><code>gulp-less</code>：编译 less</li>\n<li><code>gulp-sass</code>：编译 sass</li>\n<li><code>gulp-clean-css</code>：压缩 CSS 文件</li>\n<li><code>gulp-htmlmin</code>：压缩 HTML 文件</li>\n<li><code>gulp-babel</code>：使用 babel 编译 JS 文件</li>\n<li><code>gulp-jshint</code>：jshint 检查</li>\n<li><code>gulp-imagemin</code>：压缩 jpg、png、gif 等图片</li>\n<li><code>gulp-livereload</code>：当代码变化时，它可以帮我们自动刷新页面</li>\n</ul>\n<p>也推荐几个 webpack 常用的 loader 和 plugin：</p>\n<ul>\n<li>Loader 列表<ul>\n<li><code>less-loader, sass-loader</code>：处理样式</li>\n<li><code>url-loader, file-loader</code>：两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中</li>\n<li><code>babel-loader，babel-preset-es2015，babel-preset-react</code>：js处理，转码</li>\n<li><code>expose-loader</code>： 将js模块暴露到全局</li>\n</ul>\n</li>\n<li>Plugin 列表<ul>\n<li><code>NormalModuleReplacementPlugin</code>：匹配 resourceRegExp，替换为 newResource</li>\n<li><code>ContextReplacementPlugin</code>：替换上下文的插件</li>\n<li><code>IgnorePlugin</code>：不打包匹配文件</li>\n<li><code>PrefetchPlugin</code>：预加载的插件，提高性能</li>\n<li><code>ResolverPlugin</code>：替换上下文的插件</li>\n<li><code>ContextReplacementPlugin</code>：替换上下文的插件</li>\n<li><code>DedupePlugin</code>：打包的时候删除重复或者相似的文件</li>\n<li><code>MinChunkSizePlugin</code>：把多个小模块进行合并，以减少文件的大小</li>\n<li><code>LimitChunkCountPlugin</code>：限制打包文件的个数</li>\n<li><code>MinChunkSizePlugin</code>：根据 chars 大小，如果小于设定的最小值，就合并这些小模块，以减少文件的大小</li>\n<li><code>OccurrenceOrderPlugin</code>：根据模块调用次数，给模块分配 ids，常被调用的ids分配更短的 id，使得 ids 可预测，降低文件大小，该模块推荐使用</li>\n<li><code>UglifyJsPlugin</code>：压缩 js</li>\n<li><code>ngAnnotatePlugin</code>：使用 ng-annotate 来管理 AngularJS 的一些依赖</li>\n<li><code>CommonsChunkPlugin</code>：多个 html 共用一个js文件(chunk)</li>\n<li><code>HotModuleReplacementPlugin</code>：模块热替换,如果不在 dev-server 模式下，需要记录数据，recordPath，生成每个模块的热更新模块</li>\n<li><code>ProgressPlugin</code>：编译进度</li>\n<li><code>NoErrorsPlugin</code>：报错但不退出 webpack 进程</li>\n<li><code>HtmlWebpackPlugin</code>：生成 html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h3>","site":{"data":{}},"excerpt":"","more":"<p>Gulp 和 webpack 之间的关系是十分暧昧的，却也经常被人误解，以为它俩是竞争关系，其实不然。</p>\n<p>Gulp 是一个任务管理工具，让简单的任务更清晰，让复杂的任务易于掌控；而 webpack 的理念是，一切皆为模块，每个模块在打包的时候都会经过一个叫做 loader 的东西，它具备非常强大的精细化管理能力，主要解决的是依赖分析问题。</p>\n<p>Gulp 的学习，搞清楚 <code>gulp.src</code>, <code>gulp.dest</code>, <code>gulp.task</code>, <code>gulp.watch</code> 四个 API 就差不多了，它的底层原理是使用 Node 的 Transform Streams，这是一个可读可写可做中间转换的 Streams 管道，由于从 src 到 dest 过程中，文件一直停留在 Streams 中，没有落地成为实体文件，所以整体运作效率非常高。</p>\n<p>Webpack 概念很多，但搞清楚 <code>entry</code>，<code>output</code> 和 <code>loader</code> 三个关键点，基本上就可以解决简单的问题了，稍微复杂的场景主要包括对资源的合并处理、分拆处理、多次打包等，部分这样的问题可以使用插件辅助解决，但是 Webpack 的强大并不在文件处理，而是依赖分析，所以在流程操作特别复杂的情况，webpack 并不能胜任工作，往往会被作为 gulp 的一个 task，整体工作流交给 gulp 主导。</p>\n<h3 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h3><p>下面推荐几个 gulp 的插件吧，比较常用的：</p>\n<ul>\n<li><code>gulp-load-plugins</code>：自动加载 package.json 中的 gulp 插件</li>\n<li><code>gulp-rename</code>： 重命名</li>\n<li><code>gulp-uglify</code>：文件压缩</li>\n<li><code>gulp-concat</code>：文件合并</li>\n<li><code>gulp-less</code>：编译 less</li>\n<li><code>gulp-sass</code>：编译 sass</li>\n<li><code>gulp-clean-css</code>：压缩 CSS 文件</li>\n<li><code>gulp-htmlmin</code>：压缩 HTML 文件</li>\n<li><code>gulp-babel</code>：使用 babel 编译 JS 文件</li>\n<li><code>gulp-jshint</code>：jshint 检查</li>\n<li><code>gulp-imagemin</code>：压缩 jpg、png、gif 等图片</li>\n<li><code>gulp-livereload</code>：当代码变化时，它可以帮我们自动刷新页面</li>\n</ul>\n<p>也推荐几个 webpack 常用的 loader 和 plugin：</p>\n<ul>\n<li>Loader 列表<ul>\n<li><code>less-loader, sass-loader</code>：处理样式</li>\n<li><code>url-loader, file-loader</code>：两个都必须用上。否则超过大小限制的图片无法生成到目标文件夹中</li>\n<li><code>babel-loader，babel-preset-es2015，babel-preset-react</code>：js处理，转码</li>\n<li><code>expose-loader</code>： 将js模块暴露到全局</li>\n</ul>\n</li>\n<li>Plugin 列表<ul>\n<li><code>NormalModuleReplacementPlugin</code>：匹配 resourceRegExp，替换为 newResource</li>\n<li><code>ContextReplacementPlugin</code>：替换上下文的插件</li>\n<li><code>IgnorePlugin</code>：不打包匹配文件</li>\n<li><code>PrefetchPlugin</code>：预加载的插件，提高性能</li>\n<li><code>ResolverPlugin</code>：替换上下文的插件</li>\n<li><code>ContextReplacementPlugin</code>：替换上下文的插件</li>\n<li><code>DedupePlugin</code>：打包的时候删除重复或者相似的文件</li>\n<li><code>MinChunkSizePlugin</code>：把多个小模块进行合并，以减少文件的大小</li>\n<li><code>LimitChunkCountPlugin</code>：限制打包文件的个数</li>\n<li><code>MinChunkSizePlugin</code>：根据 chars 大小，如果小于设定的最小值，就合并这些小模块，以减少文件的大小</li>\n<li><code>OccurrenceOrderPlugin</code>：根据模块调用次数，给模块分配 ids，常被调用的ids分配更短的 id，使得 ids 可预测，降低文件大小，该模块推荐使用</li>\n<li><code>UglifyJsPlugin</code>：压缩 js</li>\n<li><code>ngAnnotatePlugin</code>：使用 ng-annotate 来管理 AngularJS 的一些依赖</li>\n<li><code>CommonsChunkPlugin</code>：多个 html 共用一个js文件(chunk)</li>\n<li><code>HotModuleReplacementPlugin</code>：模块热替换,如果不在 dev-server 模式下，需要记录数据，recordPath，生成每个模块的热更新模块</li>\n<li><code>ProgressPlugin</code>：编译进度</li>\n<li><code>NoErrorsPlugin</code>：报错但不退出 webpack 进程</li>\n<li><code>HtmlWebpackPlugin</code>：生成 html</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h3>"},{"layout":"post","title":"Redux Async Function","subtitle":"Async","date":"2017-03-21T16:00:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# Redux异步方案选型\n\n作为react社区最热门的状态管理框架，相信很多人都准备甚至正在使用Redux。\n\n由于Redux的理念非常精简，没有追求大而全，这份架构上的优雅却在某种程度上伤害了使用体验：不能开箱即用，甚至是异步这种最常见的场景也要借助社区方案。\n\n如果你已经挑花了眼，或者正在挑但不知道是否适合，或者已经挑了但不知道会不会有坑，这篇文章应该适合你。\n\n本文会从一些常见的Redux异步方案出发，介绍它们的优缺点，进而讨论一些与异步相伴的常见场景，帮助你在选型时更好地权衡利弊。\n\n\n## 简单方案\n### redux-thunk：指路先驱\n\n[Github](https://github.com/gaearon/redux-thunk)\n\n> Redux本身只能处理同步的Action，但可以通过中间件来拦截处理其它类型的action，比如函数(Thunk)，再用回调触发普通Action\n> 从而实现异步处理，在这点上所有Redux的异步方案都是类似的。\n\n### redux-promise：瘦身过头\n\n由于redux-thunk写起来实在是太麻烦了，社区当然会有其它轮子出现。[redux-promise](https://github.com/pburtchaell/redux-promise-middleware)则是其中比较知名的，同样也享受了官网出镜的待遇。\n\n它自定义了一个middleware，当检测到有action的payload属性是Promise对象时，就会:\n\n* 若resolve，触发一个此action的拷贝，但payload为promise的value，并设status属性为”success”\n* 若reject，触发一个此action的拷贝，但payload为promise的reason，并设status属性为”error”\n\n```javascript\n//action types\nconst GET_DATA = 'GET_DATA';\n\n//action creator\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: api.getData(id) //payload为promise对象\n    }\n}\n\n//reducer\nfunction reducer(oldState, action) {\n    switch(action.type) {\n    case GET_DATA:\n        if (action.status === 'success') {\n            return successState\n        } else {\n               return errorState\n        }\n    }\n}\n```\n\n请等等，任何能明显减少代码量的方案，都应该小心它是否过度省略了什么东西，减肥是好事，减到骨头就残了。\n\n#### 场景解析之：乐观更新\n\n多数异步场景都是保守更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据。\n\n最常见的例子就是微信等聊天工具，发送消息时消息立即进入了对话窗，如果发送失败的话，在消息旁边再作补充提示即可。这种交互”乐观”地相信请求会成功，因此称作乐观更新(Optimistic update)。\n\n由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作\n\n在上面redux-thunk的例子中，我们看到了GET_DATA, GET_DATA_SUCCESS、GET_DATA_FAILED三个action，分别表示初始动作、异步成功和异步失败，其中第一个action使得redux-thunk具备乐观更新的能力。\n\n而在redux-promise中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，redux认可的action对象是 plain JavaScript objects，即简单对象，而在redux-promise中，初始action的payload是个Promise。\n\n另一方面，使用status而不是type来区分两个异步action也非常值得商榷，按照redux对action的定义以及社区的普遍实践，个人还是倾向于使用不同的type，用同一type下的不同status区分action额外增加了一套隐形的约定，甚至不符合该redux-promise作者自己所提倡的FSA，体现在代码上则是在switch-case内再增加一层判断。\n\n### redux-promise-middleware：拔乱反正\n\nredux-promise-middleware相比redux-promise，采取了更为温和和渐进式的思路，保留了和redux-thunk类似的三个action。\n\n```javascript\n//action types\nconst GET_DATA = 'GET_DATA',\n    GET_DATA_PENDING = 'GET_DATA_PENDING',\n    GET_DATA_FULFILLED = 'GET_DATA_FULFILLED',\n    GET_DATA_REJECTED = 'GET_DATA_REJECTED';\n//action creator\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: {\n            promise: api.getData(id),\n            data: id\n        }\n    }\n}\n\n//reducer\nconst reducer = function(oldState, action) {\n    switch(action.type) {\n    case GET_DATA_PENDING :\n        return oldState; // 可通过action.payload.data获取id\n    case GET_DATA_FULFILLED :\n        return successState;\n    case GET_DATA_REJECTED :\n        return errorState;\n    }\n}\n```\n\n如果不需要乐观更新，action creator可以使用和redux-promise完全一样的，更简洁的写法，\n\n```javascript\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: api.getData(id) //等价于 {promise: api.getData(id)}\n    }\n}\n```\n\n此时初始actionGET_DATA_PENDING仍然会触发，但是payload为空。\n\n相对redux-promise于粗暴地过滤掉整个初始action，redux-promise-middleware选择创建一个只过滤payload中的promise属性的XXX_PENDING作为初始action，以此保留乐观更新的能力。\n\n同时在action的区分上，它选择了回归type的”正途”，_PENDING、_FULFILLED、_REJECTED等后缀借用了promise规范 (当然它们是可配置的) 。\n\n它的遗憾则是只在action层实现了简化，对reducer层则束手无策。另外，相比redux-thunk，它还多出了一个_PENDING的字符串模板代码(三个action却需要四个type)。\n\n> 社区有类似type-to-reducer这样试图简化reducer的库。但由于reducer和异步action通常是两套独立的方案，reducer相关的库无法去猜测异步action的后缀是什么(甚至有没有后缀)，社区也没有相关标准，也就很难对异步做出精简和抽象了。\n\n### redux-action-tools：软文预警\n\n无论是redux-thunk还是redux-promise-middleware，模板代码都是显而易见的，每次写XXX_COMPLETED这样的代码都觉得是在浪费生命——你得先在常量中声明它们，再在action中引用，然后是reducer，假设像redux-thunk一样每个异步action有三个type，三个文件加起来你就得写九次!\n\n国外开发者也有相同的报怨：\n\n有没有办法让代码既像redux-promise一样简洁，又能保持乐观更新的能力呢？\n\nredux-action-tools是我给出的答案：\n\n```javascript\nconst GET_DATA = 'GET_DATA';\n\n//action creator\nconst getData = createAsyncAction(GET_DATA, function(id) {\n    return api.getData(id)\n})\n\n//reducer\nconst reducer = createReducer()\n    .when(getData, (oldState, action) => oldState)\n    .done((oldState, action) => successState)\n    .failed((oldState, action) => errorState)\n    .build()\n```\n\nredux-action-tools在action层面做的事情与前面几个库大同小异：同样是派发了三个action：GET_DATA/GET_DATA_SUCCESS/GET_DATA_FAILED。这三个action的描述见下表：\n\ntype When payload meta.asyncPhase ${actionName} 异步开始前 同步调用参数 ‘START’ ${actionName}_COMPLETED 异步成功 value of promise ‘COMPLETED’ ${actionName}_FAILED 异步失败 reason of promise ‘FAILED’\ncreateAsyncAction参考了redux-promise作者写的redux-actions ，它接收三个参数，分别是：\n\n* actionName 字符串，所有派生action的名字都以它为基础，初始action则与它同名\n* promiseCreator 函数，必须返回一个promise对象\n* metaCreator 函数，可选，作用后面会演示到\n\n目前看来，其实和redux-promise/redux-promise-middleware大同小异。而真正不同的，是它同时简化了reducer层! 这种简化来自于对异步行为从语义角度的抽象：\n\n> 当(when)初始action发生时处理同步更新，若异步成功(done)则处理成功逻辑，若异步失败(failed)则处理失败逻辑\n\n抽离出when/done/failed三个关键词作为api，并使用链式调用将他们串联起来：when函数接收两个参数：actionName和handler，其中handler是可选的，done和failed则只接收一个handler参数，并且只能在when之后调用——他们分别处理 ${actionName}_SUCCESS 和 ${actionName}_FAILED .\n\n无论是action还是reducer层，XX_SUCCESS/XX_FAILED相关的代码都被封装了起来，正如在例子中看到的——你甚至不需要声明它们! 创建一个异步action，然后处理它的成功和失败情况，事情本该这么简单。\n\n更进一步的，这三个action默认都根据当前所处的异步阶段，设置了不同的meta(见上表中的meta.asyncPhase)，它有什么用呢？用场景说话：\n\n#### 场景解析：失败处理与Loading\n\n它们是异步不可回避的两个场景，几乎每个项目会遇到。\n以异步请求的失败处理为例，每个项目通常都有一套比较通用的，适合多数场景的处理逻辑，比如弹窗提示。同时在一些特定场景下，又需要绕过通用逻辑进行单独处理，比如表单的异步校验\n\n而在实现通用处理逻辑时，常见的问题有以下几种：\n\n* 底层处理，扩展性不足\n\n```javascript\n function fetchWrapper(args) {\n     return fetch.apply(fetch, args)\n         .catch(commonErrorHandler)\n }\n```\n\n在较底层封装ajax库可以轻松实现全局处理，但问题也非常明显：\n\n一是扩展性不足，比如少数场景想要绕过通用处理逻辑，还有一些场景错误是前端生成而非直接来自于请求；\n二是不易组合，比如有的场景一个action需要多个异步请求，但异常处理和loading是不需要重复的，因为用户不需要知道一个动作有多少个请求。\n\n* 不够内聚，侵入业务代码\n\n```javascript\n //action creator\n const getData = createAsyncAction(GET_DATA, function(id) {\n     return api.getData(id)\n         .catch(commonErrorHandler) //调用错误处理函数\n })\n```\n\n在有业务意义的action层调用通用处理逻辑，既能按需调用，又不妨碍异步请求的组合。但由于通用处理往往适用于多数场景，这样写会导致业务代码变得冗余，因为几乎每个action都得这么写。\n\n* 高耦合，高风险\n\n也有人把上面的方案做个依赖反转，改为在通用逻辑里监听业务action：\n\n```javascript\n function commonErrorReducer(oldState, action) {\n     switch(action.type) {\n     case GET_DATA_FAILED:\n     case PUT_DATA_FAILED:\n     //... tons of action type\n         return commonErrorHandler(action)\n     }\n }\n```\n\n这样做的本质是把冗余从业务代码中拿出来集中管理。\n\n问题在于每添加一个请求，都需要修改公共代码，把对应的action type加进来。且不说并行开发时merge冲突，如果加了一个异步action，但忘了往公共处理文件中添加——这是很可能会发生的——而异常是分支流程不容易被测试发现，等到发现，很可能就是事故而不是bug了。\n\n通过以上几种常见方案的分析，我认为比较完善的错误处理(Loading同理)需要具备如下特点：\n\n* 面向异步动作(action)，而非直接面向请求\n* 不侵入业务代码\n* 默认使用通用处理逻辑，无需额外代码\n* 可以绕过通用逻辑\n\n而借助redux-action-tools提供的meta.asyncPhase，可以轻易用middleware实现以上全部需求!\n\n```javascript\nimport _ from 'lodash'\nimport { ASYNC_PHASES } from 'redux-action-tools'\n\nfunction errorMiddleWare({dispatch}) {\n  return next => action => {\n    const asyncStep = _.get(action, 'meta.asyncStep');\n\n    if (asyncStep === ASYNC_PHASES.FAILED) {\n      dispatch({\n        type: 'COMMON_ERROR',\n        payload: {\n          action\n        }\n      })\n    }\n    next(action);\n  }\n}\n```\n\n以上中间件一旦检测到meta.asyncStep字段为FAILED的action便触发新的action去调用通用处理逻辑。面向action、不侵入业务、默认工作 (只要是用createAsyncAction声明的异步) ! 轻松实现了理想需求中的前三点，那如何定制呢？既然拦截是面向meta的，只要在创建action时支持对meta的自定义就行了，而createAsyncAction的第三个参数就是为此准备的：\n\n```javascript\nimport _ from 'lodash'\nimport { ASYNC_PHASES } from 'redux-action-tools'\n\nconst customizedAction = createAsyncAction(\n  type,\n  promiseCreator, //type 和 promiseCreator此处无不同故省略\n  (payload, defaultMeta) => {\n    return { ...defaultMeta, omitError: true }; //向meta中添加配置参数\n  }\n)\n\nfunction errorMiddleWare({dispatch}) {\n  return next => action => {\n    const asyncStep = _.get(action, 'meta.asyncStep');\n    const omitError = _.get(action, 'meta.omitError'); //获取配置参数\n\n    if (!omitError && asyncStep === ASYNC_PHASES.FAILED) {\n      dispatch({\n        type: 'COMMON_ERROR',\n        payload: {\n          action\n        }\n      })\n    }\n    next(action);\n  }\n}\n```\n\n类似的，你可以想想如何处理Loading，需要强调的是建议尽量用增量配置的方式进行扩展，而不要轻易删除和修改meta.asyncPhase。\n比如上例可以通过删除meta.asyncPhase实现同样功能，但如果同时还有其它地方也依赖meta.asyncPhase(比如loadingMiddleware)，就可能导致本意是定制错误处理，却改变了Loading的行为，客观来讲这层风险是基于meta拦截方案的最大缺点，然而相比多数场景的便利、健壮，个人认为特殊场景的风险是可以接受的，毕竟这些场景在整个开发测试流程容易获得更多关注。\n\n## 进阶方案\n\n上面所有的方案，都把异步请求这一动作放在了action creator中，这样做的好处是简单直观，且和Flux社区一脉相承(见下图)。因此个人将它们归为相对简单的一类。\n\n下面将要介绍的，是相对复杂一类，它们都采用了与上图不同的思路，去追求更优雅的架构、解决更复杂的问题\n\n### redux-loop：分形! 组合!\n\n众所周知，Redux是借鉴自Elm的，然而在Elm中，异步的处理却并不是在action creator层，而是在reducer(Elm中称update)层：\n\n> 图片来源于： [jarvisaoieong/redux-architecture](https://github.com/jarvisaoieong/redux-architecture)\n\n这样做的目的是为了实现彻底的可组合性(composable)。在redux中，reducer作为函数是可组合的，action正常情况下作为纯对象也是可组合的，然而一旦涉及异步，当action嵌套组合的时候，中间件就无法正常识别，这个问题让redux作者Dan也发出感叹 There is no easy way to compose Redux applications并且开了一个至今仍然open的issue，对组合、分形与redux的故事，有兴趣的朋友可以观摩以上链接，甚至了解一下Elm，篇幅所限，本文难以尽述。\n\n而redux-loop，则是在这方面的一个尝试，它更彻底的模仿了Elm的模式：引入Effects的概念并将其置入reducer，官方示例如下：\n\n```javascript\nimport { Effects, loop } from 'redux-loop';\nimport { loadingStart, loadingSuccess, loadingFailure } from './actions';\n\nexport function fetchDetails(id) {\n  return fetch(`/api/details/${id}`)\n    .then((r) => r.json())\n    .then(loadingSuccess)\n    .catch(loadingFailure);\n}\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING_START':\n      return loop(\n        { ...state, loading: true },\n        Effects.promise(fetchDetails, action.payload.id)\n      ); // 同时返回状态与副作用\n\n    case 'LOADING_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        details: action.payload\n      };\n\n    case 'LOADING_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.message\n      };\n\n    default:\n      return state;\n  }\n}\n```\n\n注意在reducer中，当处理LOADING_START时，并没有直接返回state对象，而是用loop函数将state和Effect”打包”返回(实际上这个返回值是数组[State, Effect]，和Elm的方式非常接近)。\n\n然而修改reducer的返回类型显然是比较暴力的做法，除非Redux官方出面，否则很难获得社区的广泛认同。更复杂的返回类型会让很多已有的API，三方库面临危险，甚至combineReducer都需要用redux-loop提供的定制版本，这种”破坏性”也是Redux作者Dan没有采纳redux-loop进入Redux核心代码的原因：”If a solution doesn’t work with vanilla combineReducers(), it won’t get into Redux core”。\n\n对Elm的分形架构有了解，想在Redux上继续实践的人来说，redux-loop是很好的参考素材，但对多数人和项目而言，最好还是更谨慎地看待\n\n### redux-saga：难、而美\n\n[Redux-saga](https://github.com/redux-saga/redux-saga)\n\n另一个著名的库，它让异步行为成为架构中独立的一层(称为saga)，既不在action creator中，也不和reducer沾边。\n\n它的出发点是把副作用 (Side effect，异步行为就是典型的副作用) 看成”线程”，可以通过普通的action去触发它，当副作用完成时也会触发action作为输出。\n\n```javascript\nimport { takeEvery } from 'redux-saga'\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* getData(action) {\n   try {\n      const response = yield call(api.getData, action.payload.id);\n      yield put({type: \"GET_DATA_SUCCEEDED\", payload: response});\n   } catch (e) {\n      yield put({type: \"GET_DATA_FAILED\", payload: error});\n   }\n}\n\nfunction* mySaga() {\n  yield* takeEvery(\"GET_DATA\", getData);\n}\n\nexport default mySaga;\n```\n\n相比action creator的方案，它可以保证组件触发的action是纯对象，因此至少在项目范围内(middleware和saga都是项目的顶层依赖，跨项目无法保证)，action的组合性明显更加优秀。\n\n而它最为主打的，则是`可测试性`和强大的`异步流程控制`。\n\n由于强制所有saga都必须是generator函数，借助generator的next接口，异步行为的每个中间步骤都被暴露给了开发者，从而实现对异步逻辑”step by step”的测试。这在其它方案中是很少看到的 (当然也可以借鉴generator这一点，但缺少约束)。\n\n而强大得有点眼花缭乱的API，特别是channel的引入，则提供了武装到牙齿级的异步流程控制能力。\n\n然而，回顾我们在讨论简单方案时提到的各种场景与问题，redux-saga并没有去尝试回答和解决它们，这意味着你需要自行寻找解决方案。而generator、相对复杂的API和单独的一层抽象也让不少人望而却步。\n\n包括我在内，很多人非常欣赏redux-saga。它的架构和思路毫无疑问是优秀甚至优雅的，但使用它之前，最好想清楚它带来的优点(可测试性、流程控制、高度解耦)与付出的成本是否匹配，特别是异步方面复杂度并不高的项目，比如多数以CRUD为主的管理系统。\n\n#### 场景解析：竞态\n\n竞态：\n\n```javascript\nfunction fetchFriend(id) {\n    return dispatch => {\n        dispatch({ type: 'FETCH_FRIEND' });\n        return fetch(`http://localhost/api/friend/${id}`)\n            .then(response => response.json())\n            .then(json => dispatch({ type: 'RECEIVE_FRIENDS', payload: json }));\n    }\n}\n```\n如果 fetch 修改为 buttonclick，setTimeout 这样的开始可以确定顺序的，\n但是 fetch 是和服务器沟通的，服务器处理数据返回顺序是不确定\n那么怎么处理？\n\n冲突流程如下：\n 点击看好友1信息\n 服务器请求\n 没等1返回， 看好友2信息 (我就想看这个)\n 好友2服务器请求返回比较快(可能在cache中)\n 显示好友2信息了\n 等了一会儿1返回了\n 覆盖了2   (BOOM!)\n\n由于异步返回时间的不确定性，后发出的请求可能先返回，如何确保异步结果的渲染是按照请求发生顺序，而不是返回顺序？\n\n这在redux-thunk为代表的简单方案中是要费点功夫的：\n\n```javascript\nfunction fetchFriend(id){\n    return (dispatch, getState) => {\n        //步骤1：在reducer中 set state.currentFriend = id;\n        dispatch({type: 'FETCH_FIREND', payload: id});\n\n        return fetch(`http://localhost/api/firend/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                //步骤2：只处理currentFriend的对应response\n                const { currentFriend } = getState();\n                (currentFriend === id) && dispatch({type: 'RECEIVE_FIRENDS', playload: json})\n            });\n    }\n}\n```\n\n以上只是示例，实际中不一定需要依赖业务id，也不一定要把id存到store里，只要为每个请求生成key，以便处理请求时能够对应起来即可。\n\n而在redux-saga中，一切非常地简单：\n\n```javascript\nimport { takeLatest } from `redux-saga`\n\nfunction* fetchFriend(action) {\n  ...\n}\n\nfunction* watchLastFetchUser() {\n  yield takeLatest('FETCH_FIREND', fetchFriend)\n}\n```\n\n这里的重点是takeLatest，它限制了同步事件与异步返回事件的顺序关系。\n\n另外还有一些基于响应式编程(Reactive Programming)的异步方案(如redux-observable)也能非常好地处理竞态场景，因为描述事件流之间的关系，正是整个响应式编程的抽象基石，而竞态在本质上就是如何保证同步事件与异步返回事件的关系，正是响应式编程的用武之地。\n\n> 实际项目中可以用高阶函数模仿takeLatest的功能，redux-thunk类方案也可以较低成本地处理竞态\n\n```javascript\nfunction takeLatestAsyncResult(promiseCreator) {\n  var index = 0;\n  return function () {\n    index++;\n    var promise = promiseCreator.apply(this, arguments);\n\n    function guardLatest(func, reqIndex) {\n      return function() {\n        if (reqIndex === index) {\n          func.apply(this, arguments)\n        }\n      }\n    }\n\n    return new Promise(function(resolve, reject) {\n      promise.then(\n        guardLatest(resolve, index),\n        guardLatest(reject, index)\n      );\n    });\n  }\n}\n\nfunction runTimeout(timeout) {\n\treturn new Promise(function(resolve) {\n    setTimeout(function() {\n\t\t\tresolve(timeout);\n    }, timeout)\n  })\n}\n\nfunction getAsyncTaskRunner(label, promiseCreator) {\n  return function(value) {\n    promiseCreator(value).then(function() {\n      console.log(`${label} : ${value}`)\n    })\n  }\n}\n\nfunction runAsyncQue(arr) {\n  arr.map(getAsyncTaskRunner('runAsyncQue', runTimeout));\n}\n\nfunction runLatestAsync(arr) {\n\tvar wrappedTimeout = takeLatestAsyncResult(runTimeout);\n  arr.map(getAsyncTaskRunner('runLatestAsync', wrappedTimeout));\n}\n\nrunAsyncQue([2000, 1000, 3000, 500, 400])\n\nrunLatestAsync([2000, 1000, 3000, 500, 400])\n\n\nfunction takeLatestAsyncResult(promiseCreator) {\n    let index = 0;\n\n    return function(){\n        index++;\n\n        const promise = promiseCreator.apply(this, arguments);\n\n        function guardLatest(func, reqIndex) {\n            return function() {\n                if (reqIndex === index) {\n                    func.apply(this, arguments)\n                }\n            }\n        }\n\n        return new Promise(function(resolve, reject){\n            promise.then(\n                guardLatest(resolve, index),\n                guardLatest(reject, index)\n            )\n        })\n    }\n}\n\n\n\n```\n","source":"_posts/2017-05-06-redux-async.markdown","raw":"---\nlayout:     post\ntitle:      \"Redux Async Function\"\nsubtitle:   \"Async\"\ndate:       2017-03-22\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - Redux\n---\n\n# Redux异步方案选型\n\n作为react社区最热门的状态管理框架，相信很多人都准备甚至正在使用Redux。\n\n由于Redux的理念非常精简，没有追求大而全，这份架构上的优雅却在某种程度上伤害了使用体验：不能开箱即用，甚至是异步这种最常见的场景也要借助社区方案。\n\n如果你已经挑花了眼，或者正在挑但不知道是否适合，或者已经挑了但不知道会不会有坑，这篇文章应该适合你。\n\n本文会从一些常见的Redux异步方案出发，介绍它们的优缺点，进而讨论一些与异步相伴的常见场景，帮助你在选型时更好地权衡利弊。\n\n\n## 简单方案\n### redux-thunk：指路先驱\n\n[Github](https://github.com/gaearon/redux-thunk)\n\n> Redux本身只能处理同步的Action，但可以通过中间件来拦截处理其它类型的action，比如函数(Thunk)，再用回调触发普通Action\n> 从而实现异步处理，在这点上所有Redux的异步方案都是类似的。\n\n### redux-promise：瘦身过头\n\n由于redux-thunk写起来实在是太麻烦了，社区当然会有其它轮子出现。[redux-promise](https://github.com/pburtchaell/redux-promise-middleware)则是其中比较知名的，同样也享受了官网出镜的待遇。\n\n它自定义了一个middleware，当检测到有action的payload属性是Promise对象时，就会:\n\n* 若resolve，触发一个此action的拷贝，但payload为promise的value，并设status属性为”success”\n* 若reject，触发一个此action的拷贝，但payload为promise的reason，并设status属性为”error”\n\n```javascript\n//action types\nconst GET_DATA = 'GET_DATA';\n\n//action creator\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: api.getData(id) //payload为promise对象\n    }\n}\n\n//reducer\nfunction reducer(oldState, action) {\n    switch(action.type) {\n    case GET_DATA:\n        if (action.status === 'success') {\n            return successState\n        } else {\n               return errorState\n        }\n    }\n}\n```\n\n请等等，任何能明显减少代码量的方案，都应该小心它是否过度省略了什么东西，减肥是好事，减到骨头就残了。\n\n#### 场景解析之：乐观更新\n\n多数异步场景都是保守更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据。\n\n最常见的例子就是微信等聊天工具，发送消息时消息立即进入了对话窗，如果发送失败的话，在消息旁边再作补充提示即可。这种交互”乐观”地相信请求会成功，因此称作乐观更新(Optimistic update)。\n\n由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作\n\n在上面redux-thunk的例子中，我们看到了GET_DATA, GET_DATA_SUCCESS、GET_DATA_FAILED三个action，分别表示初始动作、异步成功和异步失败，其中第一个action使得redux-thunk具备乐观更新的能力。\n\n而在redux-promise中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，redux认可的action对象是 plain JavaScript objects，即简单对象，而在redux-promise中，初始action的payload是个Promise。\n\n另一方面，使用status而不是type来区分两个异步action也非常值得商榷，按照redux对action的定义以及社区的普遍实践，个人还是倾向于使用不同的type，用同一type下的不同status区分action额外增加了一套隐形的约定，甚至不符合该redux-promise作者自己所提倡的FSA，体现在代码上则是在switch-case内再增加一层判断。\n\n### redux-promise-middleware：拔乱反正\n\nredux-promise-middleware相比redux-promise，采取了更为温和和渐进式的思路，保留了和redux-thunk类似的三个action。\n\n```javascript\n//action types\nconst GET_DATA = 'GET_DATA',\n    GET_DATA_PENDING = 'GET_DATA_PENDING',\n    GET_DATA_FULFILLED = 'GET_DATA_FULFILLED',\n    GET_DATA_REJECTED = 'GET_DATA_REJECTED';\n//action creator\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: {\n            promise: api.getData(id),\n            data: id\n        }\n    }\n}\n\n//reducer\nconst reducer = function(oldState, action) {\n    switch(action.type) {\n    case GET_DATA_PENDING :\n        return oldState; // 可通过action.payload.data获取id\n    case GET_DATA_FULFILLED :\n        return successState;\n    case GET_DATA_REJECTED :\n        return errorState;\n    }\n}\n```\n\n如果不需要乐观更新，action creator可以使用和redux-promise完全一样的，更简洁的写法，\n\n```javascript\nconst getData = function(id) {\n    return {\n        type: GET_DATA,\n        payload: api.getData(id) //等价于 {promise: api.getData(id)}\n    }\n}\n```\n\n此时初始actionGET_DATA_PENDING仍然会触发，但是payload为空。\n\n相对redux-promise于粗暴地过滤掉整个初始action，redux-promise-middleware选择创建一个只过滤payload中的promise属性的XXX_PENDING作为初始action，以此保留乐观更新的能力。\n\n同时在action的区分上，它选择了回归type的”正途”，_PENDING、_FULFILLED、_REJECTED等后缀借用了promise规范 (当然它们是可配置的) 。\n\n它的遗憾则是只在action层实现了简化，对reducer层则束手无策。另外，相比redux-thunk，它还多出了一个_PENDING的字符串模板代码(三个action却需要四个type)。\n\n> 社区有类似type-to-reducer这样试图简化reducer的库。但由于reducer和异步action通常是两套独立的方案，reducer相关的库无法去猜测异步action的后缀是什么(甚至有没有后缀)，社区也没有相关标准，也就很难对异步做出精简和抽象了。\n\n### redux-action-tools：软文预警\n\n无论是redux-thunk还是redux-promise-middleware，模板代码都是显而易见的，每次写XXX_COMPLETED这样的代码都觉得是在浪费生命——你得先在常量中声明它们，再在action中引用，然后是reducer，假设像redux-thunk一样每个异步action有三个type，三个文件加起来你就得写九次!\n\n国外开发者也有相同的报怨：\n\n有没有办法让代码既像redux-promise一样简洁，又能保持乐观更新的能力呢？\n\nredux-action-tools是我给出的答案：\n\n```javascript\nconst GET_DATA = 'GET_DATA';\n\n//action creator\nconst getData = createAsyncAction(GET_DATA, function(id) {\n    return api.getData(id)\n})\n\n//reducer\nconst reducer = createReducer()\n    .when(getData, (oldState, action) => oldState)\n    .done((oldState, action) => successState)\n    .failed((oldState, action) => errorState)\n    .build()\n```\n\nredux-action-tools在action层面做的事情与前面几个库大同小异：同样是派发了三个action：GET_DATA/GET_DATA_SUCCESS/GET_DATA_FAILED。这三个action的描述见下表：\n\ntype When payload meta.asyncPhase ${actionName} 异步开始前 同步调用参数 ‘START’ ${actionName}_COMPLETED 异步成功 value of promise ‘COMPLETED’ ${actionName}_FAILED 异步失败 reason of promise ‘FAILED’\ncreateAsyncAction参考了redux-promise作者写的redux-actions ，它接收三个参数，分别是：\n\n* actionName 字符串，所有派生action的名字都以它为基础，初始action则与它同名\n* promiseCreator 函数，必须返回一个promise对象\n* metaCreator 函数，可选，作用后面会演示到\n\n目前看来，其实和redux-promise/redux-promise-middleware大同小异。而真正不同的，是它同时简化了reducer层! 这种简化来自于对异步行为从语义角度的抽象：\n\n> 当(when)初始action发生时处理同步更新，若异步成功(done)则处理成功逻辑，若异步失败(failed)则处理失败逻辑\n\n抽离出when/done/failed三个关键词作为api，并使用链式调用将他们串联起来：when函数接收两个参数：actionName和handler，其中handler是可选的，done和failed则只接收一个handler参数，并且只能在when之后调用——他们分别处理 ${actionName}_SUCCESS 和 ${actionName}_FAILED .\n\n无论是action还是reducer层，XX_SUCCESS/XX_FAILED相关的代码都被封装了起来，正如在例子中看到的——你甚至不需要声明它们! 创建一个异步action，然后处理它的成功和失败情况，事情本该这么简单。\n\n更进一步的，这三个action默认都根据当前所处的异步阶段，设置了不同的meta(见上表中的meta.asyncPhase)，它有什么用呢？用场景说话：\n\n#### 场景解析：失败处理与Loading\n\n它们是异步不可回避的两个场景，几乎每个项目会遇到。\n以异步请求的失败处理为例，每个项目通常都有一套比较通用的，适合多数场景的处理逻辑，比如弹窗提示。同时在一些特定场景下，又需要绕过通用逻辑进行单独处理，比如表单的异步校验\n\n而在实现通用处理逻辑时，常见的问题有以下几种：\n\n* 底层处理，扩展性不足\n\n```javascript\n function fetchWrapper(args) {\n     return fetch.apply(fetch, args)\n         .catch(commonErrorHandler)\n }\n```\n\n在较底层封装ajax库可以轻松实现全局处理，但问题也非常明显：\n\n一是扩展性不足，比如少数场景想要绕过通用处理逻辑，还有一些场景错误是前端生成而非直接来自于请求；\n二是不易组合，比如有的场景一个action需要多个异步请求，但异常处理和loading是不需要重复的，因为用户不需要知道一个动作有多少个请求。\n\n* 不够内聚，侵入业务代码\n\n```javascript\n //action creator\n const getData = createAsyncAction(GET_DATA, function(id) {\n     return api.getData(id)\n         .catch(commonErrorHandler) //调用错误处理函数\n })\n```\n\n在有业务意义的action层调用通用处理逻辑，既能按需调用，又不妨碍异步请求的组合。但由于通用处理往往适用于多数场景，这样写会导致业务代码变得冗余，因为几乎每个action都得这么写。\n\n* 高耦合，高风险\n\n也有人把上面的方案做个依赖反转，改为在通用逻辑里监听业务action：\n\n```javascript\n function commonErrorReducer(oldState, action) {\n     switch(action.type) {\n     case GET_DATA_FAILED:\n     case PUT_DATA_FAILED:\n     //... tons of action type\n         return commonErrorHandler(action)\n     }\n }\n```\n\n这样做的本质是把冗余从业务代码中拿出来集中管理。\n\n问题在于每添加一个请求，都需要修改公共代码，把对应的action type加进来。且不说并行开发时merge冲突，如果加了一个异步action，但忘了往公共处理文件中添加——这是很可能会发生的——而异常是分支流程不容易被测试发现，等到发现，很可能就是事故而不是bug了。\n\n通过以上几种常见方案的分析，我认为比较完善的错误处理(Loading同理)需要具备如下特点：\n\n* 面向异步动作(action)，而非直接面向请求\n* 不侵入业务代码\n* 默认使用通用处理逻辑，无需额外代码\n* 可以绕过通用逻辑\n\n而借助redux-action-tools提供的meta.asyncPhase，可以轻易用middleware实现以上全部需求!\n\n```javascript\nimport _ from 'lodash'\nimport { ASYNC_PHASES } from 'redux-action-tools'\n\nfunction errorMiddleWare({dispatch}) {\n  return next => action => {\n    const asyncStep = _.get(action, 'meta.asyncStep');\n\n    if (asyncStep === ASYNC_PHASES.FAILED) {\n      dispatch({\n        type: 'COMMON_ERROR',\n        payload: {\n          action\n        }\n      })\n    }\n    next(action);\n  }\n}\n```\n\n以上中间件一旦检测到meta.asyncStep字段为FAILED的action便触发新的action去调用通用处理逻辑。面向action、不侵入业务、默认工作 (只要是用createAsyncAction声明的异步) ! 轻松实现了理想需求中的前三点，那如何定制呢？既然拦截是面向meta的，只要在创建action时支持对meta的自定义就行了，而createAsyncAction的第三个参数就是为此准备的：\n\n```javascript\nimport _ from 'lodash'\nimport { ASYNC_PHASES } from 'redux-action-tools'\n\nconst customizedAction = createAsyncAction(\n  type,\n  promiseCreator, //type 和 promiseCreator此处无不同故省略\n  (payload, defaultMeta) => {\n    return { ...defaultMeta, omitError: true }; //向meta中添加配置参数\n  }\n)\n\nfunction errorMiddleWare({dispatch}) {\n  return next => action => {\n    const asyncStep = _.get(action, 'meta.asyncStep');\n    const omitError = _.get(action, 'meta.omitError'); //获取配置参数\n\n    if (!omitError && asyncStep === ASYNC_PHASES.FAILED) {\n      dispatch({\n        type: 'COMMON_ERROR',\n        payload: {\n          action\n        }\n      })\n    }\n    next(action);\n  }\n}\n```\n\n类似的，你可以想想如何处理Loading，需要强调的是建议尽量用增量配置的方式进行扩展，而不要轻易删除和修改meta.asyncPhase。\n比如上例可以通过删除meta.asyncPhase实现同样功能，但如果同时还有其它地方也依赖meta.asyncPhase(比如loadingMiddleware)，就可能导致本意是定制错误处理，却改变了Loading的行为，客观来讲这层风险是基于meta拦截方案的最大缺点，然而相比多数场景的便利、健壮，个人认为特殊场景的风险是可以接受的，毕竟这些场景在整个开发测试流程容易获得更多关注。\n\n## 进阶方案\n\n上面所有的方案，都把异步请求这一动作放在了action creator中，这样做的好处是简单直观，且和Flux社区一脉相承(见下图)。因此个人将它们归为相对简单的一类。\n\n下面将要介绍的，是相对复杂一类，它们都采用了与上图不同的思路，去追求更优雅的架构、解决更复杂的问题\n\n### redux-loop：分形! 组合!\n\n众所周知，Redux是借鉴自Elm的，然而在Elm中，异步的处理却并不是在action creator层，而是在reducer(Elm中称update)层：\n\n> 图片来源于： [jarvisaoieong/redux-architecture](https://github.com/jarvisaoieong/redux-architecture)\n\n这样做的目的是为了实现彻底的可组合性(composable)。在redux中，reducer作为函数是可组合的，action正常情况下作为纯对象也是可组合的，然而一旦涉及异步，当action嵌套组合的时候，中间件就无法正常识别，这个问题让redux作者Dan也发出感叹 There is no easy way to compose Redux applications并且开了一个至今仍然open的issue，对组合、分形与redux的故事，有兴趣的朋友可以观摩以上链接，甚至了解一下Elm，篇幅所限，本文难以尽述。\n\n而redux-loop，则是在这方面的一个尝试，它更彻底的模仿了Elm的模式：引入Effects的概念并将其置入reducer，官方示例如下：\n\n```javascript\nimport { Effects, loop } from 'redux-loop';\nimport { loadingStart, loadingSuccess, loadingFailure } from './actions';\n\nexport function fetchDetails(id) {\n  return fetch(`/api/details/${id}`)\n    .then((r) => r.json())\n    .then(loadingSuccess)\n    .catch(loadingFailure);\n}\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING_START':\n      return loop(\n        { ...state, loading: true },\n        Effects.promise(fetchDetails, action.payload.id)\n      ); // 同时返回状态与副作用\n\n    case 'LOADING_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        details: action.payload\n      };\n\n    case 'LOADING_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.message\n      };\n\n    default:\n      return state;\n  }\n}\n```\n\n注意在reducer中，当处理LOADING_START时，并没有直接返回state对象，而是用loop函数将state和Effect”打包”返回(实际上这个返回值是数组[State, Effect]，和Elm的方式非常接近)。\n\n然而修改reducer的返回类型显然是比较暴力的做法，除非Redux官方出面，否则很难获得社区的广泛认同。更复杂的返回类型会让很多已有的API，三方库面临危险，甚至combineReducer都需要用redux-loop提供的定制版本，这种”破坏性”也是Redux作者Dan没有采纳redux-loop进入Redux核心代码的原因：”If a solution doesn’t work with vanilla combineReducers(), it won’t get into Redux core”。\n\n对Elm的分形架构有了解，想在Redux上继续实践的人来说，redux-loop是很好的参考素材，但对多数人和项目而言，最好还是更谨慎地看待\n\n### redux-saga：难、而美\n\n[Redux-saga](https://github.com/redux-saga/redux-saga)\n\n另一个著名的库，它让异步行为成为架构中独立的一层(称为saga)，既不在action creator中，也不和reducer沾边。\n\n它的出发点是把副作用 (Side effect，异步行为就是典型的副作用) 看成”线程”，可以通过普通的action去触发它，当副作用完成时也会触发action作为输出。\n\n```javascript\nimport { takeEvery } from 'redux-saga'\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* getData(action) {\n   try {\n      const response = yield call(api.getData, action.payload.id);\n      yield put({type: \"GET_DATA_SUCCEEDED\", payload: response});\n   } catch (e) {\n      yield put({type: \"GET_DATA_FAILED\", payload: error});\n   }\n}\n\nfunction* mySaga() {\n  yield* takeEvery(\"GET_DATA\", getData);\n}\n\nexport default mySaga;\n```\n\n相比action creator的方案，它可以保证组件触发的action是纯对象，因此至少在项目范围内(middleware和saga都是项目的顶层依赖，跨项目无法保证)，action的组合性明显更加优秀。\n\n而它最为主打的，则是`可测试性`和强大的`异步流程控制`。\n\n由于强制所有saga都必须是generator函数，借助generator的next接口，异步行为的每个中间步骤都被暴露给了开发者，从而实现对异步逻辑”step by step”的测试。这在其它方案中是很少看到的 (当然也可以借鉴generator这一点，但缺少约束)。\n\n而强大得有点眼花缭乱的API，特别是channel的引入，则提供了武装到牙齿级的异步流程控制能力。\n\n然而，回顾我们在讨论简单方案时提到的各种场景与问题，redux-saga并没有去尝试回答和解决它们，这意味着你需要自行寻找解决方案。而generator、相对复杂的API和单独的一层抽象也让不少人望而却步。\n\n包括我在内，很多人非常欣赏redux-saga。它的架构和思路毫无疑问是优秀甚至优雅的，但使用它之前，最好想清楚它带来的优点(可测试性、流程控制、高度解耦)与付出的成本是否匹配，特别是异步方面复杂度并不高的项目，比如多数以CRUD为主的管理系统。\n\n#### 场景解析：竞态\n\n竞态：\n\n```javascript\nfunction fetchFriend(id) {\n    return dispatch => {\n        dispatch({ type: 'FETCH_FRIEND' });\n        return fetch(`http://localhost/api/friend/${id}`)\n            .then(response => response.json())\n            .then(json => dispatch({ type: 'RECEIVE_FRIENDS', payload: json }));\n    }\n}\n```\n如果 fetch 修改为 buttonclick，setTimeout 这样的开始可以确定顺序的，\n但是 fetch 是和服务器沟通的，服务器处理数据返回顺序是不确定\n那么怎么处理？\n\n冲突流程如下：\n 点击看好友1信息\n 服务器请求\n 没等1返回， 看好友2信息 (我就想看这个)\n 好友2服务器请求返回比较快(可能在cache中)\n 显示好友2信息了\n 等了一会儿1返回了\n 覆盖了2   (BOOM!)\n\n由于异步返回时间的不确定性，后发出的请求可能先返回，如何确保异步结果的渲染是按照请求发生顺序，而不是返回顺序？\n\n这在redux-thunk为代表的简单方案中是要费点功夫的：\n\n```javascript\nfunction fetchFriend(id){\n    return (dispatch, getState) => {\n        //步骤1：在reducer中 set state.currentFriend = id;\n        dispatch({type: 'FETCH_FIREND', payload: id});\n\n        return fetch(`http://localhost/api/firend/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                //步骤2：只处理currentFriend的对应response\n                const { currentFriend } = getState();\n                (currentFriend === id) && dispatch({type: 'RECEIVE_FIRENDS', playload: json})\n            });\n    }\n}\n```\n\n以上只是示例，实际中不一定需要依赖业务id，也不一定要把id存到store里，只要为每个请求生成key，以便处理请求时能够对应起来即可。\n\n而在redux-saga中，一切非常地简单：\n\n```javascript\nimport { takeLatest } from `redux-saga`\n\nfunction* fetchFriend(action) {\n  ...\n}\n\nfunction* watchLastFetchUser() {\n  yield takeLatest('FETCH_FIREND', fetchFriend)\n}\n```\n\n这里的重点是takeLatest，它限制了同步事件与异步返回事件的顺序关系。\n\n另外还有一些基于响应式编程(Reactive Programming)的异步方案(如redux-observable)也能非常好地处理竞态场景，因为描述事件流之间的关系，正是整个响应式编程的抽象基石，而竞态在本质上就是如何保证同步事件与异步返回事件的关系，正是响应式编程的用武之地。\n\n> 实际项目中可以用高阶函数模仿takeLatest的功能，redux-thunk类方案也可以较低成本地处理竞态\n\n```javascript\nfunction takeLatestAsyncResult(promiseCreator) {\n  var index = 0;\n  return function () {\n    index++;\n    var promise = promiseCreator.apply(this, arguments);\n\n    function guardLatest(func, reqIndex) {\n      return function() {\n        if (reqIndex === index) {\n          func.apply(this, arguments)\n        }\n      }\n    }\n\n    return new Promise(function(resolve, reject) {\n      promise.then(\n        guardLatest(resolve, index),\n        guardLatest(reject, index)\n      );\n    });\n  }\n}\n\nfunction runTimeout(timeout) {\n\treturn new Promise(function(resolve) {\n    setTimeout(function() {\n\t\t\tresolve(timeout);\n    }, timeout)\n  })\n}\n\nfunction getAsyncTaskRunner(label, promiseCreator) {\n  return function(value) {\n    promiseCreator(value).then(function() {\n      console.log(`${label} : ${value}`)\n    })\n  }\n}\n\nfunction runAsyncQue(arr) {\n  arr.map(getAsyncTaskRunner('runAsyncQue', runTimeout));\n}\n\nfunction runLatestAsync(arr) {\n\tvar wrappedTimeout = takeLatestAsyncResult(runTimeout);\n  arr.map(getAsyncTaskRunner('runLatestAsync', wrappedTimeout));\n}\n\nrunAsyncQue([2000, 1000, 3000, 500, 400])\n\nrunLatestAsync([2000, 1000, 3000, 500, 400])\n\n\nfunction takeLatestAsyncResult(promiseCreator) {\n    let index = 0;\n\n    return function(){\n        index++;\n\n        const promise = promiseCreator.apply(this, arguments);\n\n        function guardLatest(func, reqIndex) {\n            return function() {\n                if (reqIndex === index) {\n                    func.apply(this, arguments)\n                }\n            }\n        }\n\n        return new Promise(function(resolve, reject){\n            promise.then(\n                guardLatest(resolve, index),\n                guardLatest(reject, index)\n            )\n        })\n    }\n}\n\n\n\n```\n","slug":"2017-05-06-redux-async","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d76d001js7t7chuorhyh","content":"<h1 id=\"Redux异步方案选型\"><a href=\"#Redux异步方案选型\" class=\"headerlink\" title=\"Redux异步方案选型\"></a>Redux异步方案选型</h1><p>作为react社区最热门的状态管理框架，相信很多人都准备甚至正在使用Redux。</p>\n<p>由于Redux的理念非常精简，没有追求大而全，这份架构上的优雅却在某种程度上伤害了使用体验：不能开箱即用，甚至是异步这种最常见的场景也要借助社区方案。</p>\n<p>如果你已经挑花了眼，或者正在挑但不知道是否适合，或者已经挑了但不知道会不会有坑，这篇文章应该适合你。</p>\n<p>本文会从一些常见的Redux异步方案出发，介绍它们的优缺点，进而讨论一些与异步相伴的常见场景，帮助你在选型时更好地权衡利弊。</p>\n<h2 id=\"简单方案\"><a href=\"#简单方案\" class=\"headerlink\" title=\"简单方案\"></a>简单方案</h2><h3 id=\"redux-thunk：指路先驱\"><a href=\"#redux-thunk：指路先驱\" class=\"headerlink\" title=\"redux-thunk：指路先驱\"></a>redux-thunk：指路先驱</h3><p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">Github</a></p>\n<blockquote>\n<p>Redux本身只能处理同步的Action，但可以通过中间件来拦截处理其它类型的action，比如函数(Thunk)，再用回调触发普通Action<br>从而实现异步处理，在这点上所有Redux的异步方案都是类似的。</p>\n</blockquote>\n<h3 id=\"redux-promise：瘦身过头\"><a href=\"#redux-promise：瘦身过头\" class=\"headerlink\" title=\"redux-promise：瘦身过头\"></a>redux-promise：瘦身过头</h3><p>由于redux-thunk写起来实在是太麻烦了，社区当然会有其它轮子出现。<a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\">redux-promise</a>则是其中比较知名的，同样也享受了官网出镜的待遇。</p>\n<p>它自定义了一个middleware，当检测到有action的payload属性是Promise对象时，就会:</p>\n<ul>\n<li>若resolve，触发一个此action的拷贝，但payload为promise的value，并设status属性为”success”</li>\n<li>若reject，触发一个此action的拷贝，但payload为promise的reason，并设status属性为”error”</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action types</span></div><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: api.getData(id) <span class=\"comment\">//payload为promise对象</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA:</div><div class=\"line\">        <span class=\"keyword\">if</span> (action.status === <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> successState</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> errorState</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>请等等，任何能明显减少代码量的方案，都应该小心它是否过度省略了什么东西，减肥是好事，减到骨头就残了。</p>\n<h4 id=\"场景解析之：乐观更新\"><a href=\"#场景解析之：乐观更新\" class=\"headerlink\" title=\"场景解析之：乐观更新\"></a>场景解析之：乐观更新</h4><p>多数异步场景都是保守更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据。</p>\n<p>最常见的例子就是微信等聊天工具，发送消息时消息立即进入了对话窗，如果发送失败的话，在消息旁边再作补充提示即可。这种交互”乐观”地相信请求会成功，因此称作乐观更新(Optimistic update)。</p>\n<p>由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作</p>\n<p>在上面redux-thunk的例子中，我们看到了GET_DATA, GET_DATA_SUCCESS、GET_DATA_FAILED三个action，分别表示初始动作、异步成功和异步失败，其中第一个action使得redux-thunk具备乐观更新的能力。</p>\n<p>而在redux-promise中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，redux认可的action对象是 plain JavaScript objects，即简单对象，而在redux-promise中，初始action的payload是个Promise。</p>\n<p>另一方面，使用status而不是type来区分两个异步action也非常值得商榷，按照redux对action的定义以及社区的普遍实践，个人还是倾向于使用不同的type，用同一type下的不同status区分action额外增加了一套隐形的约定，甚至不符合该redux-promise作者自己所提倡的FSA，体现在代码上则是在switch-case内再增加一层判断。</p>\n<h3 id=\"redux-promise-middleware：拔乱反正\"><a href=\"#redux-promise-middleware：拔乱反正\" class=\"headerlink\" title=\"redux-promise-middleware：拔乱反正\"></a>redux-promise-middleware：拔乱反正</h3><p>redux-promise-middleware相比redux-promise，采取了更为温和和渐进式的思路，保留了和redux-thunk类似的三个action。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action types</span></div><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>,</div><div class=\"line\">    GET_DATA_PENDING = <span class=\"string\">'GET_DATA_PENDING'</span>,</div><div class=\"line\">    GET_DATA_FULFILLED = <span class=\"string\">'GET_DATA_FULFILLED'</span>,</div><div class=\"line\">    GET_DATA_REJECTED = <span class=\"string\">'GET_DATA_REJECTED'</span>;</div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">promise</span>: api.getData(id),</div><div class=\"line\">            <span class=\"attr\">data</span>: id</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_PENDING :</div><div class=\"line\">        <span class=\"keyword\">return</span> oldState; <span class=\"comment\">// 可通过action.payload.data获取id</span></div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_FULFILLED :</div><div class=\"line\">        <span class=\"keyword\">return</span> successState;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_REJECTED :</div><div class=\"line\">        <span class=\"keyword\">return</span> errorState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不需要乐观更新，action creator可以使用和redux-promise完全一样的，更简洁的写法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: api.getData(id) <span class=\"comment\">//等价于 &#123;promise: api.getData(id)&#125;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时初始actionGET_DATA_PENDING仍然会触发，但是payload为空。</p>\n<p>相对redux-promise于粗暴地过滤掉整个初始action，redux-promise-middleware选择创建一个只过滤payload中的promise属性的XXX_PENDING作为初始action，以此保留乐观更新的能力。</p>\n<p>同时在action的区分上，它选择了回归type的”正途”，_PENDING、_FULFILLED、_REJECTED等后缀借用了promise规范 (当然它们是可配置的) 。</p>\n<p>它的遗憾则是只在action层实现了简化，对reducer层则束手无策。另外，相比redux-thunk，它还多出了一个_PENDING的字符串模板代码(三个action却需要四个type)。</p>\n<blockquote>\n<p>社区有类似type-to-reducer这样试图简化reducer的库。但由于reducer和异步action通常是两套独立的方案，reducer相关的库无法去猜测异步action的后缀是什么(甚至有没有后缀)，社区也没有相关标准，也就很难对异步做出精简和抽象了。</p>\n</blockquote>\n<h3 id=\"redux-action-tools：软文预警\"><a href=\"#redux-action-tools：软文预警\" class=\"headerlink\" title=\"redux-action-tools：软文预警\"></a>redux-action-tools：软文预警</h3><p>无论是redux-thunk还是redux-promise-middleware，模板代码都是显而易见的，每次写XXX_COMPLETED这样的代码都觉得是在浪费生命——你得先在常量中声明它们，再在action中引用，然后是reducer，假设像redux-thunk一样每个异步action有三个type，三个文件加起来你就得写九次!</p>\n<p>国外开发者也有相同的报怨：</p>\n<p>有没有办法让代码既像redux-promise一样简洁，又能保持乐观更新的能力呢？</p>\n<p>redux-action-tools是我给出的答案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = createAsyncAction(GET_DATA, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> api.getData(id)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"keyword\">const</span> reducer = createReducer()</div><div class=\"line\">    .when(getData, (oldState, action) =&gt; oldState)</div><div class=\"line\">    .done(<span class=\"function\">(<span class=\"params\">oldState, action</span>) =&gt;</span> successState)</div><div class=\"line\">    .failed(<span class=\"function\">(<span class=\"params\">oldState, action</span>) =&gt;</span> errorState)</div><div class=\"line\">    .build()</div></pre></td></tr></table></figure>\n<p>redux-action-tools在action层面做的事情与前面几个库大同小异：同样是派发了三个action：GET_DATA/GET_DATA_SUCCESS/GET_DATA_FAILED。这三个action的描述见下表：</p>\n<p>type When payload meta.asyncPhase ${actionName} 异步开始前 同步调用参数 ‘START’ ${actionName}_COMPLETED 异步成功 value of promise ‘COMPLETED’ ${actionName}_FAILED 异步失败 reason of promise ‘FAILED’<br>createAsyncAction参考了redux-promise作者写的redux-actions ，它接收三个参数，分别是：</p>\n<ul>\n<li>actionName 字符串，所有派生action的名字都以它为基础，初始action则与它同名</li>\n<li>promiseCreator 函数，必须返回一个promise对象</li>\n<li>metaCreator 函数，可选，作用后面会演示到</li>\n</ul>\n<p>目前看来，其实和redux-promise/redux-promise-middleware大同小异。而真正不同的，是它同时简化了reducer层! 这种简化来自于对异步行为从语义角度的抽象：</p>\n<blockquote>\n<p>当(when)初始action发生时处理同步更新，若异步成功(done)则处理成功逻辑，若异步失败(failed)则处理失败逻辑</p>\n</blockquote>\n<p>抽离出when/done/failed三个关键词作为api，并使用链式调用将他们串联起来：when函数接收两个参数：actionName和handler，其中handler是可选的，done和failed则只接收一个handler参数，并且只能在when之后调用——他们分别处理 ${actionName}_SUCCESS 和 ${actionName}_FAILED .</p>\n<p>无论是action还是reducer层，XX_SUCCESS/XX_FAILED相关的代码都被封装了起来，正如在例子中看到的——你甚至不需要声明它们! 创建一个异步action，然后处理它的成功和失败情况，事情本该这么简单。</p>\n<p>更进一步的，这三个action默认都根据当前所处的异步阶段，设置了不同的meta(见上表中的meta.asyncPhase)，它有什么用呢？用场景说话：</p>\n<h4 id=\"场景解析：失败处理与Loading\"><a href=\"#场景解析：失败处理与Loading\" class=\"headerlink\" title=\"场景解析：失败处理与Loading\"></a>场景解析：失败处理与Loading</h4><p>它们是异步不可回避的两个场景，几乎每个项目会遇到。<br>以异步请求的失败处理为例，每个项目通常都有一套比较通用的，适合多数场景的处理逻辑，比如弹窗提示。同时在一些特定场景下，又需要绕过通用逻辑进行单独处理，比如表单的异步校验</p>\n<p>而在实现通用处理逻辑时，常见的问题有以下几种：</p>\n<ul>\n<li>底层处理，扩展性不足</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchWrapper</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch.apply(fetch, args)</div><div class=\"line\">        .catch(commonErrorHandler)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在较底层封装ajax库可以轻松实现全局处理，但问题也非常明显：</p>\n<p>一是扩展性不足，比如少数场景想要绕过通用处理逻辑，还有一些场景错误是前端生成而非直接来自于请求；<br>二是不易组合，比如有的场景一个action需要多个异步请求，但异常处理和loading是不需要重复的，因为用户不需要知道一个动作有多少个请求。</p>\n<ul>\n<li>不够内聚，侵入业务代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = createAsyncAction(GET_DATA, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> api.getData(id)</div><div class=\"line\">        .catch(commonErrorHandler) <span class=\"comment\">//调用错误处理函数</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在有业务意义的action层调用通用处理逻辑，既能按需调用，又不妨碍异步请求的组合。但由于通用处理往往适用于多数场景，这样写会导致业务代码变得冗余，因为几乎每个action都得这么写。</p>\n<ul>\n<li>高耦合，高风险</li>\n</ul>\n<p>也有人把上面的方案做个依赖反转，改为在通用逻辑里监听业务action：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commonErrorReducer</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_FAILED:</div><div class=\"line\">    <span class=\"keyword\">case</span> PUT_DATA_FAILED:</div><div class=\"line\">    <span class=\"comment\">//... tons of action type</span></div><div class=\"line\">        <span class=\"keyword\">return</span> commonErrorHandler(action)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样做的本质是把冗余从业务代码中拿出来集中管理。</p>\n<p>问题在于每添加一个请求，都需要修改公共代码，把对应的action type加进来。且不说并行开发时merge冲突，如果加了一个异步action，但忘了往公共处理文件中添加——这是很可能会发生的——而异常是分支流程不容易被测试发现，等到发现，很可能就是事故而不是bug了。</p>\n<p>通过以上几种常见方案的分析，我认为比较完善的错误处理(Loading同理)需要具备如下特点：</p>\n<ul>\n<li>面向异步动作(action)，而非直接面向请求</li>\n<li>不侵入业务代码</li>\n<li>默认使用通用处理逻辑，无需额外代码</li>\n<li>可以绕过通用逻辑</li>\n</ul>\n<p>而借助redux-action-tools提供的meta.asyncPhase，可以轻易用middleware实现以上全部需求!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ASYNC_PHASES &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-action-tools'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorMiddleWare</span>(<span class=\"params\">&#123;dispatch&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> asyncStep = _.get(action, <span class=\"string\">'meta.asyncStep'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (asyncStep === ASYNC_PHASES.FAILED) &#123;</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'COMMON_ERROR'</span>,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">          action</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    next(action);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上中间件一旦检测到meta.asyncStep字段为FAILED的action便触发新的action去调用通用处理逻辑。面向action、不侵入业务、默认工作 (只要是用createAsyncAction声明的异步) ! 轻松实现了理想需求中的前三点，那如何定制呢？既然拦截是面向meta的，只要在创建action时支持对meta的自定义就行了，而createAsyncAction的第三个参数就是为此准备的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ASYNC_PHASES &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-action-tools'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> customizedAction = createAsyncAction(</div><div class=\"line\">  type,</div><div class=\"line\">  promiseCreator, <span class=\"comment\">//type 和 promiseCreator此处无不同故省略</span></div><div class=\"line\">  (payload, defaultMeta) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; ...defaultMeta, <span class=\"attr\">omitError</span>: <span class=\"literal\">true</span> &#125;; <span class=\"comment\">//向meta中添加配置参数</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorMiddleWare</span>(<span class=\"params\">&#123;dispatch&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> asyncStep = _.get(action, <span class=\"string\">'meta.asyncStep'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> omitError = _.get(action, <span class=\"string\">'meta.omitError'</span>); <span class=\"comment\">//获取配置参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!omitError &amp;&amp; asyncStep === ASYNC_PHASES.FAILED) &#123;</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'COMMON_ERROR'</span>,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">          action</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    next(action);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类似的，你可以想想如何处理Loading，需要强调的是建议尽量用增量配置的方式进行扩展，而不要轻易删除和修改meta.asyncPhase。<br>比如上例可以通过删除meta.asyncPhase实现同样功能，但如果同时还有其它地方也依赖meta.asyncPhase(比如loadingMiddleware)，就可能导致本意是定制错误处理，却改变了Loading的行为，客观来讲这层风险是基于meta拦截方案的最大缺点，然而相比多数场景的便利、健壮，个人认为特殊场景的风险是可以接受的，毕竟这些场景在整个开发测试流程容易获得更多关注。</p>\n<h2 id=\"进阶方案\"><a href=\"#进阶方案\" class=\"headerlink\" title=\"进阶方案\"></a>进阶方案</h2><p>上面所有的方案，都把异步请求这一动作放在了action creator中，这样做的好处是简单直观，且和Flux社区一脉相承(见下图)。因此个人将它们归为相对简单的一类。</p>\n<p>下面将要介绍的，是相对复杂一类，它们都采用了与上图不同的思路，去追求更优雅的架构、解决更复杂的问题</p>\n<h3 id=\"redux-loop：分形-组合\"><a href=\"#redux-loop：分形-组合\" class=\"headerlink\" title=\"redux-loop：分形! 组合!\"></a>redux-loop：分形! 组合!</h3><p>众所周知，Redux是借鉴自Elm的，然而在Elm中，异步的处理却并不是在action creator层，而是在reducer(Elm中称update)层：</p>\n<blockquote>\n<p>图片来源于： <a href=\"https://github.com/jarvisaoieong/redux-architecture\" target=\"_blank\" rel=\"external\">jarvisaoieong/redux-architecture</a></p>\n</blockquote>\n<p>这样做的目的是为了实现彻底的可组合性(composable)。在redux中，reducer作为函数是可组合的，action正常情况下作为纯对象也是可组合的，然而一旦涉及异步，当action嵌套组合的时候，中间件就无法正常识别，这个问题让redux作者Dan也发出感叹 There is no easy way to compose Redux applications并且开了一个至今仍然open的issue，对组合、分形与redux的故事，有兴趣的朋友可以观摩以上链接，甚至了解一下Elm，篇幅所限，本文难以尽述。</p>\n<p>而redux-loop，则是在这方面的一个尝试，它更彻底的模仿了Elm的模式：引入Effects的概念并将其置入reducer，官方示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Effects, loop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-loop'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; loadingStart, loadingSuccess, loadingFailure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchDetails</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fetch(<span class=\"string\">`/api/details/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.json())</div><div class=\"line\">    .then(loadingSuccess)</div><div class=\"line\">    .catch(loadingFailure);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_START'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> loop(</div><div class=\"line\">        &#123; ...state, <span class=\"attr\">loading</span>: <span class=\"literal\">true</span> &#125;,</div><div class=\"line\">        Effects.promise(fetchDetails, action.payload.id)</div><div class=\"line\">      ); <span class=\"comment\">// 同时返回状态与副作用</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_SUCCESS'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">details</span>: action.payload</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_FAILURE'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">error</span>: action.payload.message</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意在reducer中，当处理LOADING_START时，并没有直接返回state对象，而是用loop函数将state和Effect”打包”返回(实际上这个返回值是数组[State, Effect]，和Elm的方式非常接近)。</p>\n<p>然而修改reducer的返回类型显然是比较暴力的做法，除非Redux官方出面，否则很难获得社区的广泛认同。更复杂的返回类型会让很多已有的API，三方库面临危险，甚至combineReducer都需要用redux-loop提供的定制版本，这种”破坏性”也是Redux作者Dan没有采纳redux-loop进入Redux核心代码的原因：”If a solution doesn’t work with vanilla combineReducers(), it won’t get into Redux core”。</p>\n<p>对Elm的分形架构有了解，想在Redux上继续实践的人来说，redux-loop是很好的参考素材，但对多数人和项目而言，最好还是更谨慎地看待</p>\n<h3 id=\"redux-saga：难、而美\"><a href=\"#redux-saga：难、而美\" class=\"headerlink\" title=\"redux-saga：难、而美\"></a>redux-saga：难、而美</h3><p><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">Redux-saga</a></p>\n<p>另一个著名的库，它让异步行为成为架构中独立的一层(称为saga)，既不在action creator中，也不和reducer沾边。</p>\n<p>它的出发点是把副作用 (Side effect，异步行为就是典型的副作用) 看成”线程”，可以通过普通的action去触发它，当副作用完成时也会触发action作为输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; call, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Api <span class=\"keyword\">from</span> <span class=\"string\">'...'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getData</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">yield</span> call(api.getData, action.payload.id);</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"GET_DATA_SUCCEEDED\"</span>, <span class=\"attr\">payload</span>: response&#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"GET_DATA_FAILED\"</span>, <span class=\"attr\">payload</span>: error&#125;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* takeEvery(<span class=\"string\">\"GET_DATA\"</span>, getData);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</div></pre></td></tr></table></figure>\n<p>相比action creator的方案，它可以保证组件触发的action是纯对象，因此至少在项目范围内(middleware和saga都是项目的顶层依赖，跨项目无法保证)，action的组合性明显更加优秀。</p>\n<p>而它最为主打的，则是<code>可测试性</code>和强大的<code>异步流程控制</code>。</p>\n<p>由于强制所有saga都必须是generator函数，借助generator的next接口，异步行为的每个中间步骤都被暴露给了开发者，从而实现对异步逻辑”step by step”的测试。这在其它方案中是很少看到的 (当然也可以借鉴generator这一点，但缺少约束)。</p>\n<p>而强大得有点眼花缭乱的API，特别是channel的引入，则提供了武装到牙齿级的异步流程控制能力。</p>\n<p>然而，回顾我们在讨论简单方案时提到的各种场景与问题，redux-saga并没有去尝试回答和解决它们，这意味着你需要自行寻找解决方案。而generator、相对复杂的API和单独的一层抽象也让不少人望而却步。</p>\n<p>包括我在内，很多人非常欣赏redux-saga。它的架构和思路毫无疑问是优秀甚至优雅的，但使用它之前，最好想清楚它带来的优点(可测试性、流程控制、高度解耦)与付出的成本是否匹配，特别是异步方面复杂度并不高的项目，比如多数以CRUD为主的管理系统。</p>\n<h4 id=\"场景解析：竞态\"><a href=\"#场景解析：竞态\" class=\"headerlink\" title=\"场景解析：竞态\"></a>场景解析：竞态</h4><p>竞态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchFriend</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">        dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_FRIEND'</span> &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://localhost/api/friend/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'RECEIVE_FRIENDS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果 fetch 修改为 buttonclick，setTimeout 这样的开始可以确定顺序的，<br>但是 fetch 是和服务器沟通的，服务器处理数据返回顺序是不确定<br>那么怎么处理？</p>\n<p>冲突流程如下：<br> 点击看好友1信息<br> 服务器请求<br> 没等1返回， 看好友2信息 (我就想看这个)<br> 好友2服务器请求返回比较快(可能在cache中)<br> 显示好友2信息了<br> 等了一会儿1返回了<br> 覆盖了2   (BOOM!)</p>\n<p>由于异步返回时间的不确定性，后发出的请求可能先返回，如何确保异步结果的渲染是按照请求发生顺序，而不是返回顺序？</p>\n<p>这在redux-thunk为代表的简单方案中是要费点功夫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchFriend</span>(<span class=\"params\">id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//步骤1：在reducer中 set state.currentFriend = id;</span></div><div class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'FETCH_FIREND'</span>, <span class=\"attr\">payload</span>: id&#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://localhost/api/firend/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//步骤2：只处理currentFriend的对应response</span></div><div class=\"line\">                <span class=\"keyword\">const</span> &#123; currentFriend &#125; = getState();</div><div class=\"line\">                (currentFriend === id) &amp;&amp; dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'RECEIVE_FIRENDS'</span>, <span class=\"attr\">playload</span>: json&#125;)</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上只是示例，实际中不一定需要依赖业务id，也不一定要把id存到store里，只要为每个请求生成key，以便处理请求时能够对应起来即可。</p>\n<p>而在redux-saga中，一切非常地简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest &#125; <span class=\"keyword\">from</span> <span class=\"string\">`redux-saga`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchFriend</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchLastFetchUser</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> takeLatest(<span class=\"string\">'FETCH_FIREND'</span>, fetchFriend)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的重点是takeLatest，它限制了同步事件与异步返回事件的顺序关系。</p>\n<p>另外还有一些基于响应式编程(Reactive Programming)的异步方案(如redux-observable)也能非常好地处理竞态场景，因为描述事件流之间的关系，正是整个响应式编程的抽象基石，而竞态在本质上就是如何保证同步事件与异步返回事件的关系，正是响应式编程的用武之地。</p>\n<blockquote>\n<p>实际项目中可以用高阶函数模仿takeLatest的功能，redux-thunk类方案也可以较低成本地处理竞态</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLatestAsyncResult</span>(<span class=\"params\">promiseCreator</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    index++;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise = promiseCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">guardLatest</span>(<span class=\"params\">func, reqIndex</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reqIndex === index) &#123;</div><div class=\"line\">          func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">      promise.then(</div><div class=\"line\">        guardLatest(resolve, index),</div><div class=\"line\">        guardLatest(reject, index)</div><div class=\"line\">      );</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runTimeout</span>(<span class=\"params\">timeout</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tresolve(timeout);</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsyncTaskRunner</span>(<span class=\"params\">label, promiseCreator</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    promiseCreator(value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;label&#125;</span> : <span class=\"subst\">$&#123;value&#125;</span>`</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsyncQue</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  arr.map(getAsyncTaskRunner(<span class=\"string\">'runAsyncQue'</span>, runTimeout));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runLatestAsync</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> wrappedTimeout = takeLatestAsyncResult(runTimeout);</div><div class=\"line\">  arr.map(getAsyncTaskRunner(<span class=\"string\">'runLatestAsync'</span>, wrappedTimeout));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">runAsyncQue([<span class=\"number\">2000</span>, <span class=\"number\">1000</span>, <span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>])</div><div class=\"line\"></div><div class=\"line\">runLatestAsync([<span class=\"number\">2000</span>, <span class=\"number\">1000</span>, <span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLatestAsyncResult</span>(<span class=\"params\">promiseCreator</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">const</span> promise = promiseCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">guardLatest</span>(<span class=\"params\">func, reqIndex</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (reqIndex === index) &#123;</div><div class=\"line\">                    func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">            promise.then(</div><div class=\"line\">                guardLatest(resolve, index),</div><div class=\"line\">                guardLatest(reject, index)</div><div class=\"line\">            )</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux异步方案选型\"><a href=\"#Redux异步方案选型\" class=\"headerlink\" title=\"Redux异步方案选型\"></a>Redux异步方案选型</h1><p>作为react社区最热门的状态管理框架，相信很多人都准备甚至正在使用Redux。</p>\n<p>由于Redux的理念非常精简，没有追求大而全，这份架构上的优雅却在某种程度上伤害了使用体验：不能开箱即用，甚至是异步这种最常见的场景也要借助社区方案。</p>\n<p>如果你已经挑花了眼，或者正在挑但不知道是否适合，或者已经挑了但不知道会不会有坑，这篇文章应该适合你。</p>\n<p>本文会从一些常见的Redux异步方案出发，介绍它们的优缺点，进而讨论一些与异步相伴的常见场景，帮助你在选型时更好地权衡利弊。</p>\n<h2 id=\"简单方案\"><a href=\"#简单方案\" class=\"headerlink\" title=\"简单方案\"></a>简单方案</h2><h3 id=\"redux-thunk：指路先驱\"><a href=\"#redux-thunk：指路先驱\" class=\"headerlink\" title=\"redux-thunk：指路先驱\"></a>redux-thunk：指路先驱</h3><p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">Github</a></p>\n<blockquote>\n<p>Redux本身只能处理同步的Action，但可以通过中间件来拦截处理其它类型的action，比如函数(Thunk)，再用回调触发普通Action<br>从而实现异步处理，在这点上所有Redux的异步方案都是类似的。</p>\n</blockquote>\n<h3 id=\"redux-promise：瘦身过头\"><a href=\"#redux-promise：瘦身过头\" class=\"headerlink\" title=\"redux-promise：瘦身过头\"></a>redux-promise：瘦身过头</h3><p>由于redux-thunk写起来实在是太麻烦了，社区当然会有其它轮子出现。<a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\">redux-promise</a>则是其中比较知名的，同样也享受了官网出镜的待遇。</p>\n<p>它自定义了一个middleware，当检测到有action的payload属性是Promise对象时，就会:</p>\n<ul>\n<li>若resolve，触发一个此action的拷贝，但payload为promise的value，并设status属性为”success”</li>\n<li>若reject，触发一个此action的拷贝，但payload为promise的reason，并设status属性为”error”</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action types</span></div><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: api.getData(id) <span class=\"comment\">//payload为promise对象</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA:</div><div class=\"line\">        <span class=\"keyword\">if</span> (action.status === <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> successState</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> errorState</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>请等等，任何能明显减少代码量的方案，都应该小心它是否过度省略了什么东西，减肥是好事，减到骨头就残了。</p>\n<h4 id=\"场景解析之：乐观更新\"><a href=\"#场景解析之：乐观更新\" class=\"headerlink\" title=\"场景解析之：乐观更新\"></a>场景解析之：乐观更新</h4><p>多数异步场景都是保守更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据。</p>\n<p>最常见的例子就是微信等聊天工具，发送消息时消息立即进入了对话窗，如果发送失败的话，在消息旁边再作补充提示即可。这种交互”乐观”地相信请求会成功，因此称作乐观更新(Optimistic update)。</p>\n<p>由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作</p>\n<p>在上面redux-thunk的例子中，我们看到了GET_DATA, GET_DATA_SUCCESS、GET_DATA_FAILED三个action，分别表示初始动作、异步成功和异步失败，其中第一个action使得redux-thunk具备乐观更新的能力。</p>\n<p>而在redux-promise中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，redux认可的action对象是 plain JavaScript objects，即简单对象，而在redux-promise中，初始action的payload是个Promise。</p>\n<p>另一方面，使用status而不是type来区分两个异步action也非常值得商榷，按照redux对action的定义以及社区的普遍实践，个人还是倾向于使用不同的type，用同一type下的不同status区分action额外增加了一套隐形的约定，甚至不符合该redux-promise作者自己所提倡的FSA，体现在代码上则是在switch-case内再增加一层判断。</p>\n<h3 id=\"redux-promise-middleware：拔乱反正\"><a href=\"#redux-promise-middleware：拔乱反正\" class=\"headerlink\" title=\"redux-promise-middleware：拔乱反正\"></a>redux-promise-middleware：拔乱反正</h3><p>redux-promise-middleware相比redux-promise，采取了更为温和和渐进式的思路，保留了和redux-thunk类似的三个action。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action types</span></div><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>,</div><div class=\"line\">    GET_DATA_PENDING = <span class=\"string\">'GET_DATA_PENDING'</span>,</div><div class=\"line\">    GET_DATA_FULFILLED = <span class=\"string\">'GET_DATA_FULFILLED'</span>,</div><div class=\"line\">    GET_DATA_REJECTED = <span class=\"string\">'GET_DATA_REJECTED'</span>;</div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">promise</span>: api.getData(id),</div><div class=\"line\">            <span class=\"attr\">data</span>: id</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_PENDING :</div><div class=\"line\">        <span class=\"keyword\">return</span> oldState; <span class=\"comment\">// 可通过action.payload.data获取id</span></div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_FULFILLED :</div><div class=\"line\">        <span class=\"keyword\">return</span> successState;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_REJECTED :</div><div class=\"line\">        <span class=\"keyword\">return</span> errorState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不需要乐观更新，action creator可以使用和redux-promise完全一样的，更简洁的写法，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: GET_DATA,</div><div class=\"line\">        <span class=\"attr\">payload</span>: api.getData(id) <span class=\"comment\">//等价于 &#123;promise: api.getData(id)&#125;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时初始actionGET_DATA_PENDING仍然会触发，但是payload为空。</p>\n<p>相对redux-promise于粗暴地过滤掉整个初始action，redux-promise-middleware选择创建一个只过滤payload中的promise属性的XXX_PENDING作为初始action，以此保留乐观更新的能力。</p>\n<p>同时在action的区分上，它选择了回归type的”正途”，_PENDING、_FULFILLED、_REJECTED等后缀借用了promise规范 (当然它们是可配置的) 。</p>\n<p>它的遗憾则是只在action层实现了简化，对reducer层则束手无策。另外，相比redux-thunk，它还多出了一个_PENDING的字符串模板代码(三个action却需要四个type)。</p>\n<blockquote>\n<p>社区有类似type-to-reducer这样试图简化reducer的库。但由于reducer和异步action通常是两套独立的方案，reducer相关的库无法去猜测异步action的后缀是什么(甚至有没有后缀)，社区也没有相关标准，也就很难对异步做出精简和抽象了。</p>\n</blockquote>\n<h3 id=\"redux-action-tools：软文预警\"><a href=\"#redux-action-tools：软文预警\" class=\"headerlink\" title=\"redux-action-tools：软文预警\"></a>redux-action-tools：软文预警</h3><p>无论是redux-thunk还是redux-promise-middleware，模板代码都是显而易见的，每次写XXX_COMPLETED这样的代码都觉得是在浪费生命——你得先在常量中声明它们，再在action中引用，然后是reducer，假设像redux-thunk一样每个异步action有三个type，三个文件加起来你就得写九次!</p>\n<p>国外开发者也有相同的报怨：</p>\n<p>有没有办法让代码既像redux-promise一样简洁，又能保持乐观更新的能力呢？</p>\n<p>redux-action-tools是我给出的答案：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> GET_DATA = <span class=\"string\">'GET_DATA'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = createAsyncAction(GET_DATA, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> api.getData(id)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reducer</span></div><div class=\"line\"><span class=\"keyword\">const</span> reducer = createReducer()</div><div class=\"line\">    .when(getData, (oldState, action) =&gt; oldState)</div><div class=\"line\">    .done(<span class=\"function\">(<span class=\"params\">oldState, action</span>) =&gt;</span> successState)</div><div class=\"line\">    .failed(<span class=\"function\">(<span class=\"params\">oldState, action</span>) =&gt;</span> errorState)</div><div class=\"line\">    .build()</div></pre></td></tr></table></figure>\n<p>redux-action-tools在action层面做的事情与前面几个库大同小异：同样是派发了三个action：GET_DATA/GET_DATA_SUCCESS/GET_DATA_FAILED。这三个action的描述见下表：</p>\n<p>type When payload meta.asyncPhase ${actionName} 异步开始前 同步调用参数 ‘START’ ${actionName}_COMPLETED 异步成功 value of promise ‘COMPLETED’ ${actionName}_FAILED 异步失败 reason of promise ‘FAILED’<br>createAsyncAction参考了redux-promise作者写的redux-actions ，它接收三个参数，分别是：</p>\n<ul>\n<li>actionName 字符串，所有派生action的名字都以它为基础，初始action则与它同名</li>\n<li>promiseCreator 函数，必须返回一个promise对象</li>\n<li>metaCreator 函数，可选，作用后面会演示到</li>\n</ul>\n<p>目前看来，其实和redux-promise/redux-promise-middleware大同小异。而真正不同的，是它同时简化了reducer层! 这种简化来自于对异步行为从语义角度的抽象：</p>\n<blockquote>\n<p>当(when)初始action发生时处理同步更新，若异步成功(done)则处理成功逻辑，若异步失败(failed)则处理失败逻辑</p>\n</blockquote>\n<p>抽离出when/done/failed三个关键词作为api，并使用链式调用将他们串联起来：when函数接收两个参数：actionName和handler，其中handler是可选的，done和failed则只接收一个handler参数，并且只能在when之后调用——他们分别处理 ${actionName}_SUCCESS 和 ${actionName}_FAILED .</p>\n<p>无论是action还是reducer层，XX_SUCCESS/XX_FAILED相关的代码都被封装了起来，正如在例子中看到的——你甚至不需要声明它们! 创建一个异步action，然后处理它的成功和失败情况，事情本该这么简单。</p>\n<p>更进一步的，这三个action默认都根据当前所处的异步阶段，设置了不同的meta(见上表中的meta.asyncPhase)，它有什么用呢？用场景说话：</p>\n<h4 id=\"场景解析：失败处理与Loading\"><a href=\"#场景解析：失败处理与Loading\" class=\"headerlink\" title=\"场景解析：失败处理与Loading\"></a>场景解析：失败处理与Loading</h4><p>它们是异步不可回避的两个场景，几乎每个项目会遇到。<br>以异步请求的失败处理为例，每个项目通常都有一套比较通用的，适合多数场景的处理逻辑，比如弹窗提示。同时在一些特定场景下，又需要绕过通用逻辑进行单独处理，比如表单的异步校验</p>\n<p>而在实现通用处理逻辑时，常见的问题有以下几种：</p>\n<ul>\n<li>底层处理，扩展性不足</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchWrapper</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch.apply(fetch, args)</div><div class=\"line\">        .catch(commonErrorHandler)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在较底层封装ajax库可以轻松实现全局处理，但问题也非常明显：</p>\n<p>一是扩展性不足，比如少数场景想要绕过通用处理逻辑，还有一些场景错误是前端生成而非直接来自于请求；<br>二是不易组合，比如有的场景一个action需要多个异步请求，但异常处理和loading是不需要重复的，因为用户不需要知道一个动作有多少个请求。</p>\n<ul>\n<li>不够内聚，侵入业务代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//action creator</span></div><div class=\"line\"><span class=\"keyword\">const</span> getData = createAsyncAction(GET_DATA, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> api.getData(id)</div><div class=\"line\">        .catch(commonErrorHandler) <span class=\"comment\">//调用错误处理函数</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在有业务意义的action层调用通用处理逻辑，既能按需调用，又不妨碍异步请求的组合。但由于通用处理往往适用于多数场景，这样写会导致业务代码变得冗余，因为几乎每个action都得这么写。</p>\n<ul>\n<li>高耦合，高风险</li>\n</ul>\n<p>也有人把上面的方案做个依赖反转，改为在通用逻辑里监听业务action：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commonErrorReducer</span>(<span class=\"params\">oldState, action</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> GET_DATA_FAILED:</div><div class=\"line\">    <span class=\"keyword\">case</span> PUT_DATA_FAILED:</div><div class=\"line\">    <span class=\"comment\">//... tons of action type</span></div><div class=\"line\">        <span class=\"keyword\">return</span> commonErrorHandler(action)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样做的本质是把冗余从业务代码中拿出来集中管理。</p>\n<p>问题在于每添加一个请求，都需要修改公共代码，把对应的action type加进来。且不说并行开发时merge冲突，如果加了一个异步action，但忘了往公共处理文件中添加——这是很可能会发生的——而异常是分支流程不容易被测试发现，等到发现，很可能就是事故而不是bug了。</p>\n<p>通过以上几种常见方案的分析，我认为比较完善的错误处理(Loading同理)需要具备如下特点：</p>\n<ul>\n<li>面向异步动作(action)，而非直接面向请求</li>\n<li>不侵入业务代码</li>\n<li>默认使用通用处理逻辑，无需额外代码</li>\n<li>可以绕过通用逻辑</li>\n</ul>\n<p>而借助redux-action-tools提供的meta.asyncPhase，可以轻易用middleware实现以上全部需求!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ASYNC_PHASES &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-action-tools'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorMiddleWare</span>(<span class=\"params\">&#123;dispatch&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> asyncStep = _.get(action, <span class=\"string\">'meta.asyncStep'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (asyncStep === ASYNC_PHASES.FAILED) &#123;</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'COMMON_ERROR'</span>,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">          action</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    next(action);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上中间件一旦检测到meta.asyncStep字段为FAILED的action便触发新的action去调用通用处理逻辑。面向action、不侵入业务、默认工作 (只要是用createAsyncAction声明的异步) ! 轻松实现了理想需求中的前三点，那如何定制呢？既然拦截是面向meta的，只要在创建action时支持对meta的自定义就行了，而createAsyncAction的第三个参数就是为此准备的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'lodash'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; ASYNC_PHASES &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-action-tools'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> customizedAction = createAsyncAction(</div><div class=\"line\">  type,</div><div class=\"line\">  promiseCreator, <span class=\"comment\">//type 和 promiseCreator此处无不同故省略</span></div><div class=\"line\">  (payload, defaultMeta) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; ...defaultMeta, <span class=\"attr\">omitError</span>: <span class=\"literal\">true</span> &#125;; <span class=\"comment\">//向meta中添加配置参数</span></div><div class=\"line\">  &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorMiddleWare</span>(<span class=\"params\">&#123;dispatch&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> action =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> asyncStep = _.get(action, <span class=\"string\">'meta.asyncStep'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> omitError = _.get(action, <span class=\"string\">'meta.omitError'</span>); <span class=\"comment\">//获取配置参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!omitError &amp;&amp; asyncStep === ASYNC_PHASES.FAILED) &#123;</div><div class=\"line\">      dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'COMMON_ERROR'</span>,</div><div class=\"line\">        <span class=\"attr\">payload</span>: &#123;</div><div class=\"line\">          action</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    next(action);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类似的，你可以想想如何处理Loading，需要强调的是建议尽量用增量配置的方式进行扩展，而不要轻易删除和修改meta.asyncPhase。<br>比如上例可以通过删除meta.asyncPhase实现同样功能，但如果同时还有其它地方也依赖meta.asyncPhase(比如loadingMiddleware)，就可能导致本意是定制错误处理，却改变了Loading的行为，客观来讲这层风险是基于meta拦截方案的最大缺点，然而相比多数场景的便利、健壮，个人认为特殊场景的风险是可以接受的，毕竟这些场景在整个开发测试流程容易获得更多关注。</p>\n<h2 id=\"进阶方案\"><a href=\"#进阶方案\" class=\"headerlink\" title=\"进阶方案\"></a>进阶方案</h2><p>上面所有的方案，都把异步请求这一动作放在了action creator中，这样做的好处是简单直观，且和Flux社区一脉相承(见下图)。因此个人将它们归为相对简单的一类。</p>\n<p>下面将要介绍的，是相对复杂一类，它们都采用了与上图不同的思路，去追求更优雅的架构、解决更复杂的问题</p>\n<h3 id=\"redux-loop：分形-组合\"><a href=\"#redux-loop：分形-组合\" class=\"headerlink\" title=\"redux-loop：分形! 组合!\"></a>redux-loop：分形! 组合!</h3><p>众所周知，Redux是借鉴自Elm的，然而在Elm中，异步的处理却并不是在action creator层，而是在reducer(Elm中称update)层：</p>\n<blockquote>\n<p>图片来源于： <a href=\"https://github.com/jarvisaoieong/redux-architecture\" target=\"_blank\" rel=\"external\">jarvisaoieong/redux-architecture</a></p>\n</blockquote>\n<p>这样做的目的是为了实现彻底的可组合性(composable)。在redux中，reducer作为函数是可组合的，action正常情况下作为纯对象也是可组合的，然而一旦涉及异步，当action嵌套组合的时候，中间件就无法正常识别，这个问题让redux作者Dan也发出感叹 There is no easy way to compose Redux applications并且开了一个至今仍然open的issue，对组合、分形与redux的故事，有兴趣的朋友可以观摩以上链接，甚至了解一下Elm，篇幅所限，本文难以尽述。</p>\n<p>而redux-loop，则是在这方面的一个尝试，它更彻底的模仿了Elm的模式：引入Effects的概念并将其置入reducer，官方示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Effects, loop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-loop'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; loadingStart, loadingSuccess, loadingFailure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchDetails</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fetch(<span class=\"string\">`/api/details/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.json())</div><div class=\"line\">    .then(loadingSuccess)</div><div class=\"line\">    .catch(loadingFailure);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_START'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> loop(</div><div class=\"line\">        &#123; ...state, <span class=\"attr\">loading</span>: <span class=\"literal\">true</span> &#125;,</div><div class=\"line\">        Effects.promise(fetchDetails, action.payload.id)</div><div class=\"line\">      ); <span class=\"comment\">// 同时返回状态与副作用</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_SUCCESS'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">details</span>: action.payload</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'LOADING_FAILURE'</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">error</span>: action.payload.message</div><div class=\"line\">      &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意在reducer中，当处理LOADING_START时，并没有直接返回state对象，而是用loop函数将state和Effect”打包”返回(实际上这个返回值是数组[State, Effect]，和Elm的方式非常接近)。</p>\n<p>然而修改reducer的返回类型显然是比较暴力的做法，除非Redux官方出面，否则很难获得社区的广泛认同。更复杂的返回类型会让很多已有的API，三方库面临危险，甚至combineReducer都需要用redux-loop提供的定制版本，这种”破坏性”也是Redux作者Dan没有采纳redux-loop进入Redux核心代码的原因：”If a solution doesn’t work with vanilla combineReducers(), it won’t get into Redux core”。</p>\n<p>对Elm的分形架构有了解，想在Redux上继续实践的人来说，redux-loop是很好的参考素材，但对多数人和项目而言，最好还是更谨慎地看待</p>\n<h3 id=\"redux-saga：难、而美\"><a href=\"#redux-saga：难、而美\" class=\"headerlink\" title=\"redux-saga：难、而美\"></a>redux-saga：难、而美</h3><p><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">Redux-saga</a></p>\n<p>另一个著名的库，它让异步行为成为架构中独立的一层(称为saga)，既不在action creator中，也不和reducer沾边。</p>\n<p>它的出发点是把副作用 (Side effect，异步行为就是典型的副作用) 看成”线程”，可以通过普通的action去触发它，当副作用完成时也会触发action作为输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeEvery &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; call, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Api <span class=\"keyword\">from</span> <span class=\"string\">'...'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getData</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">yield</span> call(api.getData, action.payload.id);</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"GET_DATA_SUCCEEDED\"</span>, <span class=\"attr\">payload</span>: response&#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: <span class=\"string\">\"GET_DATA_FAILED\"</span>, <span class=\"attr\">payload</span>: error&#125;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">mySaga</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* takeEvery(<span class=\"string\">\"GET_DATA\"</span>, getData);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> mySaga;</div></pre></td></tr></table></figure>\n<p>相比action creator的方案，它可以保证组件触发的action是纯对象，因此至少在项目范围内(middleware和saga都是项目的顶层依赖，跨项目无法保证)，action的组合性明显更加优秀。</p>\n<p>而它最为主打的，则是<code>可测试性</code>和强大的<code>异步流程控制</code>。</p>\n<p>由于强制所有saga都必须是generator函数，借助generator的next接口，异步行为的每个中间步骤都被暴露给了开发者，从而实现对异步逻辑”step by step”的测试。这在其它方案中是很少看到的 (当然也可以借鉴generator这一点，但缺少约束)。</p>\n<p>而强大得有点眼花缭乱的API，特别是channel的引入，则提供了武装到牙齿级的异步流程控制能力。</p>\n<p>然而，回顾我们在讨论简单方案时提到的各种场景与问题，redux-saga并没有去尝试回答和解决它们，这意味着你需要自行寻找解决方案。而generator、相对复杂的API和单独的一层抽象也让不少人望而却步。</p>\n<p>包括我在内，很多人非常欣赏redux-saga。它的架构和思路毫无疑问是优秀甚至优雅的，但使用它之前，最好想清楚它带来的优点(可测试性、流程控制、高度解耦)与付出的成本是否匹配，特别是异步方面复杂度并不高的项目，比如多数以CRUD为主的管理系统。</p>\n<h4 id=\"场景解析：竞态\"><a href=\"#场景解析：竞态\" class=\"headerlink\" title=\"场景解析：竞态\"></a>场景解析：竞态</h4><p>竞态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchFriend</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</div><div class=\"line\">        dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_FRIEND'</span> &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://localhost/api/friend/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'RECEIVE_FRIENDS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果 fetch 修改为 buttonclick，setTimeout 这样的开始可以确定顺序的，<br>但是 fetch 是和服务器沟通的，服务器处理数据返回顺序是不确定<br>那么怎么处理？</p>\n<p>冲突流程如下：<br> 点击看好友1信息<br> 服务器请求<br> 没等1返回， 看好友2信息 (我就想看这个)<br> 好友2服务器请求返回比较快(可能在cache中)<br> 显示好友2信息了<br> 等了一会儿1返回了<br> 覆盖了2   (BOOM!)</p>\n<p>由于异步返回时间的不确定性，后发出的请求可能先返回，如何确保异步结果的渲染是按照请求发生顺序，而不是返回顺序？</p>\n<p>这在redux-thunk为代表的简单方案中是要费点功夫的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchFriend</span>(<span class=\"params\">id</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//步骤1：在reducer中 set state.currentFriend = id;</span></div><div class=\"line\">        dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'FETCH_FIREND'</span>, <span class=\"attr\">payload</span>: id&#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> fetch(<span class=\"string\">`http://localhost/api/firend/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//步骤2：只处理currentFriend的对应response</span></div><div class=\"line\">                <span class=\"keyword\">const</span> &#123; currentFriend &#125; = getState();</div><div class=\"line\">                (currentFriend === id) &amp;&amp; dispatch(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'RECEIVE_FIRENDS'</span>, <span class=\"attr\">playload</span>: json&#125;)</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上只是示例，实际中不一定需要依赖业务id，也不一定要把id存到store里，只要为每个请求生成key，以便处理请求时能够对应起来即可。</p>\n<p>而在redux-saga中，一切非常地简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest &#125; <span class=\"keyword\">from</span> <span class=\"string\">`redux-saga`</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchFriend</span>(<span class=\"params\">action</span>) </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchLastFetchUser</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> takeLatest(<span class=\"string\">'FETCH_FIREND'</span>, fetchFriend)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的重点是takeLatest，它限制了同步事件与异步返回事件的顺序关系。</p>\n<p>另外还有一些基于响应式编程(Reactive Programming)的异步方案(如redux-observable)也能非常好地处理竞态场景，因为描述事件流之间的关系，正是整个响应式编程的抽象基石，而竞态在本质上就是如何保证同步事件与异步返回事件的关系，正是响应式编程的用武之地。</p>\n<blockquote>\n<p>实际项目中可以用高阶函数模仿takeLatest的功能，redux-thunk类方案也可以较低成本地处理竞态</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLatestAsyncResult</span>(<span class=\"params\">promiseCreator</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    index++;</div><div class=\"line\">    <span class=\"keyword\">var</span> promise = promiseCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">guardLatest</span>(<span class=\"params\">func, reqIndex</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reqIndex === index) &#123;</div><div class=\"line\">          func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">      promise.then(</div><div class=\"line\">        guardLatest(resolve, index),</div><div class=\"line\">        guardLatest(reject, index)</div><div class=\"line\">      );</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runTimeout</span>(<span class=\"params\">timeout</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tresolve(timeout);</div><div class=\"line\">    &#125;, timeout)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsyncTaskRunner</span>(<span class=\"params\">label, promiseCreator</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    promiseCreator(value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;label&#125;</span> : <span class=\"subst\">$&#123;value&#125;</span>`</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsyncQue</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  arr.map(getAsyncTaskRunner(<span class=\"string\">'runAsyncQue'</span>, runTimeout));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runLatestAsync</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> wrappedTimeout = takeLatestAsyncResult(runTimeout);</div><div class=\"line\">  arr.map(getAsyncTaskRunner(<span class=\"string\">'runLatestAsync'</span>, wrappedTimeout));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">runAsyncQue([<span class=\"number\">2000</span>, <span class=\"number\">1000</span>, <span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>])</div><div class=\"line\"></div><div class=\"line\">runLatestAsync([<span class=\"number\">2000</span>, <span class=\"number\">1000</span>, <span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">takeLatestAsyncResult</span>(<span class=\"params\">promiseCreator</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        index++;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">const</span> promise = promiseCreator.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">guardLatest</span>(<span class=\"params\">func, reqIndex</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (reqIndex === index) &#123;</div><div class=\"line\">                    func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">            promise.then(</div><div class=\"line\">                guardLatest(resolve, index),</div><div class=\"line\">                guardLatest(reject, index)</div><div class=\"line\">            )</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Throttle and Debounce","subtitle":"javascript","date":"2017-03-21T16:00:00.000Z","author":"Asher","header-img":"home-bg.jpg","header-mask":0.3,"catalog":true,"_content":"\n# throttle\n\n> 策略电梯，当第一个人进入时开始计时，t时间后关门。\n\n```javascript\n/**\n* 频率控制 返回函数连续调用时，action 执行频率限定为 次 / delay\n* @param delay  {number}    延迟时间，单位毫秒\n* @param action {function}  请求关联函数，实际应用需要调用的函数\n* @return {function}    返回客户调用函数\n*/\nthrottle(delay,action)\n\nvar throttle = function(delay, action){\n  var last = 0\n  return function(){\n    var curr = +new Date()\n    if (curr - last > delay){\n      action.apply(this, arguments)\n      last = curr\n    }\n  }\n}\n\n _.throttle = function(func, wait, options) {\n    /* options的默认值\n     *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。\n     *  options.leading = true;\n     * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。\n     *  options.trailing = true;\n     * 注意：当options.trailing = false时，效果与上面的简单实现效果相同\n     */\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 当到达wait指定的时间间隔，则调用func函数\n      // 精彩之处：按理来说remaining <= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。\n      if (remaining <= 0 || remaining > wait) {\n        // 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // options.trailing=true时，延时执行func函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n# debounce\n\n> 策略电梯，当第一个人进入时开始计时，之后再次进入人，重新计时。t时间后关门。\n\n```javascript\n/**\n* 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 idle，action 才会执行\n* @param idle   {number}    空闲时间，单位毫秒\n* @param action {function}  请求关联函数，实际应用需要调用的函数\n* @return {function}    返回客户调用函数\n*/\ndebounce(idle,action)\n\nvar debounce = function(idle, action){\n  var last\n  return function(){\n    var ctx = this, args = arguments\n    clearTimeout(last)\n    last = setTimeout(function(){\n        action.apply(ctx, args)\n    }, idle)\n  }\n}\n\n_.debounce = function(func, wait, immediate) {\n    // immediate默认为false\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      // 当wait指定的时间间隔期间多次调用_.debounce返回的函数，则会不断更新timestamp的值，导致last < wait && last >= 0一直为true，从而不断启动新的计时器延时执行func\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      // 第一次调用该方法时，且immediate为true，则调用func函数\n      var callNow = immediate && !timeout;\n      // 在wait指定的时间间隔内首次调用该方法，则启动计时器定时调用func函数\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n```\n","source":"_posts/2017-05-10-throttle-debounce.markdown","raw":"---\nlayout:     post\ntitle:      \"Throttle and Debounce\"\nsubtitle:   \"javascript\"\ndate:       2017-03-22\nauthor:     \"Asher\"\nheader-img: \"home-bg.jpg\"\nheader-mask: 0.3\ncatalog:    true\ntags:\n    - javascript\n---\n\n# throttle\n\n> 策略电梯，当第一个人进入时开始计时，t时间后关门。\n\n```javascript\n/**\n* 频率控制 返回函数连续调用时，action 执行频率限定为 次 / delay\n* @param delay  {number}    延迟时间，单位毫秒\n* @param action {function}  请求关联函数，实际应用需要调用的函数\n* @return {function}    返回客户调用函数\n*/\nthrottle(delay,action)\n\nvar throttle = function(delay, action){\n  var last = 0\n  return function(){\n    var curr = +new Date()\n    if (curr - last > delay){\n      action.apply(this, arguments)\n      last = curr\n    }\n  }\n}\n\n _.throttle = function(func, wait, options) {\n    /* options的默认值\n     *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。\n     *  options.leading = true;\n     * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。\n     *  options.trailing = true;\n     * 注意：当options.trailing = false时，效果与上面的简单实现效果相同\n     */\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 当到达wait指定的时间间隔，则调用func函数\n      // 精彩之处：按理来说remaining <= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。\n      if (remaining <= 0 || remaining > wait) {\n        // 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // options.trailing=true时，延时执行func函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n# debounce\n\n> 策略电梯，当第一个人进入时开始计时，之后再次进入人，重新计时。t时间后关门。\n\n```javascript\n/**\n* 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 idle，action 才会执行\n* @param idle   {number}    空闲时间，单位毫秒\n* @param action {function}  请求关联函数，实际应用需要调用的函数\n* @return {function}    返回客户调用函数\n*/\ndebounce(idle,action)\n\nvar debounce = function(idle, action){\n  var last\n  return function(){\n    var ctx = this, args = arguments\n    clearTimeout(last)\n    last = setTimeout(function(){\n        action.apply(ctx, args)\n    }, idle)\n  }\n}\n\n_.debounce = function(func, wait, immediate) {\n    // immediate默认为false\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      // 当wait指定的时间间隔期间多次调用_.debounce返回的函数，则会不断更新timestamp的值，导致last < wait && last >= 0一直为true，从而不断启动新的计时器延时执行func\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      // 第一次调用该方法时，且immediate为true，则调用func函数\n      var callNow = immediate && !timeout;\n      // 在wait指定的时间间隔内首次调用该方法，则启动计时器定时调用func函数\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n```\n","slug":"2017-05-10-throttle-debounce","published":1,"updated":"2017-05-27T01:50:29.000Z","comments":1,"photos":[],"link":"","_id":"cj3f7d76j001ms7t7kaehsir9","content":"<h1 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h1><blockquote>\n<p>策略电梯，当第一个人进入时开始计时，t时间后关门。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 频率控制 返回函数连续调用时，action 执行频率限定为 次 / delay</div><div class=\"line\">* @param delay  &#123;number&#125;    延迟时间，单位毫秒</div><div class=\"line\">* @param action &#123;function&#125;  请求关联函数，实际应用需要调用的函数</div><div class=\"line\">* @return &#123;function&#125;    返回客户调用函数</div><div class=\"line\">*/</div><div class=\"line\">throttle(delay,action)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">delay, action</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> last = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> curr = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">    <span class=\"keyword\">if</span> (curr - last &gt; delay)&#123;</div><div class=\"line\">      action.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">      last = curr</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> _.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* options的默认值</span></div><div class=\"line\">     *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。</div><div class=\"line\">     *  options.leading = true;</div><div class=\"line\">     * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。</div><div class=\"line\">     *  options.trailing = true;</div><div class=\"line\">     * 注意：当options.trailing = false时，效果与上面的简单实现效果相同</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</div><div class=\"line\">      timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</div><div class=\"line\">      <span class=\"comment\">// 计算剩余时间</span></div><div class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      <span class=\"comment\">// 当到达wait指定的时间间隔，则调用func函数</span></div><div class=\"line\">      <span class=\"comment\">// 精彩之处：按理来说remaining &lt;= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</div><div class=\"line\">        <span class=\"comment\">// 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</div><div class=\"line\">          clearTimeout(timeout);</div><div class=\"line\">          timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// options.trailing=true时，延时执行func函数</span></div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a>debounce</h1><blockquote>\n<p>策略电梯，当第一个人进入时开始计时，之后再次进入人，重新计时。t时间后关门。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 idle，action 才会执行</div><div class=\"line\">* @param idle   &#123;number&#125;    空闲时间，单位毫秒</div><div class=\"line\">* @param action &#123;function&#125;  请求关联函数，实际应用需要调用的函数</div><div class=\"line\">* @return &#123;function&#125;    返回客户调用函数</div><div class=\"line\">*/</div><div class=\"line\">debounce(idle,action)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">idle, action</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> last</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></div><div class=\"line\">    clearTimeout(last)</div><div class=\"line\">    last = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        action.apply(ctx, args)</div><div class=\"line\">    &#125;, idle)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// immediate默认为false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 当wait指定的时间间隔期间多次调用_.debounce返回的函数，则会不断更新timestamp的值，导致last &lt; wait &amp;&amp; last &gt;= 0一直为true，从而不断启动新的计时器延时执行func</span></div><div class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timestamp;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, wait - last);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</div><div class=\"line\">          result = func.apply(context, args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      timestamp = _.now();</div><div class=\"line\">      <span class=\"comment\">// 第一次调用该方法时，且immediate为true，则调用func函数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">      <span class=\"comment\">// 在wait指定的时间间隔内首次调用该方法，则启动计时器定时调用func函数</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</div><div class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h1><blockquote>\n<p>策略电梯，当第一个人进入时开始计时，t时间后关门。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 频率控制 返回函数连续调用时，action 执行频率限定为 次 / delay</div><div class=\"line\">* @param delay  &#123;number&#125;    延迟时间，单位毫秒</div><div class=\"line\">* @param action &#123;function&#125;  请求关联函数，实际应用需要调用的函数</div><div class=\"line\">* @return &#123;function&#125;    返回客户调用函数</div><div class=\"line\">*/</div><div class=\"line\">throttle(delay,action)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">delay, action</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> last = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> curr = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">    <span class=\"keyword\">if</span> (curr - last &gt; delay)&#123;</div><div class=\"line\">      action.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)</div><div class=\"line\">      last = curr</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> _.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* options的默认值</span></div><div class=\"line\">     *  表示首次调用返回值方法时，会马上调用func；否则仅会记录当前时刻，当第二次调用的时间间隔超过wait时，才调用func。</div><div class=\"line\">     *  options.leading = true;</div><div class=\"line\">     * 表示当调用方法时，未到达wait指定的时间间隔，则启动计时器延迟调用func函数，若后续在既未达到wait指定的时间间隔和func函数又未被调用的情况下调用返回值方法，则被调用请求将被丢弃。</div><div class=\"line\">     *  options.trailing = true;</div><div class=\"line\">     * 注意：当options.trailing = false时，效果与上面的简单实现效果相同</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</div><div class=\"line\">      timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">      result = func.apply(context, args);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</div><div class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</div><div class=\"line\">      <span class=\"comment\">// 计算剩余时间</span></div><div class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      <span class=\"comment\">// 当到达wait指定的时间间隔，则调用func函数</span></div><div class=\"line\">      <span class=\"comment\">// 精彩之处：按理来说remaining &lt;= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数。</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</div><div class=\"line\">        <span class=\"comment\">// 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔，但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</div><div class=\"line\">          clearTimeout(timeout);</div><div class=\"line\">          timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        previous = now;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// options.trailing=true时，延时执行func函数</span></div><div class=\"line\">        timeout = setTimeout(later, remaining);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a>debounce</h1><blockquote>\n<p>策略电梯，当第一个人进入时开始计时，之后再次进入人，重新计时。t时间后关门。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 idle，action 才会执行</div><div class=\"line\">* @param idle   &#123;number&#125;    空闲时间，单位毫秒</div><div class=\"line\">* @param action &#123;function&#125;  请求关联函数，实际应用需要调用的函数</div><div class=\"line\">* @return &#123;function&#125;    返回客户调用函数</div><div class=\"line\">*/</div><div class=\"line\">debounce(idle,action)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">idle, action</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> last</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span></div><div class=\"line\">    clearTimeout(last)</div><div class=\"line\">    last = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        action.apply(ctx, args)</div><div class=\"line\">    &#125;, idle)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// immediate默认为false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 当wait指定的时间间隔期间多次调用_.debounce返回的函数，则会不断更新timestamp的值，导致last &lt; wait &amp;&amp; last &gt;= 0一直为true，从而不断启动新的计时器延时执行func</span></div><div class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timestamp;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        timeout = setTimeout(later, wait - last);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        timeout = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</div><div class=\"line\">          result = func.apply(context, args);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      context = <span class=\"keyword\">this</span>;</div><div class=\"line\">      args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">      timestamp = _.now();</div><div class=\"line\">      <span class=\"comment\">// 第一次调用该方法时，且immediate为true，则调用func函数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">      <span class=\"comment\">// 在wait指定的时间间隔内首次调用该方法，则启动计时器定时调用func函数</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</div><div class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</div><div class=\"line\">        result = func.apply(context, args);</div><div class=\"line\">        context = args = <span class=\"literal\">null</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj3f7d73q0001s7t7r7san6zh","tag_id":"cj3f7d7430005s7t7i6jqrov4","_id":"cj3f7d74o000cs7t7806h8b0m"},{"post_id":"cj3f7d73x0003s7t7nukfpf5e","tag_id":"cj3f7d74n000bs7t72mmlehd8","_id":"cj3f7d74w000hs7t7cg9zpsk8"},{"post_id":"cj3f7d74t000gs7t731cwuhin","tag_id":"cj3f7d7430005s7t7i6jqrov4","_id":"cj3f7d74z000ks7t71ibrtldf"},{"post_id":"cj3f7d74a0006s7t7trmwnnhy","tag_id":"cj3f7d74s000fs7t7l03xt5rm","_id":"cj3f7d752000ms7t76z1rszsd"},{"post_id":"cj3f7d74i0008s7t7zm9lpccm","tag_id":"cj3f7d74z000js7t75p5sd3a4","_id":"cj3f7d759000qs7t7fys1j2j5"},{"post_id":"cj3f7d753000ns7t7d7cpwwgi","tag_id":"cj3f7d74n000bs7t72mmlehd8","_id":"cj3f7d75d000ss7t727rbn79n"},{"post_id":"cj3f7d74l000as7t7b2y12z2s","tag_id":"cj3f7d755000os7t7j41nek5z","_id":"cj3f7d75q000vs7t7uyced60j"},{"post_id":"cj3f7d74o000ds7t7ejtuoucd","tag_id":"cj3f7d75q000us7t79m2q1fd7","_id":"cj3f7d75v0010s7t70ylwa60h"},{"post_id":"cj3f7d75v000zs7t7x7tqayv0","tag_id":"cj3f7d75u000ys7t71q8axvgr","_id":"cj3f7d75x0013s7t7k7qoxi5r"},{"post_id":"cj3f7d74q000es7t7to4hs9j8","tag_id":"cj3f7d75u000ys7t71q8axvgr","_id":"cj3f7d75y0015s7t7r2hh5d9y"},{"post_id":"cj3f7d74x000is7t7eg4z752w","tag_id":"cj3f7d75x0012s7t7wfu9n1fl","_id":"cj3f7d7620019s7t7t1j4gkqj"},{"post_id":"cj3f7d750000ls7t7ix6yg9wl","tag_id":"cj3f7d7600017s7t7qjsct027","_id":"cj3f7d767001ds7t705rpqhmy"},{"post_id":"cj3f7d756000ps7t77vu718lv","tag_id":"cj3f7d766001cs7t7g115fgla","_id":"cj3f7d76c001is7t7ss9i4pev"},{"post_id":"cj3f7d768001fs7t7ygzd9lql","tag_id":"cj3f7d75x0012s7t7wfu9n1fl","_id":"cj3f7d76j001ks7t71g2clzns"},{"post_id":"cj3f7d75a000rs7t7am3syygm","tag_id":"cj3f7d76b001gs7t7n567zuso","_id":"cj3f7d76k001ns7t7g6zqat64"},{"post_id":"cj3f7d76j001ms7t7kaehsir9","tag_id":"cj3f7d7600017s7t7qjsct027","_id":"cj3f7d76l001os7t7gve5p7vu"},{"post_id":"cj3f7d75e000ts7t7r4wohl1f","tag_id":"cj3f7d76j001ls7t79qtx78s8","_id":"cj3f7d76l001qs7t7lojohan1"},{"post_id":"cj3f7d75q000ws7t79ffbj64t","tag_id":"cj3f7d76l001ps7t7s2ec0494","_id":"cj3f7d76m001ss7t7dolozwmk"},{"post_id":"cj3f7d75t000xs7t7bntcgevv","tag_id":"cj3f7d76l001rs7t7vdu4w1ws","_id":"cj3f7d76o001us7t714yo5s9s"},{"post_id":"cj3f7d75w0011s7t7vnfvsoza","tag_id":"cj3f7d75x0012s7t7wfu9n1fl","_id":"cj3f7d76p001ws7t718l4pb0e"},{"post_id":"cj3f7d75x0014s7t70kqm3b1a","tag_id":"cj3f7d76o001vs7t75dv2w8wt","_id":"cj3f7d76q001ys7t7jionnv88"},{"post_id":"cj3f7d75y0016s7t7fpczjbxb","tag_id":"cj3f7d76l001rs7t7vdu4w1ws","_id":"cj3f7d76r0020s7t7r2hn7z2x"},{"post_id":"cj3f7d7600018s7t7j8o8pwj5","tag_id":"cj3f7d76q001zs7t7qhvf43d5","_id":"cj3f7d76s0022s7t7htadgfp7"},{"post_id":"cj3f7d762001as7t71ho26ynp","tag_id":"cj3f7d76r0021s7t7il1is43t","_id":"cj3f7d76s0024s7t7jsc0wnlt"},{"post_id":"cj3f7d765001bs7t7u39c5d8c","tag_id":"cj3f7d76s0023s7t7mctew84r","_id":"cj3f7d76t0028s7t750r5eqjv"},{"post_id":"cj3f7d765001bs7t7u39c5d8c","tag_id":"cj3f7d76s0025s7t768n0w7hr","_id":"cj3f7d76t0029s7t7at0pkv1c"},{"post_id":"cj3f7d765001bs7t7u39c5d8c","tag_id":"cj3f7d76s0026s7t72zvsbnej","_id":"cj3f7d76u002bs7t7qqaiy6hq"},{"post_id":"cj3f7d767001es7t7scsxk6a5","tag_id":"cj3f7d76t0027s7t7gts9dbhm","_id":"cj3f7d76u002cs7t7w543oczy"},{"post_id":"cj3f7d76b001hs7t7ctgfe8kf","tag_id":"cj3f7d76t002as7t7say2qfjw","_id":"cj3f7d76u002es7t7upe4c75d"},{"post_id":"cj3f7d76d001js7t7chuorhyh","tag_id":"cj3f7d76u002ds7t783anclgd","_id":"cj3f7d76v002fs7t7opw0yxbo"}],"Tag":[{"name":"HTML","_id":"cj3f7d7430005s7t7i6jqrov4"},{"name":"WebPack","_id":"cj3f7d74n000bs7t72mmlehd8"},{"name":"React","_id":"cj3f7d74s000fs7t7l03xt5rm"},{"name":"回忆","_id":"cj3f7d74z000js7t75p5sd3a4"},{"name":"CSS","_id":"cj3f7d755000os7t7j41nek5z"},{"name":"Github","_id":"cj3f7d75q000us7t79m2q1fd7"},{"name":"前端工具","_id":"cj3f7d75u000ys7t71q8axvgr"},{"name":"Frontend","_id":"cj3f7d75x0012s7t7wfu9n1fl"},{"name":"javascript","_id":"cj3f7d7600017s7t7qjsct027"},{"name":"Jekyll","_id":"cj3f7d766001cs7t7g115fgla"},{"name":"Vue","_id":"cj3f7d76b001gs7t7n567zuso"},{"name":"understore","_id":"cj3f7d76j001ls7t79qtx78s8"},{"name":"NodeJS","_id":"cj3f7d76l001ps7t7s2ec0494"},{"name":"Javascript","_id":"cj3f7d76l001rs7t7vdu4w1ws"},{"name":"Guide","_id":"cj3f7d76o001vs7t75dv2w8wt"},{"name":"Promise","_id":"cj3f7d76q001zs7t7qhvf43d5"},{"name":"Functional","_id":"cj3f7d76r0021s7t7il1is43t"},{"name":"前端开发","_id":"cj3f7d76s0023s7t7mctew84r"},{"name":"JavaScript","_id":"cj3f7d76s0025s7t768n0w7hr"},{"name":"PWA","_id":"cj3f7d76s0026s7t72zvsbnej"},{"name":"Mobx","_id":"cj3f7d76t0027s7t7gts9dbhm"},{"name":"Gulp and Markdown","_id":"cj3f7d76t002as7t7say2qfjw"},{"name":"Redux","_id":"cj3f7d76u002ds7t783anclgd"}]}}